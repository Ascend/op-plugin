import unittest
import numpy as np
import torch_npu
import torch
from torch_npu.testing.testcase import TestCase, run_tests
from torch_npu.testing.common_utils import get_npu_device
torch.npu.set_compile_mode(jit_compile=False)

DEVICE_NAME = torch_npu.npu.get_device_name(0)[:10]


class TestNPUAddLayerNorm(TestCase):
    def supported_op_exec(self, x1, x2, gamma, beta):
        epsilon = 1e-5
        x = x1 + x2
        mean = np.mean(x, axis=-1, keepdims=True)
        variance = np.var(x, axis=-1, keepdims=True)
        rstd = 1 / np.sqrt(variance + epsilon)
        y = ((x - mean) * rstd) * gamma + beta
        return y, mean, rstd, x

    def custom_op_exec(self, x1, x2, gamma, beta):
        y, mean, rstd, x = torch_npu.npu_add_layer_norm(x1, x2, gamma, beta, 1e-5, True)
        return y.cpu().numpy(), mean.cpu().numpy(), rstd.cpu().numpy(), x.cpu().numpy()

    @unittest.skipIf(DEVICE_NAME != 'Ascend910B',
        "OP `AddLayerNorm` is only supported on 910B, skip this ut for this device type!")
    def test_add_layer_norm(self, device="npu"):
        if device is None:
            device = get_npu_device()
        cpu_input_x1 = np.random.uniform(0, 100, [1, 1024, 8192]).astype(np.float32)
        cpu_input_x2 = np.random.uniform(0, 100, [1, 1024, 8192]).astype(np.float32)
        cpu_input_gamma = np.random.uniform(0, 1, [8192]).astype(np.float32)
        cpu_input_beta = np.random.uniform(0, 1, [8192]).astype(np.float32)
        
        npu_input_x1 = torch.from_numpy(cpu_input_x1).to(device)
        npu_input_x2 = torch.from_numpy(cpu_input_x2).to(device)
        npu_input_gamma = torch.from_numpy(cpu_input_gamma).to(device)
        npu_input_beta = torch.from_numpy(cpu_input_beta).to(device)

        supported_y, supported_mean, supported_rstd, supported_x = self.supported_op_exec(cpu_input_x1, cpu_input_x2, cpu_input_gamma, cpu_input_beta)
        custom_y, custom_mean, custom_rstd, custom_x = self.custom_op_exec(npu_input_x1, npu_input_x2, npu_input_gamma, npu_input_beta)
        
        self.assertRtolEqual(supported_y, custom_y)
        self.assertRtolEqual(supported_mean, custom_mean)
        self.assertRtolEqual(supported_rstd, custom_rstd)
        self.assertRtolEqual(supported_x, custom_x)

if __name__ == "__main__":
    run_tests()