official:
 - func: __and__.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: __and__.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: __ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: __ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: __ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: __ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: __irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: __irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: __lshift__.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: __lshift__.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: __or__.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: __or__.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: __rshift__.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: __rshift__.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: __xor__.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: __xor__.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: _adaptive_avg_pool2d(Tensor self, SymInt[2] output_size) -> Tensor
   impl_ns: acl_op
 - func: _adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor
   impl_ns: acl_op
 - func: _adaptive_avg_pool3d(Tensor self, SymInt[3] output_size) -> Tensor
   impl_ns: acl_op
 - func: _adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor
   impl_ns: acl_op
 - func: _add_relu.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: _add_relu.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: _add_relu_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: _aminmax(Tensor self) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: _aminmax.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: aminmax.out(Tensor self, *, int? dim=None, bool keepdim=False, Tensor(a!) min, Tensor(b!) max) -> (Tensor(a!) min, Tensor(b!) max)
   impl_ns: acl_op
 - func: _amp_foreach_non_finite_check_and_unscale_(Tensor(a!)[] self, Tensor(b!) found_inf, Tensor inv_scale) -> ()
   impl_ns: acl_op
 - func: _batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, Tensor, int)
   impl_ns: acl_op
 - func: _batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: _cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor
   impl_ns: acl_op
 - func: _cdist_forward(Tensor x1, Tensor x2, float p, int? compute_mode) -> Tensor
   impl_ns: acl_op
 - func: _conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, SymInt[2] padding, int[2] dilation) -> Tensor
   impl_ns: acl_op
 - func: _conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, SymInt[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)
   use_const_ref_for_mutable_tensors: True
   impl_ns: acl_op
 - func: _convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, SymInt[] padding, int[] dilation, bool transposed, SymInt[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32) -> Tensor
   impl_ns: acl_op
 - func: _ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)
   impl_ns: acl_op, op_api
 - func: _ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor
   impl_ns: acl_op, op_api
 - func: _cummax_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
   impl_ns: acl_op
 - func: _cummin_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
   impl_ns: acl_op
 - func: _dim_arange(Tensor like, int dim) -> Tensor
   impl_ns: acl_op
 - func: _embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: _embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, SymInt num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor
   impl_ns: acl_op
 - func: _embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, SymInt num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor
   impl_ns: acl_op
 - func: _embedding_bag_forward_only(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: _index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)
   impl_ns: acl_op
 - func: _linalg_svd.U(Tensor A, bool full_matrices=False, bool compute_uv=True, *, str? driver=None, Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh)
   impl_ns: acl_op
 - func: _log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor
   impl_ns: acl_op
 - func: _log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype) -> Tensor
   impl_ns: acl_op
 - func: _log_softmax_backward_data.out(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: _nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, SymInt[2] padding, int[2] stride=1) -> Tensor
   impl_ns: acl_op
 - func: _pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: _pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: _pdist_forward(Tensor self, float p=2) -> Tensor
   impl_ns: acl_op
 - func: _slow_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
   impl_ns: acl_op
 - func: _slow_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> Tensor
   impl_ns: acl_op
 - func: _slow_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output) -> Tensor(a!)
   impl_ns: acl_op
 - func: _softmax(Tensor self, int dim, bool half_to_float) -> Tensor
   impl_ns: acl_op
 - func: _softmax.out(Tensor self, int dim, bool half_to_float, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: _softmax_backward_data(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype) -> Tensor
   impl_ns: acl_op
 - func: _softmax_backward_data.out(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: _unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: abs(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: abs_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: acos(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: acos_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: acosh(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: acosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: acosh_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor
   impl_ns: acl_op
 - func: adaptive_avg_pool2d(Tensor self, SymInt[2] output_size) -> Tensor
   impl_ns: acl_op
 - func: adaptive_avg_pool2d.out(Tensor self, SymInt[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: adaptive_avg_pool3d(Tensor self, SymInt[3] output_size) -> Tensor
   impl_ns: acl_op
 - func: adaptive_avg_pool3d.out(Tensor self, SymInt[3] output_size, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
   impl_ns: acl_op
 - func: adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor
   impl_ns: acl_op
 - func: adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor
   impl_ns: acl_op, op_api
 - func: addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor
   impl_ns: acl_op
 - func: addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: affine_grid_generator(Tensor theta, SymInt[] size, bool align_corners) -> Tensor
   impl_ns: acl_op
 - func: affine_grid_generator_backward(Tensor grad, SymInt[] size, bool align_corners) -> Tensor
   impl_ns: acl_op
 - func: all(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: all.all_out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: amax(Tensor self, int[1] dim=[], bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: amax.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: amin(Tensor self, int[1] dim=[], bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: amin.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: any(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: any.all_out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: arange.start_step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: argmin.out(Tensor self, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor
   impl_ns: acl_op
 - func: argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor
   impl_ns: acl_op
 - func: asin(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: asin_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: asinh(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: asinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: asinh_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: atan(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: atan2(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: atan_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: atanh(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: atanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: atanh_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor
   impl_ns: acl_op
 - func: avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor
   impl_ns: acl_op
 - func: avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor
   impl_ns: acl_op
 - func: avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor
   impl_ns: acl_op
 - func: avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor
   impl_ns: acl_op
 - func: batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor sum_dy, Tensor sum_dy_xmu, Tensor count) -> Tensor
   impl_ns: acl_op
 - func: batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor
   impl_ns: acl_op
 - func: batch_norm_elemt.out(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, Tensor counts) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: bernoulli(Tensor self, *, Generator? generator=None) -> Tensor
   impl_ns: acl_op
 - func: bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor
   impl_ns: acl_op
 - func: bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor
   impl_ns: acl_op
 - func: binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor
   impl_ns: acl_op
 - func: binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor
   impl_ns: acl_op
 - func: bitwise_and.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: bitwise_and.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: bitwise_and.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: bitwise_and.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: bitwise_and_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: bitwise_and_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: bitwise_not(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: bitwise_not_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: bitwise_or.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op, op_api
 - func: bitwise_or.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: bitwise_or.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op, op_api
 - func: bitwise_or.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: bitwise_xor.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op, op_api
 - func: bitwise_xor.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: bitwise_xor.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op, op_api
 - func: bitwise_xor.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: bitwise_xor_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: bitwise_xor_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: bmm(Tensor self, Tensor mat2) -> Tensor
   impl_ns: acl_op
 - func: bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: cat(Tensor[] tensors, int dim=0) -> Tensor
   structured_delegate: cat.out
   impl_ns: acl_op
 - func: cat.names(Tensor[] tensors, Dimname dim) -> Tensor
   impl_ns: acl_op
 - func: cat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
   structured: True
   impl_ns: acl_op
 - func: cdist(Tensor x1, Tensor x2, float p=2, int? compute_mode=None) -> Tensor
   impl_ns: acl_op
 - func: ceil(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: ceil_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: channel_shuffle(Tensor self, int groups) -> Tensor
   impl_ns: acl_op
 - func: clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor
   impl_ns: acl_op
 - func: clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: clamp_max(Tensor self, Scalar max) -> Tensor
   impl_ns: acl_op
 - func: clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)
   impl_ns: acl_op
 - func: clamp_min(Tensor self, Scalar min) -> Tensor
   impl_ns: acl_op
 - func: clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)
   impl_ns: acl_op
 - func: clamp.Tensor(Tensor self, Tensor? min=None, Tensor? max=None) -> Tensor
   impl_ns: acl_op
 - func: clamp.Tensor_out(Tensor self, Tensor? min=None, Tensor? max=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: clamp_.Tensor(Tensor(a!) self, Tensor? min=None, Tensor? max=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: clamp_max.Tensor(Tensor self, Tensor max) -> Tensor
   impl_ns: acl_op
 - func: clamp_max.Tensor_out(Tensor self, Tensor max, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: clamp_max_.Tensor(Tensor(a!) self, Tensor max) -> Tensor(a!)
   impl_ns: acl_op
 - func: clamp_min.Tensor(Tensor self, Tensor min) -> Tensor
   impl_ns: acl_op
 - func: clamp_min.Tensor_out(Tensor self, Tensor min, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: clamp_min_.Tensor(Tensor(a!) self, Tensor min) -> Tensor(a!)
   impl_ns: acl_op
 - func: col2im(Tensor self, SymInt[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
   impl_ns: acl_op, op_api
 - func: col2im.out(Tensor self, SymInt[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: constant_pad_nd(Tensor self, SymInt[] pad, Scalar value=0) -> Tensor
   impl_ns: acl_op
 - func: conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor
   impl_ns: acl_op
 - func: conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, SymInt[2] padding=0, SymInt[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor
   impl_ns: acl_op
 - func: conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, SymInt[3] padding=0, SymInt[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor
   impl_ns: acl_op
 - func: convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, SymInt[] padding, int[] dilation, bool transposed, SymInt[] output_padding, int groups) -> Tensor
   impl_ns: acl_op
 - func: convolution_backward(Tensor grad_output, Tensor input, Tensor weight, SymInt[]? bias_sizes, int[] stride, SymInt[] padding, int[] dilation, bool transposed, SymInt[] output_padding, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
   impl_ns: acl_op
 - func: convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor
   impl_ns: acl_op
 - func: count_nonzero(Tensor self, int? dim=None) -> Tensor
   impl_ns: acl_op
 - func: count_nonzero.dim_IntList(Tensor self, int[] dim) -> Tensor
   impl_ns: acl_op
 - func: cos(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: cos_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: cosh(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: cosh_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor
   impl_ns: acl_op, op_api
 - func: ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor
   impl_ns: acl_op, op_api
 - func: cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: cumprod_(Tensor(a!) self, int dim, *, ScalarType? dtype=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: cumprod_.dimname(Tensor(a!) self, Dimname dim, *, ScalarType? dtype=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op, op_api
 - func: cumsum.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: diag(Tensor self, int diagonal=0) -> Tensor
   impl_ns: acl_op
 - func: diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: div.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: div.Scalar_mode(Tensor self, Scalar other, *, str? rounding_mode) -> Tensor
   impl_ns: acl_op
 - func: div.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: div.Tensor_mode(Tensor self, Tensor other, *, str? rounding_mode) -> Tensor
   impl_ns: acl_op
 - func: div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: div.out_mode(Tensor self, Tensor other, *, str? rounding_mode, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: div_.Scalar_mode(Tensor(a!) self, Scalar other, *, str? rounding_mode) -> Tensor(a!)
   impl_ns: acl_op
 - func: div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: div_.Tensor_mode(Tensor(a!) self, Tensor other, *, str? rounding_mode) -> Tensor(a!)
   impl_ns: acl_op
 - func: dot(Tensor self, Tensor tensor) -> Tensor
   impl_ns: acl_op, op_api
 - func: dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: dropout(Tensor input, float p, bool train) -> Tensor
   impl_ns: acl_op
 - func: embedding(Tensor weight, Tensor indices, SymInt padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor
   impl_ns: acl_op, op_api
 - func: embedding_backward(Tensor grad, Tensor indices, SymInt num_weights, SymInt padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor
   impl_ns: acl_op, op_api
 - func: embedding_dense_backward(Tensor grad_output, Tensor indices, SymInt num_weights, SymInt padding_idx, bool scale_grad_by_freq) -> Tensor
   impl_ns: acl_op, op_api
 - func: embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: eq.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op, op_api
 - func: eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: eq.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op, op_api
 - func: eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: equal(Tensor self, Tensor other) -> bool
   impl_ns: acl_op, op_api
 - func: erf(Tensor self) -> Tensor
   impl_ns: acl_op, op_api
 - func: erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: erf_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: erfc(Tensor self) -> Tensor
   impl_ns: acl_op, op_api
 - func: erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: erfc_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: erfinv(Tensor self) -> Tensor
   impl_ns: acl_op, op_api
 - func: erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: erfinv_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: exp(Tensor self) -> Tensor
   impl_ns: acl_op, op_api
 - func: exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: exp2(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: exp2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: exp2_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: exp_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: expm1(Tensor self) -> Tensor
   impl_ns: acl_op, op_api
 - func: expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: expm1_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: eye(SymInt n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op, op_api
 - func: eye.m(SymInt n, SymInt m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op, op_api
 - func: eye.m_out(SymInt n, SymInt m, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: eye.out(SymInt n, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)
   impl_ns: acl_op
 - func: fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)
   impl_ns: acl_op
 - func: flip(Tensor self, int[] dims) -> Tensor
   impl_ns: acl_op, op_api
 - func: floor(Tensor self) -> Tensor
   impl_ns: acl_op, op_api
 - func: floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: floor_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: floor_divide(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: floor_divide.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: floor_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: floor_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: floor_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: fmod.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op, op_api
 - func: fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: fmod.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op, op_api
 - func: fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: fmod_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: frac(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: frac_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor
   impl_ns: acl_op, op_api
 - func: gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor
   impl_ns: acl_op, op_api
 - func: gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: ge.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op, op_api
 - func: ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: ge.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op, op_api
 - func: ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: gelu(Tensor self, *, str approximate='none') -> Tensor
   impl_ns: acl_op, op_api
 - func: gelu_backward(Tensor grad_output, Tensor self, *, str approximate='none') -> Tensor
   impl_ns: acl_op, op_api
 - func: ger(Tensor self, Tensor vec2) -> Tensor
   impl_ns: acl_op
 - func: ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: glu(Tensor self, int dim=-1) -> Tensor
   impl_ns: acl_op, op_api
 - func: glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor
   impl_ns: acl_op, op_api
 - func: glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
   impl_ns: acl_op, op_api
 - func: grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners, bool[2] output_mask) -> (Tensor, Tensor)
   impl_ns: acl_op, op_api
 - func: grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
   impl_ns: acl_op
 - func: grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners, bool[2] output_mask) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: gt.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op, op_api
 - func: gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: gt.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op, op_api
 - func: gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor
   impl_ns: acl_op
 - func: hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor
   impl_ns: acl_op
 - func: hardsigmoid(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: hardsigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: hardsigmoid_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: hardsigmoid_backward(Tensor grad_output, Tensor self) -> Tensor
   impl_ns: acl_op
 - func: hardswish(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: hardswish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: hardswish_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: hardswish_backward(Tensor grad_output, Tensor self) -> Tensor
   impl_ns: acl_op
 - func: hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor
   impl_ns: acl_op, op_api
 - func: hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor
   impl_ns: acl_op, op_api
 - func: hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
   impl_ns: acl_op
 - func: im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: index.Tensor(Tensor self, Tensor?[] indices) -> Tensor
   impl_ns: acl_op
 - func: index_add(Tensor self, int dim, Tensor index, Tensor source, *, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source, *, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: index_add.out(Tensor self, int dim, Tensor index, Tensor source, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor
   impl_ns: acl_op
 - func: index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor
   impl_ns: acl_op
 - func: index_fill_.int_Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)
   impl_ns: acl_op
 - func: index_fill_.int_Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)
   impl_ns: acl_op
 - func: index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor
   impl_ns: acl_op
 - func: index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)
   impl_ns: acl_op
 - func: index_select(Tensor self, int dim, Tensor index) -> Tensor
   impl_ns: acl_op, op_api
 - func: index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor
   impl_ns: acl_op, op_api
 - func: index_select.dimname_out(Tensor self, Dimname dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: inverse(Tensor self) -> Tensor
   impl_ns: acl_op, op_api
 - func: inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor
   impl_ns: acl_op, op_api
 - func: isfinite(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)
   impl_ns: acl_op
 - func: kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
   impl_ns: acl_op
 - func: kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
   impl_ns: acl_op
 - func: kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
   impl_ns: acl_op
 - func: le.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: le.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor
   impl_ns: acl_op
 - func: leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)
   impl_ns: acl_op
 - func: leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result) -> Tensor
   impl_ns: acl_op
 - func: lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor
   impl_ns: acl_op
 - func: lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor
   impl_ns: acl_op
 - func: lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> Tensor(a!)
   impl_ns: acl_op
 - func: lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> Tensor(a!)
   impl_ns: acl_op
 - func: linalg_cross(Tensor self, Tensor other, *, int dim=-1) -> Tensor
   impl_ns: acl_op
 - func: linalg_cross.out(Tensor self, Tensor other, *, int dim=-1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: linalg_svdvals(Tensor A, *, str? driver=None) -> Tensor
   impl_ns: acl_op
 - func: linalg_svdvals.out(Tensor A, *, str? driver=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: linspace(Scalar start, Scalar end, int steps, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: linspace.out(Scalar start, Scalar end, int steps, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: linalg_norm(Tensor self, Scalar? ord=None, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: linalg_norm.ord_str(Tensor self, str ord, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: linalg_norm.out(Tensor self, Scalar? ord=None, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: linalg_norm.ord_str_out(Tensor self, str ord, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: log(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: log10(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: log10_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: log1p(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: log1p_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: log2(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: log2_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: log_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: log_sigmoid(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor
   impl_ns: acl_op
 - func: log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)
   impl_ns: acl_op
 - func: log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))
   impl_ns: acl_op
 - func: log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: logaddexp(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: logaddexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: logaddexp2(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: logaddexp2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: logical_and(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: logical_and.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: logical_and_(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: logical_not(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: logical_not_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: logical_or(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: logical_or.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: logical_or_(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: logspace(Scalar start, Scalar end, int steps, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: logspace.out(Scalar start, Scalar end, int steps, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: logsumexp.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: lt.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: lt.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)
   impl_ns: acl_op
 - func: masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)
   impl_ns: acl_op
 - func: masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)
   impl_ns: acl_op
 - func: masked_select(Tensor self, Tensor mask) -> Tensor
   impl_ns: acl_op
 - func: masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: matmul(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: matmul_backward(Tensor grad, Tensor self, Tensor other, bool[2] mask) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: max(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
   impl_ns: acl_op
 - func: max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
   impl_ns: acl_op
 - func: max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
   impl_ns: acl_op
 - func: max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
   impl_ns: acl_op
 - func: max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
   impl_ns: acl_op
 - func: max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor
   impl_ns: acl_op
 - func: max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
   impl_ns: acl_op
 - func: max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor
   impl_ns: acl_op
 - func: max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: max_unpool2d(Tensor self, Tensor indices, SymInt[2] output_size) -> Tensor
   impl_ns: acl_op
 - func: max_unpool2d.out(Tensor self, Tensor indices, SymInt[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: max_unpool3d(Tensor self, Tensor indices, SymInt[3] output_size, int[3] stride, int[3] padding) -> Tensor
   impl_ns: acl_op
 - func: max_unpool3d.out(Tensor self, Tensor indices, SymInt[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: maximum(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: maximum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: mean(Tensor self, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: mean.dim(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: mean.names_dim(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: mean.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: mean.out(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: median(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
   impl_ns: acl_op
 - func: median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
   impl_ns: acl_op
 - func: median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
   impl_ns: acl_op
 - func: median.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
   impl_ns: acl_op
 - func: min(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
   impl_ns: acl_op
 - func: min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
   impl_ns: acl_op
 - func: min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
   impl_ns: acl_op
 - func: min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
   impl_ns: acl_op
 - func: min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: minimum(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: minimum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: mish(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: mish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: mish_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: mish_backward(Tensor grad_output, Tensor self) -> Tensor
   impl_ns: acl_op
 - func: mm(Tensor self, Tensor mat2) -> Tensor
   impl_ns: acl_op
 - func: mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
   impl_ns: acl_op
 - func: mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
   impl_ns: acl_op
 - func: mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: mul.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: mul.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
   impl_ns: acl_op
 - func: multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)
   impl_ns: acl_op
 - func: multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))
   impl_ns: acl_op
 - func: multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor
   impl_ns: acl_op
 - func: multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: mv(Tensor self, Tensor vec) -> Tensor
   impl_ns: acl_op
 - func: mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: nan_to_num(Tensor self, float? nan=None, float? posinf=None, float? neginf=None) -> Tensor
   impl_ns: acl_op
 - func: nan_to_num_(Tensor(a!) self, float? nan=None, float? posinf=None, float? neginf=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: nan_to_num.out(Tensor self, float? nan=None, float? posinf=None, float? neginf=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: linalg_vector_norm(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: linalg_vector_norm.out(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: native_batch_norm.out(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))
   impl_ns: acl_op
 - func: native_dropout(Tensor input, float p, bool? train) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: native_dropout_backward(Tensor grad_output, Tensor mask, float scale) -> Tensor
   impl_ns: acl_op
 - func: native_layer_norm(Tensor input, SymInt[] normalized_shape, Tensor? weight, Tensor? bias, float eps) -> (Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: native_layer_norm_backward(Tensor grad_out, Tensor input, SymInt[] normalized_shape, Tensor mean, Tensor rstd, Tensor? weight, Tensor? bias, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: ne.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: ne.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: neg(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: neg_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, SymInt ignore_index=-100) -> Tensor
   impl_ns: acl_op
 - func: nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, SymInt ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, SymInt ignore_index=-100) -> Tensor
   impl_ns: acl_op
 - func: nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, SymInt ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight) -> Tensor
   impl_ns: acl_op
 - func: nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index) -> (Tensor output, Tensor total_weight)
   impl_ns: acl_op
 - func: nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
   impl_ns: acl_op
 - func: nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight) -> Tensor
   impl_ns: acl_op
 - func: nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index) -> (Tensor output, Tensor total_weight)
   impl_ns: acl_op
 - func: nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
   impl_ns: acl_op
 - func: nonzero(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: norm.Scalar(Tensor self, Scalar p=2) -> Tensor
   impl_ns: acl_op
 - func: norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor
   impl_ns: acl_op
 - func: norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor
   impl_ns: acl_op
 - func: norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor
   impl_ns: acl_op
 - func: normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor
   impl_ns: acl_op
 - func: normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor
   impl_ns: acl_op
 - func: normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: normal.float_float(float mean, float std, SymInt[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: normal.float_float_out(float mean, float std, SymInt[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: one_hot(Tensor self, int num_classes=-1) -> Tensor
   impl_ns: acl_op
 - func: ones(SymInt[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: ones.out(SymInt[] size, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: ones_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
   impl_ns: acl_op
 - func: pdist(Tensor self, float p=2) -> Tensor
   impl_ns: acl_op
 - func: pow.Scalar(Scalar self, Tensor exponent) -> Tensor
   impl_ns: acl_op
 - func: pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor
   impl_ns: acl_op
 - func: pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor
   impl_ns: acl_op
 - func: pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)
   impl_ns: acl_op
 - func: pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)
   impl_ns: acl_op
 - func: _prelu_kernel(Tensor self, Tensor weight) -> Tensor
   impl_ns: acl_op
 - func: _prelu_kernel_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: prod(Tensor self, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> Tensor(a!)
   impl_ns: acl_op
 - func: qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)
   impl_ns: acl_op
 - func: qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)
   impl_ns: acl_op
 - func: quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) -> Tensor
   impl_ns: acl_op
 - func: quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor
   impl_ns: acl_op
 - func: random_(Tensor(a!) self, *, Generator? generator=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: random_.from(Tensor(a!) self, int from, int? to, *, Generator? generator=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: randperm(SymInt n, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: randperm.generator(SymInt n, *, Generator? generator, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: randperm.generator_out(SymInt n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: randperm.out(SymInt n, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: reciprocal(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: reciprocal_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: reflection_pad1d(Tensor self, SymInt[2] padding) -> Tensor
   impl_ns: acl_op
 - func: reflection_pad1d.out(Tensor self, SymInt[2] padding, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: reflection_pad1d_backward(Tensor grad_output, Tensor self, SymInt[2] padding) -> Tensor
   impl_ns: acl_op
 - func: reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: reflection_pad2d(Tensor self, SymInt[4] padding) -> Tensor
   impl_ns: acl_op
 - func: reflection_pad2d.out(Tensor self, SymInt[4] padding, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: reflection_pad2d_backward(Tensor grad_output, Tensor self, SymInt[4] padding) -> Tensor
   impl_ns: acl_op
 - func: reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: relu(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: relu_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: remainder.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: remainder.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: remainder_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: remainder.Scalar_Tensor(Scalar self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor
   impl_ns: acl_op
 - func: renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> Tensor(a!)
   impl_ns: acl_op
 - func: repeat(Tensor self, SymInt[] repeats) -> Tensor
   impl_ns: acl_op
 - func: repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None, *, int? output_size=None) -> Tensor
   impl_ns: acl_op
 - func: repeat_interleave.self_int(Tensor self, SymInt repeats, int? dim=None, *, int? output_size=None) -> Tensor
   impl_ns: acl_op
 - func: replication_pad1d(Tensor self, SymInt[2] padding) -> Tensor
   impl_ns: acl_op
 - func: replication_pad1d.out(Tensor self, SymInt[2] padding, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: replication_pad1d_backward(Tensor grad_output, Tensor self, SymInt[2] padding) -> Tensor
   impl_ns: acl_op
 - func: replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: replication_pad2d(Tensor self, SymInt[4] padding) -> Tensor
   impl_ns: acl_op
 - func: replication_pad2d.out(Tensor self, SymInt[4] padding, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: replication_pad2d_backward(Tensor grad_output, Tensor self, SymInt[4] padding) -> Tensor
   impl_ns: acl_op
 - func: replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: roll(Tensor self, SymInt[1] shifts, int[1] dims=[]) -> Tensor
   impl_ns: acl_op
 - func: round(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: round_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor
   impl_ns: acl_op
 - func: rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, bool self_is_result) -> Tensor
   impl_ns: acl_op
 - func: rsqrt(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: rsqrt_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: scatter.src_out(Tensor self, int dim, Tensor index, Tensor src, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: scatter.value_out(Tensor self, int dim, Tensor index, Scalar value, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor
   impl_ns: acl_op
 - func: scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor
   impl_ns: acl_op
 - func: scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)
   impl_ns: acl_op
 - func: searchsorted.Scalar(Tensor sorted_sequence, Scalar self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None) -> Tensor
   impl_ns: acl_op
 - func: searchsorted.Tensor(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None) -> Tensor
   impl_ns: acl_op
 - func: searchsorted.Tensor_out(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: sgn(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: sgn.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: sigmoid(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: sigmoid_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor
   impl_ns: acl_op
 - func: sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: sign(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: sign_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: sin(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: sin_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: sinh(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: sinh_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)
   impl_ns: acl_op
 - func: slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, SymInt[3] padding=0) -> Tensor
   impl_ns: acl_op
 - func: slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, SymInt[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: slow_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, SymInt[3] padding) -> Tensor
   impl_ns: acl_op
 - func: slow_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, SymInt[3] padding, *, Tensor(a!) output) -> Tensor(a!)
   impl_ns: acl_op
 - func: slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, SymInt[2] padding=0, int[2] dilation=1) -> Tensor
   impl_ns: acl_op
 - func: slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, SymInt[2] padding=0, SymInt[2] output_padding=0, int[2] dilation=1) -> Tensor
   impl_ns: acl_op
 - func: slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, SymInt[2] padding=0, SymInt[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean, float beta=1.0) -> Tensor
   impl_ns: acl_op
 - func: smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, float beta=1.0, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta) -> Tensor
   impl_ns: acl_op
 - func: smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
   impl_ns: acl_op
 - func: soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
   impl_ns: acl_op
 - func: soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor
   impl_ns: acl_op
 - func: softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: softshrink(Tensor self, Scalar lambd=0.5) -> Tensor
   impl_ns: acl_op
 - func: softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor
   impl_ns: acl_op
 - func: softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)
   impl_ns: acl_op
 - func: sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)
   impl_ns: acl_op
 - func: sort.dimname_values(Tensor self, Dimname dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
   impl_ns: acl_op
 - func: sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
   impl_ns: acl_op
 - func: sqrt(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: sqrt_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: stack(Tensor[] tensors, int dim=0) -> Tensor
   impl_ns: acl_op
 - func: stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: std(Tensor self, bool unbiased=True) -> Tensor
   impl_ns: acl_op
 - func: std.dim(Tensor self, int[1]? dim, bool unbiased=True, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: std.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: std.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: std.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: std.out(Tensor self, int[1]? dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: std.correction_out(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: std.correction_names(Tensor self, Dimname[1] dim, *, Scalar? correction=None, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: std.correction_names_out(Tensor self, Dimname[1] dim, *, Scalar? correction=None, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: std_mean.dim(Tensor self, int[1]? dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: std_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: std_mean.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: std_mean.correction_names(Tensor self, Dimname[1] dim, *, Scalar? correction=None, bool keepdim=False) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
   impl_ns: acl_op
 - func: sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: sum(Tensor self, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: sum.IntList_out(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: sum.dim_IntList(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: take(Tensor self, Tensor index) -> Tensor
   impl_ns: acl_op, op_api
 - func: take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: tan(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: tan_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: tanh(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: tanh_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: tanh_backward(Tensor grad_output, Tensor output) -> Tensor
   impl_ns: acl_op
 - func: tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor
   impl_ns: acl_op
 - func: threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)
   impl_ns: acl_op
 - func: threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor
   impl_ns: acl_op
 - func: topk(Tensor self, SymInt k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)
   impl_ns: acl_op
 - func: topk.values(Tensor self, SymInt k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
   impl_ns: acl_op
 - func: triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)
   impl_ns: acl_op
 - func: tril(Tensor self, int diagonal=0) -> Tensor
   impl_ns: acl_op
 - func: tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)
   impl_ns: acl_op
 - func: triu(Tensor self, int diagonal=0) -> Tensor
   impl_ns: acl_op, op_api
 - func: triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)
   impl_ns: acl_op, op_api
 - func: true_divide.Scalar(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: true_divide.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: true_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: true_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: true_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: trunc(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: trunc_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: uniform_(Tensor(a!) self, float from=0, float to=1, *, Generator? generator=None) -> Tensor(a!)
   impl_ns: acl_op
 - func: unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)
   impl_ns: acl_op
 - func: upsample_bicubic2d(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_bicubic2d.out(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_bicubic2d_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_bicubic2d_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_bilinear2d(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_bilinear2d.out(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_bilinear2d_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_bilinear2d_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_linear1d(Tensor self, SymInt[1] output_size, bool align_corners, float? scales=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_linear1d.out(Tensor self, SymInt[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_linear1d_backward(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, bool align_corners, float? scales=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_nearest1d(Tensor self, SymInt[1] output_size, float? scales=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_nearest1d.out(Tensor self, SymInt[1] output_size, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_nearest1d_backward(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, float? scales=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_nearest1d_backward.grad_input(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_nearest2d(Tensor self, SymInt[2] output_size, float? scales_h=None, float? scales_w=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_nearest2d.out(Tensor self, SymInt[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_nearest2d_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, float? scales_h=None, float? scales_w=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_nearest2d_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_nearest3d(Tensor self, SymInt[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_nearest3d.out(Tensor self, SymInt[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_nearest3d_backward(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_nearest3d_backward.grad_input(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_trilinear3d(Tensor self, SymInt[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_trilinear3d.out(Tensor self, SymInt[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: upsample_trilinear3d_backward(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
   impl_ns: acl_op
 - func: upsample_trilinear3d_backward.grad_input(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: var(Tensor self, bool unbiased=True) -> Tensor
   impl_ns: acl_op
 - func: var.dim(Tensor self, int[1]? dim, bool unbiased=True, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: var.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: var.out(Tensor self, int[1]? dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: var.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: var.correction_names(Tensor self, Dimname[1] dim, *, Scalar? correction=None, bool keepdim=False) -> Tensor
   impl_ns: acl_op
 - func: var.correction_out(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: var.correction_names_out(Tensor self, Dimname[1] dim, *, Scalar? correction=None, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: var_mean.dim(Tensor self, int[1]? dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: var_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: var_mean.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: var_mean.correction_names(Tensor self, Dimname[1] dim, *, Scalar? correction=None, bool keepdim=False) -> (Tensor, Tensor)
   impl_ns: acl_op
 - func: where(Tensor condition) -> Tensor[]
   impl_ns: acl_op
 - func: where.self(Tensor condition, Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: where.self_out(Tensor condition, Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: xlogy.OutScalar_Other(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: xlogy.OutScalar_Self(Scalar self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: xlogy.OutTensor(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: xlogy.Scalar_Other(Tensor self, Scalar other) -> Tensor
   impl_ns: acl_op
 - func: xlogy.Scalar_Self(Scalar self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: xlogy.Tensor(Tensor self, Tensor other) -> Tensor
   impl_ns: acl_op
 - func: xlogy_.Scalar_Other(Tensor(a!) self, Scalar other) -> Tensor(a!)
   impl_ns: acl_op
 - func: xlogy_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
   impl_ns: acl_op
 - func: zero_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: zeros(SymInt[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op
 - func: zeros.out(SymInt[] size, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: zeros_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
   impl_ns: acl_op
 - func: celu(Tensor self, Scalar alpha=1.0) -> Tensor
   impl_ns: acl_op
 - func: celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)
   impl_ns: acl_op
 - func: elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor
   impl_ns: acl_op
 - func: elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)
   impl_ns: acl_op
 - func: silu(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: silu_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: silu.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: silu_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)
   impl_ns: acl_op
 - func: silu_backward(Tensor grad_output, Tensor self) -> Tensor
   impl_ns: acl_op
 - func: binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor
   impl_ns: acl_op
 - func: selu(Tensor self) -> Tensor
   impl_ns: acl_op
 - func: selu_(Tensor(a!) self) -> Tensor(a!)
   impl_ns: acl_op
 - func: linalg_matrix_norm(Tensor self, Scalar ord, int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: linalg_matrix_norm.out(Tensor self, Scalar ord, int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: linalg_matrix_norm.str_ord(Tensor self, str ord='fro', int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
   impl_ns: acl_op
 - func: linalg_matrix_norm.str_ord_out(Tensor self, str ord='fro', int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
   impl_ns: acl_op
 - func: l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
   impl_ns: acl_op, op_api
 - func: kl_div(Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor
   impl_ns: acl_op

symint:
 - func: embedding(Tensor weight, Tensor indices, SymInt padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor
   impl_ns: acl_op, op_api
 - func: embedding_backward(Tensor grad, Tensor indices, SymInt num_weights, SymInt padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor
   impl_ns: acl_op, op_api
 - func: _embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, SymInt num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor
   impl_ns: acl_op
 - func: repeat_interleave.self_int(Tensor self, SymInt repeats, int? dim=None, *, int? output_size=None) -> Tensor
   impl_ns: acl_op
 - func: zeros(SymInt[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
   impl_ns: acl_op

custom:
  - func: npu_view_copy(Tensor(a!) self, Tensor other, bool non_blocking) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_transpose(Tensor self, int[] perm, bool require_contiguous=True) -> Tensor
    impl_ns: acl_op
  - func: npu_transpose.out(Tensor self, int[] perm, bool require_contiguous=True, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_broadcast(Tensor self, int[] size) -> Tensor
    impl_ns: acl_op
  - func: npu_broadcast.out(Tensor self, int[] size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_dtype_cast_(Tensor(a!) self, Tensor src) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_alloc_float_status(Tensor self) -> Tensor
    impl_ns: acl_op
  - func: npu_get_float_status(Tensor self) -> Tensor
    impl_ns: acl_op
  - func: npu_clear_float_status(Tensor self) -> Tensor
    impl_ns: acl_op
  - func: one_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_fast_gelu(Tensor self) -> Tensor
    impl_ns: acl_op
  - func: npu_fast_gelu_backward(Tensor grad, Tensor self) -> Tensor
    impl_ns: acl_op
  - func: _amp_foreach_non_finite_check(Tensor[] scaled_grads) -> bool
    impl_ns: acl_op
  - func: npu_sign_bits_pack(Tensor self, int size) -> Tensor
    impl_ns: acl_op
  - func: npu_bert_apply_adam(Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, Scalar max_grad_norm, Scalar global_grad_norm, Scalar weight_decay, Scalar? step_size=None, int adam_mode=0) -> (Tensor var, Tensor m, Tensor v)
    impl_ns: acl_op
  - func: npu_bert_apply_adam.out(Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, Scalar max_grad_norm, Scalar global_grad_norm, Scalar weight_decay, Scalar? step_size=None, int adam_mode=0, *, Tensor(a!) var, Tensor(b!) m, Tensor(c!) v) -> (Tensor(a!), Tensor(b!), Tensor(c!))
    impl_ns: acl_op
  - func: npu_conv_transpose2d_backward(Tensor input, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_conv_transpose3d_backward(Tensor input, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[] stride, int[] padding, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_conv_transpose2d(Tensor input, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups) -> Tensor
    impl_ns: acl_op
  - func: npu_conv2d(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor
    impl_ns: acl_op
  - func: npu_conv2d.out(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_conv2d_backward(Tensor input, Tensor grad_output, Tensor weight, int[] stride, int[] padding, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_conv3d(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor
    impl_ns: acl_op
  - func: npu_conv3d.out(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_conv3d_backward(Tensor input, Tensor grad, Tensor weight, int[] stride, int[] padding, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_stride_add(Tensor self, Tensor other, Scalar offset1, Scalar offset2, Scalar c1_len) -> Tensor
    impl_ns: acl_op
  - func: npu_slice(Tensor self, int[] offsets, int[] size) -> Tensor
    impl_ns: acl_op
  - func: npu_slice.out(Tensor self, int[] offsets, int[] size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_indexing(Tensor self, int[] begin, int[] end, int[] strides, int begin_mask=0, int end_mask=0, int ellipsis_mask=0, int new_axis_mask=0, int shrink_axis_mask=0) -> Tensor
    impl_ns: acl_op
  - func: npu_indexing.out(Tensor self, int[] begin, int[] end, int[] strides, int begin_mask=0, int end_mask=0, int ellipsis_mask=0, int new_axis_mask=0, int shrink_axis_mask=0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_softmax_cross_entropy_with_logits_backward(Tensor grad, Tensor self, Tensor labels) -> Tensor
    impl_ns: acl_op
  - func: npu_stride_copy(Tensor self, int[] shape, int[] stride, Scalar storage_offset) -> Tensor
    impl_ns: acl_op
  - func: npu_stride_copy.out(Tensor self, int[] shape, int[] stride, Scalar storage_offset, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_roi_align(Tensor self, Tensor rois, float spatial_scale, int pooled_height, int pooled_width, int sample_num, int roi_end_mode) -> Tensor
    impl_ns: acl_op
  - func: npu_roi_alignbk(Tensor self, Tensor rois, int[] xdiff_shape, int pooled_width, int pooled_height, float spatial_scale, int sample_num, int? roi_end_mode=None) -> Tensor
    impl_ns: acl_op
  - func: npu_sort_v2.out(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_sort_v2(Tensor self, int dim=-1, bool descending=False) -> Tensor
    impl_ns: acl_op
  - func: npu_one_hot(Tensor self, int num_classes=-1, int depth=1, Scalar on_value=1, Scalar off_value=0) -> Tensor
    impl_ns: acl_op
  - func: npu_linear_backward(Tensor grad, Tensor input, Tensor weight) -> (Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_anchor_response_flags(Tensor self, int[2] featmap_size, int[2] stride, int num_base_anchors) -> Tensor
    impl_ns: acl_op
  - func: npu_dropout_backward(Tensor grad_output, Tensor mask, float p) -> Tensor
    impl_ns: acl_op
  - func: npu_nms_rotated(Tensor self, Tensor scores, float iou_threshold, float scores_threshold=0, int max_output_size=-1, int mode=0) -> (Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_masked_fill_range(Tensor self, Tensor start, Tensor end, Tensor value, int axis=-1) -> Tensor
    impl_ns: acl_op
  - func: npu_sub_sample(Tensor self, int per_images, float positive_fraction) -> Tensor
    impl_ns: acl_op
  - func: npu_yolo_boxes_encode(Tensor self, Tensor gt_bboxes, Tensor stride, bool performance_mode=False) -> Tensor
    impl_ns: acl_op
  - func: npu_scatter(Tensor self, Tensor indices, Tensor updates, int dim) -> Tensor
    impl_ns: acl_op
  - func: npu_layer_norm_eval(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05) -> Tensor
    impl_ns: acl_op
  - func: npu_rotated_box_encode(Tensor self, Tensor gt_bboxes, Tensor weight) -> Tensor
    impl_ns: acl_op
  - func: npu_rotated_box_decode(Tensor self, Tensor deltas, Tensor weight) -> Tensor
    impl_ns: acl_op
  - func: npu_rotated_overlaps(Tensor self, Tensor query_boxes, bool trans=False) -> Tensor
    impl_ns: acl_op
  - func: npu_silu_backward(Tensor grad_output, Tensor x0, Tensor x1) -> Tensor
    impl_ns: acl_op
  - func: npu_rotated_iou(Tensor self, Tensor query_boxes, bool trans=False, int mode=0, bool is_cross=True, float v_threshold=0.0, float e_threshold=0.0) -> Tensor
    impl_ns: acl_op
  - func: npu_nms_with_mask(Tensor input, Scalar iou_threshold) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_gru_backward(Tensor? grady, Tensor? gradh, Tensor input, Tensor weight_input, Tensor weight_hidden, Tensor bias_input, Tensor bias_hidden, Tensor seq_length, Tensor hx, Tensor y_output, Tensor h_output, Tensor output_updata, Tensor output_reset, Tensor output_new, Tensor hidden_new) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_mish_backward(Tensor grad, Tensor input) -> Tensor
    impl_ns: acl_op
  - func: npu_reshape(Tensor self, int[] shape, bool can_refresh=False) -> Tensor
    impl_ns: acl_op
  - func: npu_reshape.out(Tensor self, int[] shape, bool can_refresh=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_batch_nms(Tensor self, Tensor scores, float score_threshold, float iou_threshold, int max_size_per_class, int max_total_size, bool change_coordinate_frame=False, bool transpose_box=False) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_bounding_box_encode(Tensor anchor_box, Tensor ground_truth_box, float means0, float means1, float means2, float means3, float stds0, float stds1, float stds2, float stds3) -> Tensor
    impl_ns: acl_op
  - func: npu_bounding_box_decode(Tensor rois, Tensor deltas, float means0, float means1, float means2, float means3, float stds0, float stds1, float stds2, float stds3, int[1] max_shape, float wh_ratio_clip) -> Tensor
    impl_ns: acl_op
  - func: npu_apply_adam(Scalar beta1_power, Scalar beta2_power, Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, bool? use_locking, bool? use_nesterov) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_apply_adam.out(Scalar beta1_power, Scalar beta2_power, Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, bool? use_locking, bool? use_nesterov, *, Tensor(a!) var, Tensor(b!) m, Tensor(c!) v) -> (Tensor(a!), Tensor(b!), Tensor(c!))
    impl_ns: acl_op
  - func: npu_apply_adam_w(Scalar beta1_power, Scalar beta2_power, Scalar lr, Scalar weight_decay, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, Tensor? max_grad_norm, bool? amsgrad, bool? maximize) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_apply_adam_w.out(Scalar beta1_power, Scalar beta2_power, Scalar lr, Scalar weight_decay, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, Tensor? max_grad_norm, bool? amsgrad, bool? maximize, *, Tensor(a!) var, Tensor(b!) m, Tensor(c!) v) -> (Tensor(a!), Tensor(b!), Tensor(c!))
    impl_ns: acl_op
  - func: npu_deformable_conv2dbk(Tensor input, Tensor grad_output, Tensor offset_out, Tensor weight, Tensor offset, int[2] kernel_size, int[] stride, int[] padding, int[] dilation=[1,1,1,1], int groups=1, int deformable_groups=1, bool modulated=True) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_giou_backward(Tensor grad, Tensor bboxes, Tensor gtboxes, bool trans=False, bool is_cross=False, int mode=0) -> (Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_diou_backward(Tensor grad, Tensor bboxes, Tensor gtboxes, bool trans=False, bool is_cross=False, int mode=0) -> (Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_iou(Tensor bboxes, Tensor gtboxes, int mode=0) -> Tensor
    impl_ns: acl_op
  - func: npu_nms_v4(Tensor self, Tensor scores, Scalar max_output_size, Tensor iou_threshold, Tensor scores_threshold, bool pad_to_max_output_size=False) -> (Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_pad(Tensor input, int[] paddings) -> Tensor
    impl_ns: acl_op
  - func: npu_random_choice_with_mask(Tensor x, int count=256, int seed=0, int seed2=0) -> (Tensor, Tensor)
    impl_ns: acl_op
    tags: nondeterministic_seeded
  - func: npu_normalize_batch(Tensor self, Tensor seq_len, int normalize_type=0) -> Tensor
    impl_ns: acl_op
  - func: npu_ptiou(Tensor bboxes, Tensor gtboxes, int mode=0) -> Tensor
    impl_ns: acl_op
  - func: npu_lstm_backward(Tensor? grady, Tensor? gradh, Tensor? gradc, Tensor input, Tensor weight, Tensor bias, Tensor hx, Tensor cx, Tensor y_output, Tensor h_output, Tensor c_output, Tensor i, Tensor j, Tensor f, Tensor o, Tensor tanhc) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: _dropout_with_byte_mask_backward(Tensor grad_output, Tensor mask, float p) -> Tensor
    impl_ns: acl_op
  - func: dropout_with_byte_mask(Tensor self, float p, bool train) -> Tensor
    impl_ns: acl_op
    tags: nondeterministic_seeded
  - func: npu_dropout_with_add_softmax_backward(Tensor grad, Tensor mask, Tensor softmax_out, Scalar alpha, float prob, int dim) -> (Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_multi_head_attention_backward(Tensor query, Tensor key, Tensor value, Tensor query_weight, Tensor key_weight, Tensor value_weight, Tensor out_proj_weight, Tensor? query_bias, Tensor? key_bias, Tensor? value_bias, Tensor? out_proj_bias, Tensor query_res, Tensor key_res, Tensor value_res, Tensor attn_scores, Tensor attn_res, Tensor context, Tensor y_grad, Tensor dropout_mask, int attn_head_num, int attn_dim_per_head, int src_len, int tgt_len, float dropout_prob, bool softmax_use_float) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_dropout_gen_mask(int[] size, float p, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op
    tags: nondeterministic_seeded
    dispatch:
     CompositeExplicitAutograd: npu_dropout_gen_mask
  - func: npu_ciou_backward(Tensor grad, Tensor bboxes, Tensor gtboxes, Tensor? atan_sub, bool trans=False, bool is_cross=True, int mode=0) -> (Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_sign_bits_unpack(Tensor input, int size, ScalarType dtype) -> Tensor
    impl_ns: acl_op
  - func: decode_jpeg(Tensor self, int[] image_shape, int channels=3, bool try_recover_truncated=False) -> Tensor
    impl_ns: acl_op
  - func: crop_and_resize(Tensor self, float[]? boxes, int[] box_index, int[] crop_size, float extrapolation_value=0, str method="bilinear") -> Tensor
    impl_ns: acl_op
  - func: reverse(Tensor self, int[] axis) -> Tensor
    impl_ns: acl_op
  - func: image_normalize(Tensor self, float[]? mean, float[]? variance, int dtype=0) -> Tensor
    impl_ns: acl_op
  - func: image_normalize_(Tensor(a!) self, float[]? mean, float[]? variance, int dtype=0) -> Tensor(a!)
    impl_ns: acl_op
  - func: img_to_tensor(Tensor self) -> Tensor
    impl_ns: acl_op
  - func: _conv_depthwise2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)
    impl_ns: acl_op
  - func: slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
    impl_ns: acl_op
  - func: slow_conv_transpose2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
    impl_ns: acl_op
  - func: npu_lstm_cell_backward(Tensor? grady, Tensor? gradh, Tensor? gradc, Tensor input, Tensor w_ih, Tensor w_hh, Tensor h, Tensor c, Tensor y_output, Tensor h_output, Tensor c_output, Tensor i, Tensor j, Tensor f, Tensor o, Tensor tanhc) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: batch_norm_reduce(Tensor input, float eps) -> (Tensor, Tensor)
    impl_ns: acl_op
  - func: batch_norm_gather_stats_update(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, Tensor counts) -> (Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_fused_attention_score_backward(Tensor grad_output, Tensor softmax_output, Tensor query_layer, Tensor key_layer, Tensor value_layer, Tensor mask, Scalar scale, float keep_prob, bool query_transpose=False, bool key_transpose=False, bool value_transpose=False, bool dx_transpose=False) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_fused_attention_score_fwd(Tensor query_layer, Tensor key_layer, Tensor value_layer, Tensor attention_mask, Scalar scale, float keep_prob, bool query_transpose=False, bool key_transpose=False, bool bmm_score_transpose_a=False, bool bmm_score_transpose_b=False, bool value_transpose=False, bool dx_transpose=False) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_fused_attention_score_grad(Tensor grad_output, Tensor softmax_output, Tensor query_layer, Tensor key_layer, Tensor value_layer, Tensor mask, Scalar scale, float keep_prob, bool query_transpose=False, bool key_transpose=False, bool value_transpose=False, bool dx_transpose=False) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_fused_attention_qkv_grad(Tensor grad_output_query, Tensor grad_output_key, Tensor grad_output_value, Tensor query_kernel, Tensor key_kernel, Tensor value_kernel, Tensor hidden_states, Tensor grad_output_ln) -> Tensor[]
    impl_ns: acl_op
  - func: npu_fused_attention_layernorm_qkv_fwd(Tensor x, Tensor kernel_query, Tensor kernel_key, Tensor kernel_value, Tensor gamma, Tensor beta, Tensor? bias_query=None, Tensor? bias_key=None, Tensor? bias_value=None, int seq_len=128, int num_heads=12, float eps=1e-05) -> Tensor[]
    impl_ns: acl_op
  - func: npu_layernorm_grad(Tensor grad_out, Tensor input, int[] normalized_shape, Tensor mean, Tensor rstd, Tensor? weight, Tensor? bias) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_ifmr(Tensor data, Tensor data_min, Tensor data_max, Tensor cumsum, float min_percentile, float max_percentile, float search_start, float search_end, float search_step, bool with_offset) -> (Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_grid_assign_positive(Tensor self, Tensor overlaps, Tensor box_responsible_flags, Tensor max_overlaps, Tensor argmax_overlaps, Tensor gt_max_overlaps, Tensor gt_argmax_overlaps, int num_gts, float pos_iou_thr, float min_pos_iou, bool gt_max_assign_all) -> Tensor
    impl_ns: acl_op
  - func: npu_rotary_mul_backward(Tensor grad, Tensor self, Tensor r1, Tensor r2) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor
    impl_ns: acl_op
  - func: npu_convolution_transpose(Tensor input, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups) -> Tensor
    impl_ns: acl_op
  - func: fast_gelu(Tensor self) -> Tensor
    impl_ns: acl_op
  - func: npu_confusion_transpose(Tensor self, int[] perm, int[] shape, bool transpose_first) -> Tensor
    impl_ns: acl_op
  - func: npu_ps_roi_pooling(Tensor self, Tensor rois, float spatial_scale, int group_size, int output_dim) -> Tensor
    impl_ns: acl_op
  - func: npu_linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor
    impl_ns: acl_op
  - func: _npu_dropout(Tensor self, float p) -> (Tensor, Tensor)
    impl_ns: acl_op
    tags: nondeterministic_seeded
  - func: npu_softmax_cross_entropy_with_logits(Tensor self, Tensor labels) -> Tensor
    impl_ns: acl_op
  - func: npu_max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op
  - func: npu_max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op
  - func: npu_bmmV2(Tensor self, Tensor mat2, int[] output_sizes) -> Tensor
    impl_ns: acl_op
  - func: npu_dtype_cast(Tensor self, ScalarType dtype) -> Tensor
    impl_ns: acl_op
  - func: npu_silu(Tensor self) -> Tensor
    impl_ns: acl_op
  - func: npu_silu_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op
  - func: npu_gru(Tensor input, Tensor hx, Tensor weight_input, Tensor weight_hidden, Tensor bias_input, Tensor bias_hidden, Tensor seq_length, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op
    tags: nondeterministic_seeded
  - func: npu_mish(Tensor self) -> Tensor
    impl_ns: acl_op
  - func: npu_min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op
  - func: npu_min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op
  - func: npu_deformable_conv2d(Tensor input, Tensor weight, Tensor offset, Tensor? bias, int[2] kernel_size, int[] stride, int[] padding, int[] dilation=[1,1,1,1], int groups=1, int deformable_groups=1, bool modulated=True) -> (Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_giou(Tensor self, Tensor gtboxes, bool trans=False, bool is_cross=False, int mode=0) -> Tensor
    impl_ns: acl_op
  - func: npu_diou(Tensor self, Tensor gtboxes, bool trans=False, bool is_cross=False, int mode=0) -> Tensor
    impl_ns: acl_op
  - func: npu_lstm(Tensor input, Tensor weight, Tensor bias, Tensor seq_mask, Tensor h, Tensor c, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, bool flag_seq, bool direction) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op
    tags: nondeterministic_seeded
  - func: npu_lstm_data(Tensor input, Tensor batch_sizes, Tensor weight, Tensor bias, Tensor seq_mask, Tensor h, Tensor c, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, bool flag_seq, bool direction) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op
    tags: nondeterministic_seeded
  - func: _dropout_with_byte_mask(Tensor self, float p) -> (Tensor, Tensor)
    impl_ns: acl_op
    tags: nondeterministic_seeded
  - func: npu_dropout_with_add_softmax(Tensor self, Tensor x1, Scalar alpha, float prob, int dim) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op
    tags: nondeterministic_seeded
  - func: npu_scaled_masked_softmax(Tensor x, Tensor mask, Scalar scale=1, bool fixed_triu_mask=False) -> Tensor
    impl_ns: acl_op
  - func: npu_multi_head_attention(Tensor query, Tensor key, Tensor value, Tensor query_weight, Tensor key_weight, Tensor value_weight, Tensor attn_mask, Tensor out_proj_weight, Tensor? query_bias, Tensor? key_bias, Tensor? value_bias, Tensor? out_proj_bias, Tensor? dropout_mask, int attn_head_num, int attn_dim_per_head, int src_len, int tgt_len, float dropout_prob, bool softmax_use_float) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op
    tags: nondeterministic_seeded
  - func: npu_dropout_do_mask(Tensor self, Tensor mask, float p) -> (Tensor, Tensor)
    impl_ns: acl_op
    tags: nondeterministic_seeded
  - func: npu_ciou(Tensor self, Tensor gtboxes, bool trans=False, bool is_cross=True, int mode=0, bool atan_sub_flag=False) -> Tensor
    impl_ns: acl_op
  - func: npu_lstm_cell(Tensor input, Tensor w_ih, Tensor w_hh, Tensor h, Tensor c, Tensor? bias=None) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op
  - func: npu_fused_attention_score(Tensor query_layer, Tensor key_layer, Tensor value_layer, Tensor attention_mask, Scalar scale, float keep_prob, bool query_transpose=False, bool key_transpose=False, bool bmm_score_transpose_a=False, bool bmm_score_transpose_b=False, bool value_transpose=False, bool dx_transpose=False) -> Tensor
    impl_ns: acl_op
  - func: npu_rotary_mul(Tensor self, Tensor r1, Tensor r2) -> Tensor
    impl_ns: acl_op
  - func: _npu_ciou(Tensor self, Tensor gtboxes, bool trans=False, bool is_cross=True, int mode=0, bool atan_sub_flag=False) -> (Tensor, Tensor)
    impl_ns: acl_op

