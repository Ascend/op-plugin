official:
  - func: __ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/__iLshift__KernelNpu.cpp
  - func: __ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/__iLshift__KernelNpu.cpp
  - func: __ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/__Ior__KernelNpu.cpp, opapi/__Ior__KernelNpuOpApi.cpp
  - func: __ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/__Ior__KernelNpu.cpp, opapi/__Ior__KernelNpuOpApi.cpp
  - func: __irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/__iRshift__KernelNpu.cpp
  - func: __irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/__iRshift__KernelNpu.cpp
  - func: __lshift__.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/__Lshift__KernelNpu.cpp
  - func: __lshift__.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/__Lshift__KernelNpu.cpp
  - func: __rshift__.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/__Rshift__KernelNpu.cpp
  - func: __rshift__.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/__Rshift__KernelNpu.cpp
  - func: __xor__.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/__Xor__KernelNpu.cpp
  - func: __xor__.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/__Xor__KernelNpu.cpp
  - func: _adaptive_avg_pool2d(Tensor self, SymInt[2] output_size) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool2dKernelNpu.cpp, opapi/AdaptiveAvgPool2dKernelNpuOpApi.cpp
  - func: _adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/AdaptiveAvgPool2dKernelNpu.cpp, opapi/AdaptiveAvgPool2dKernelNpuOpApi.cpp
  - func: _adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool2dBackwardKernelNpu.cpp, opapi/AdaptiveAvgPool2dBackwardKernelNpuOpApi.cpp
  - func: _adaptive_avg_pool3d(Tensor self, SymInt[3] output_size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp
  - func: _adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp
  - func: _adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool3dBackwardKernelNpu.cpp, opapi/AdaptiveAvgPool3dBackwardKernelNpuOpApi.cpp
  - func: _add_relu.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AddReluKernelNpu.cpp
  - func: _add_relu.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AddReluKernelNpu.cpp
  - func: _add_relu_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AddReluKernelNpu.cpp
  - func: _aminmax(Tensor self) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/_AminmaxKernelNpu.cpp, opapi/AminKernelNpuOpApi.cpp
  - func: _aminmax.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/_AminmaxKernelNpu.cpp, opapi/AminKernelNpuOpApi.cpp
  - func: _amp_foreach_non_finite_check_and_unscale_(Tensor(a!)[] self, Tensor(b!) found_inf, Tensor inv_scale) -> ()
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AmpForeachNonFiniteCheckAndUnscaleKernelNpu.cpp, opapi/AmpForeachNonFiniteCheckAndUnscaleKernelNpuOpApi.cpp
  - func: _amp_update_scale_(Tensor(a!) self, Tensor(b!) growth_tracker, Tensor found_inf, float growth_factor, float backoff_factor, int growth_interval) -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/AmpUpdateScaleKernelNpuOpApi.cpp
  - func: _batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, Tensor, int)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/NormalizationKernelNpu.cpp
  - func: _batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/NormalizationKernelNpu.cpp
  - func: _cat(Tensor[] tensors, int dim=0) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/CatKernelNpu.cpp, opapi/CatKernelNpuOpApi.cpp
  - func: _cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/CatKernelNpu.cpp, opapi/CatKernelNpuOpApi.cpp
  - func: _cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/CdistBackwardKernelNpu.cpp
  - func: _cdist_forward(Tensor x1, Tensor x2, float p, int? compute_mode) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/CdistKernelNpu.cpp
  - func: _conj(Tensor(a) self) -> Tensor(a)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConjKernelNpu.cpp
  - func: _conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, SymInt[2] padding, int[2] dilation) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvDepthWise2dKernelNpu.cpp, opapi/ConvDepthwise2dKernelNpuOpApi.cpp
  - func: _conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ConvDepthWise2dKernelNpu.cpp, opapi/ConvDepthwise2dKernelNpuOpApi.cpp
  - func: _conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, SymInt[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    use_const_ref_for_mutable_tensors: true
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvDepthWise2dKernelNpu.cpp, opapi/ConvDepthwise2dKernelNpuOpApi.cpp
  - func: _conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    use_const_ref_for_mutable_tensors: true
    version: v1.11, v1.11
    kernel: aclops/ConvDepthWise2dKernelNpu.cpp, opapi/ConvDepthwise2dKernelNpuOpApi.cpp
  - func: _convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, SymInt[] padding, int[] dilation, bool transposed, SymInt[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: _convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: _ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CtcLossKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: _ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CtcLossBackwardKernelNpu.cpp, opapi/CtcLossBackwardKernelNpuOpApi.cpp
  - func: _cummax_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CummaxKernelNpu.cpp, opapi/CummaxKernelNpuOpApi.cpp
  - func: _cummin_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CumminKernelNpu.cpp, opapi/CumminKernelNpuOpApi.cpp
  - func: _dim_arange(Tensor like, int dim) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ArangeKernelNpu.cpp
  - func: _embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EmbeddingBagKernelNpu.cpp, opapi/EmbeddingBagNpuOpApi.cpp
  - func: _embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, SymInt num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/EmbeddingBagBackwardKernelNpu.cpp
  - func: _embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/EmbeddingBagBackwardKernelNpu.cpp
  - func: _embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, SymInt num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/EmbeddingBagDenseBackwardKernelNpu.cpp
  - func: _embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/EmbeddingBagDenseBackwardKernelNpu.cpp
  - func: _embedding_bag_forward_only(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/EmbeddingBagKernelNpu.cpp
  - func: _embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode, int padding_idx=-1) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/EmbeddingBagPerSampleWeightsBackwardKernelNpu.cpp
  - func: _fake_quantize_per_tensor_affine_cachemask_tensor_qparams(Tensor self, Tensor scale, Tensor zero_point, Tensor fake_quant_enabled, int quant_min, int quant_max) -> (Tensor output, Tensor mask)
    impl_ns: op_api, op_api
    version: v2.1, v2.2
    kernel: opapi/FakeQuantizeKernelNpuOpApi.cpp
  - func: _fft_c2c(Tensor self, SymInt[] dim, int normalization, bool forward) -> Tensor
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FFTc2cKernelNpuOpApi.cpp
  - func: _fft_c2c.out(Tensor self, SymInt[] dim, int normalization, bool forward, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FFTc2cKernelNpuOpApi.cpp
  - func: _fft_c2r(Tensor self, int[] dim, int normalization, SymInt last_dim_size) -> Tensor
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FFTc2cKernelNpuOpApi.cpp
  - func: _fft_c2r.out(Tensor self, int[] dim, int normalization, SymInt last_dim_size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FFTc2cKernelNpuOpApi.cpp
  - func: _fft_r2c(Tensor self, int[] dim, int normalization, bool onesided) -> Tensor
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FFTc2cKernelNpuOpApi.cpp
  - func: _fft_r2c.out(Tensor self, int[] dim, int normalization, bool onesided, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FFTc2cKernelNpuOpApi.cpp
  - func: _foreach_abs_(Tensor(a!)[] self) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAbsKernelOpApi.cpp
  - func: _foreach_abs(Tensor[] tensors) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAbsKernelOpApi.cpp
  - func: _foreach_add.List(Tensor[] tensors1, Tensor[] tensors2, *, Scalar alpha=1) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddKernelNpuOpApi.cpp
  - func: _foreach_add.Scalar(Tensor[] tensors, Scalar scalar) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddKernelNpuOpApi.cpp
  - func: _foreach_add.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddScalarKernelNpuOpApi.cpp
  - func: _foreach_add_.List(Tensor(a!)[] self, Tensor[] other, *, Scalar alpha=1) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddKernelNpuOpApi.cpp
  - func: _foreach_add_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddKernelNpuOpApi.cpp
  - func: _foreach_add_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddScalarKernelNpuOpApi.cpp
  - func: _foreach_addcdiv.Scalar(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcdivScalarKernelNpuOpApi.cpp
  - func: _foreach_addcdiv.ScalarList(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcdivScalarListKernelNpuOpApi.cpp
  - func: _foreach_addcdiv.Tensor(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Tensor scalars) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcdivTensorKernelNpuOpApi.cpp
  - func: _foreach_addcdiv_.Scalar(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcdivScalarKernelNpuOpApi.cpp
  - func: _foreach_addcdiv_.ScalarList(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcdivScalarListKernelNpuOpApi.cpp
  - func: _foreach_addcdiv_.Tensor(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Tensor scalars) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcdivTensorKernelNpuOpApi.cpp
  - func: _foreach_addcmul.Scalar(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcmulScalarKernelNpuOpApi.cpp
  - func: _foreach_addcmul.ScalarList(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcmulScalarListKernelNpuOpApi.cpp
  - func: _foreach_addcmul.Tensor(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Tensor scalars) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcmulTensorKernelNpuOpApi.cpp
  - func: _foreach_addcmul_.Scalar(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcmulScalarKernelNpuOpApi.cpp
  - func: _foreach_addcmul_.ScalarList(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcmulScalarListKernelNpuOpApi.cpp
  - func: _foreach_addcmul_.Tensor(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Tensor scalars) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachAddcmulTensorKernelNpuOpApi.cpp
  - func: _foreach_ceil(Tensor(a!)[] self) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: _foreach_ceil_(Tensor(a!)[] self) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: _foreach_cos(Tensor[] tensors) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachCosKernelNpuOpApi.cpp
  - func: _foreach_cos_(Tensor(a!)[] self) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachCosKernelNpuOpApi.cpp
  - func: _foreach_div.List(Tensor[] tensors1, Tensor[] tensors2) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachDivKernelNpuOpApi.cpp
  - func: _foreach_div.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachDivKernelNpuOpApi.cpp
  - func: _foreach_div.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachDivKernelNpuOpApi.cpp
  - func: _foreach_div_.List(Tensor(a!)[] self, Tensor[] other) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachDivKernelNpuOpApi.cpp
  - func: _foreach_div_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachDivKernelNpuOpApi.cpp
  - func: _foreach_div_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachDivKernelNpuOpApi.cpp
  - func: _foreach_exp(Tensor[] tensors) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachExpKernelNpuOpApi.cpp
  - func: _foreach_exp_(Tensor(a!)[] self) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachExpKernelNpuOpApi.cpp
  - func: _foreach_floor(Tensor(a!)[] self) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: _foreach_floor_(Tensor(a!)[] self) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: _foreach_frac(Tensor(a!)[] self) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: _foreach_frac_(Tensor(a!)[] self) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: _foreach_maximum.List(Tensor[] self, Tensor[] other) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMaximumKernelNpuOpApi.cpp
  - func: _foreach_maximum.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMaximumKernelNpuOpApi.cpp
  - func: _foreach_maximum.ScalarList(Tensor[] self, Scalar[] scalars) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMaximumKernelNpuOpApi.cpp
  - func: _foreach_maximum_.List(Tensor(a!)[] self, Tensor[] other) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMaximumKernelNpuOpApi.cpp
  - func: _foreach_maximum_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMaximumKernelNpuOpApi.cpp
  - func: _foreach_maximum_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMaximumKernelNpuOpApi.cpp
  - func: _foreach_minimum.List(Tensor[] self, Tensor[] other) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMinimumKernelNpuOpApi.cpp
  - func: _foreach_minimum.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMinimumKernelNpuOpApi.cpp
  - func: _foreach_minimum.ScalarList(Tensor[] self, Scalar[] scalars) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMinimumKernelNpuOpApi.cpp
  - func: _foreach_minimum_.List(Tensor(a!)[] self, Tensor[] other) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMinimumKernelNpuOpApi.cpp
  - func: _foreach_minimum_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMinimumKernelNpuOpApi.cpp
  - func: _foreach_minimum_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMinimumKernelNpuOpApi.cpp
  - func: _foreach_mul.List(Tensor[] tensors1, Tensor[] tensors2) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMulKernelNpuOpApi.cpp
  - func: _foreach_mul.Scalar(Tensor[] tensors, Scalar scalar) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMulKernelNpuOpApi.cpp
  - func: _foreach_mul.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMulKernelNpuOpApi.cpp
  - func: _foreach_mul_.List(Tensor(a!)[] self, Tensor[] other) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMulKernelNpuOpApi.cpp
  - func: _foreach_mul_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMulKernelNpuOpApi.cpp
  - func: _foreach_mul_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachMulKernelNpuOpApi.cpp
  - func: _foreach_neg(Tensor[] tensors) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachNegKernelNpuOpApi.cpp
  - func: _foreach_neg_(Tensor(a!)[] self) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachNegKernelNpuOpApi.cpp
  - func: _foreach_pow.List(Tensor[] self, Tensor[] exponent) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachPowKernelNpuOpApi.cpp
  - func: _foreach_pow.Scalar(Tensor[] tensors, Scalar scalar) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachPowScalarKernelNpuOpApi.cpp
  - func: _foreach_pow.ScalarList(Tensor[] self, Scalar[] exponent) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachPowKernelNpuOpApi.cpp
  - func: _foreach_pow_.List(Tensor(a!)[] self, Tensor[] exponent) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachPowKernelNpuOpApi.cpp
  - func: _foreach_pow_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachPowScalarKernelNpuOpApi.cpp
  - func: _foreach_pow_.ScalarList(Tensor(a!)[] self, Scalar[] exponent) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachPowKernelNpuOpApi.cpp
  - func: _foreach_round(Tensor(a!)[] self) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: _foreach_round_(Tensor(a!)[] self) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: _foreach_sigmoid(Tensor[] tensors) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachSigmoidKernelOpApi.cpp
  - func: _foreach_sigmoid_(Tensor(a!)[] self) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachSigmoidKernelOpApi.cpp
  - func: _foreach_sqrt(Tensor[] tensors) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachSqrtKernelNpuOpApi.cpp
  - func: _foreach_sqrt_(Tensor(a!)[] self) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachSqrtKernelNpuOpApi.cpp
  - func: _foreach_sub.List(Tensor[] tensors1, Tensor[] tensors2, *, Scalar alpha=1) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachSubKernelNpuOpApi.cpp
  - func: _foreach_sub.Scalar(Tensor[] self, Scalar scalar) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachSubKernelNpuOpApi.cpp
  - func: _foreach_sub.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachSubKernelNpuOpApi.cpp
  - func: _foreach_sub_.List(Tensor(a!)[] self, Tensor[] other, *, Scalar alpha=1) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachSubKernelNpuOpApi.cpp
  - func: _foreach_sub_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachSubKernelNpuOpApi.cpp
  - func: _foreach_sub_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachSubKernelNpuOpApi.cpp
  - func: _foreach_trunc(Tensor(a!)[] self) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: _foreach_trunc_(Tensor(a!)[] self) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: _fused_adamw_(Tensor(a!)[] self, Tensor(b!)[] grads, Tensor(c!)[] exp_avgs, Tensor(d!)[] exp_avg_sqs, Tensor(e!)[] max_exp_avg_sqs, Tensor[] state_steps, *, float lr, float beta1, float beta2, float weight_decay, float eps, bool amsgrad, bool maximize, Tensor? grad_scale=None, Tensor? found_inf=None) -> ()
    impl_ns: op_api, op_api
    version: v2.1, v2.2
    kernel: opapi/FusedAdamWKernelNpuOpApi.cpp
  - func: _fused_moving_avg_obs_fq_helper(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor(a!) running_min, Tensor(b!) running_max, Tensor(c!) scale, Tensor(d!) zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False) -> (Tensor output, Tensor mask)
    impl_ns: op_api, op_api
    version: v2.1, v2.2
    kernel: opapi/FakeQuantizeKernelNpuOpApi.cpp
  - func: _index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/IndexCopyKernelNpu.cpp, opapi/IndexCopyKernelNpuOpApi.cpp
  - func: _index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexPutKernelNpu.cpp, opapi/IndexPutKernelNpuOpApi.cpp
  - func: _linalg_svd(Tensor A, bool full_matrices=False, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor Vh)
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/LinalgSvdKernelNpu.cpp
  - func: _linalg_svd(Tensor A, bool full_matrices=False, bool compute_uv=True, *, str? driver=None) -> (Tensor U, Tensor S, Tensor Vh)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgSvdKernelNpu.cpp
  - func: _linalg_svd.U(Tensor A, bool full_matrices=False, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh)
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/LinalgSvdKernelNpu.cpp
  - func: _linalg_svd.U(Tensor A, bool full_matrices=False, bool compute_uv=True, *, str? driver=None, Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgSvdKernelNpu.cpp
  - func: _log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSoftmaxKernelNpu.cpp, opapi/LogSoftmaxKernelNpuOpApi.cpp
  - func: _log_softmax.out(Tensor self, int dim, bool half_to_float, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LogSoftmaxKernelNpu.cpp, opapi/LogSoftmaxKernelNpuOpApi.cpp
  - func: _log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSoftmaxBackwardKernelNpu.cpp, opapi/LogSoftmaxBackwardKernelNpuOpApi.cpp
  - func: _log_softmax_backward_data.out(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSoftmaxBackwardKernelNpu.cpp, opapi/LogSoftmaxBackwardKernelNpuOpApi.cpp
  - func: _native_batch_norm_legit(Tensor input, Tensor? weight, Tensor? bias, Tensor(a!) running_mean, Tensor(b!) running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BatchNormKernelNpu.cpp
  - func: _nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, SymInt[2] padding, int[2] stride=1) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/NnpackSpatialConvolutionKernelNpu.cpp
  - func: _nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=1) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/NnpackSpatialConvolutionKernelNpu.cpp
  - func: _pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/PackPaddedSequenceKernelNpu.cpp
  - func: _pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/PadPackedSequenceKernelNpu.cpp
  - func: _pdist_forward(Tensor self, float p=2) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PdistKernelNpu.cpp, opapi/PdistKernelNpuOpApi.cpp
  - func: _prelu_kernel(Tensor self, Tensor weight) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PreluKernelNpu.cpp, opapi/PreluKernelNpuOpApi.cpp
  - func: _prelu_kernel_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PreluBackwardKernelNpu.cpp, opapi/PreluBackwardKernelNpuOpApi.cpp
  - func: _s_where(Tensor condition, Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/RreluWithNoiseKernelNpu.cpp, opapi/WhereKernelNpuOpApi.cpp
  - func: _slow_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ConvolutionBackwardKernelNpuOpApi.cpp
  - func: _slow_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: _slow_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: _softmax(Tensor self, int dim, bool half_to_float) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DropoutWithAddSoftmaxKernelNpu.cpp, opapi/LogSoftmaxKernelNpuOpApi.cpp
  - func: _softmax.out(Tensor self, int dim, bool half_to_float, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DropoutWithAddSoftmaxKernelNpu.cpp, opapi/LogSoftmaxKernelNpuOpApi.cpp
  - func: _softmax_backward_data(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSoftmaxBackwardKernelNpu.cpp, opapi/LogSoftmaxBackwardKernelNpuOpApi.cpp
  - func: _softmax_backward_data.out(Tensor grad_output, Tensor output, int dim, ScalarType input_dtype, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSoftmaxBackwardKernelNpu.cpp, opapi/LogSoftmaxBackwardKernelNpuOpApi.cpp
  - func: _symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op
    version: v1.11, v2.0
    kernel: aclops/SymeigKernelNpu.cpp
  - func: _unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/_UniqueKernelNpu.cpp, opapi/_UniqueKernelNpuOpApi.cpp
  - func: _unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/_Unique2KernelNpu.cpp, opapi/Unique2KernelNpuOpApi.cpp
  - func: _unsafe_index.Tensor(Tensor self, Tensor?[] indices) -> Tensor
    impl_ns: acl_op
    version: v2.1
    kernel: aclops/UnsafeIndexKernelNpu.cpp
  - func: _weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/WeightNormKernelNpu.cpp
  - func: abs(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AbsKernelNpu.cpp, opapi/AbsKernelNpuOpApi.cpp
  - func: abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AbsKernelNpu.cpp, opapi/AbsKernelNpuOpApi.cpp
  - func: abs_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AbsKernelNpu.cpp, opapi/AbsKernelNpuOpApi.cpp
  - func: acos(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcosKernelNpu.cpp, opapi/AcosKernelNpuOpApi.cpp
  - func: acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcosKernelNpu.cpp, opapi/AcosKernelNpuOpApi.cpp
  - func: acos_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcosKernelNpu.cpp, opapi/AcosKernelNpuOpApi.cpp
  - func: acosh(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcoshKernelNpu.cpp, opapi/AcoshKernelNpuOpApi.cpp
  - func: acosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcoshKernelNpu.cpp, opapi/AcoshKernelNpuOpApi.cpp
  - func: acosh_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcoshKernelNpu.cpp, opapi/AcoshKernelNpuOpApi.cpp
  - func: adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AdaptiveAvgPool1dKernelNpu.cpp
  - func: adaptive_avg_pool2d(Tensor self, SymInt[2] output_size) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool1dKernelNpu.cpp, opapi/AdaptiveAvgPool2dKernelNpuOpApi.cpp
  - func: adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/AdaptiveAvgPool1dKernelNpu.cpp, opapi/AdaptiveAvgPool2dKernelNpuOpApi.cpp
  - func: adaptive_avg_pool2d.out(Tensor self, SymInt[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool1dKernelNpu.cpp, opapi/AdaptiveAvgPool2dKernelNpuOpApi.cpp
  - func: adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/AdaptiveAvgPool1dKernelNpu.cpp, opapi/AdaptiveAvgPool2dKernelNpuOpApi.cpp
  - func: adaptive_avg_pool3d(Tensor self, SymInt[3] output_size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp
  - func: adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp
  - func: adaptive_avg_pool3d.out(Tensor self, SymInt[3] output_size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp
  - func: adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp
  - func: adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool3dBackwardKernelNpu.cpp, opapi/AdaptiveAvgPool3dBackwardKernelNpuOpApi.cpp
  - func: adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveMaxPool2dKernelNpu.cpp, opapi/AdaptiveMaxPool2dKernelNpuOpApi.cpp
  - func: adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveMaxPool2dKernelNpu.cpp, opapi/AdaptiveMaxPool2dKernelNpuOpApi.cpp
  - func: adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AdaptiveMaxPool2dBackwardKernelNpu.cpp
  - func: adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AdaptiveMaxPool2dBackwardKernelNpu.cpp
  - func: add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddKernelNpu.cpp, opapi/AddKernelNpuOpApi.cpp
  - func: add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddKernelNpu.cpp, opapi/AddKernelNpuOpApi.cpp
  - func: add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    sparse: op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddKernelNpu.cpp, opapi/AddKernelNpuOpApi.cpp
  - func: add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddKernelNpu.cpp, opapi/AddKernelNpuOpApi.cpp
  - func: add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddKernelNpu.cpp, opapi/AddKernelNpuOpApi.cpp
  - func: addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddbmmKernelNpu.cpp, opapi/AddbmmKernelNpuOpApi.cpp
  - func: addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddbmmKernelNpu.cpp, opapi/AddbmmKernelNpuOpApi.cpp
  - func: addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddbmmKernelNpu.cpp, opapi/AddbmmKernelNpuOpApi.cpp
  - func: addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcmulKernelNpu.cpp, opapi/AddcmulKernelNpuOpApi.cpp
  - func: addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcmulKernelNpu.cpp, opapi/AddcmulKernelNpuOpApi.cpp
  - func: addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcmulKernelNpu.cpp, opapi/AddcmulKernelNpuOpApi.cpp
  - func: addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddmmKernelNpu.cpp, opapi/AddmmKernelNpuOpApi.cpp
  - func: addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddmmKernelNpu.cpp, opapi/AddmmKernelNpuOpApi.cpp
  - func: addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddmmKernelNpu.cpp, opapi/AddmmKernelNpuOpApi.cpp
  - func: addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddmvKernelNpu.cpp, opapi/AddmvKernelNpuOpApi.cpp
  - func: addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddmvKernelNpu.cpp, opapi/AddmvKernelNpuOpApi.cpp
  - func: addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddmvKernelNpu.cpp, opapi/AddmvKernelNpuOpApi.cpp
  - func: addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddrKernelNpu.cpp, opapi/AddrKernelNpuOpApi.cpp
  - func: addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddrKernelNpu.cpp, opapi/AddrKernelNpuOpApi.cpp
  - func: addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddrKernelNpu.cpp, opapi/AddrKernelNpuOpApi.cpp
  - func: affine_grid_generator(Tensor theta, SymInt[] size, bool align_corners) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AffineGridGeneratorKernelNpu.cpp, opapi/AffineGridGeneratorKernelNpuOpApi.cpp
  - func: affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> Tensor
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/AffineGridGeneratorKernelNpu.cpp, opapi/AffineGridGeneratorKernelNpuOpApi.cpp
  - func: affine_grid_generator_backward(Tensor grad, SymInt[] size, bool align_corners) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AffineGridGeneratorBackwardKernelNpu.cpp
  - func: affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> Tensor
    impl_ns: acl_op, acl_op
    version: v1.11, v2.0
    kernel: aclops/AffineGridGeneratorBackwardKernelNpu.cpp
  - func: all(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AllKernelNpu.cpp, opapi/AllKernelNpuOpApi.cpp
  - func: all.all_out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AllKernelNpu.cpp, opapi/AllKernelNpuOpApi.cpp
  - func: all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AllKernelNpu.cpp, opapi/AllKernelNpuOpApi.cpp
  - func: all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AllKernelNpu.cpp, opapi/AllKernelNpuOpApi.cpp
  - func: amax(Tensor self, int[1] dim=[], bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp, opapi/AmaxKernelNpuOpApi.cpp
  - func: amax.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp, opapi/AmaxKernelNpuOpApi.cpp
  - func: amin(Tensor self, int[1] dim=[], bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp, opapi/AminKernelNpuOpApi.cpp
  - func: amin.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp, opapi/AminKernelNpuOpApi.cpp
  - func: aminmax(Tensor self, *, int? dim=None, bool keepdim=False) -> (Tensor min, Tensor max)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/AminmaxKernelNpuOpApi.cpp
  - func: aminmax.out(Tensor self, *, int? dim=None, bool keepdim=False, Tensor(a!) min, Tensor(b!) max) -> (Tensor(a!) min, Tensor(b!) max)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/_AminmaxKernelNpu.cpp, opapi/AminKernelNpuOpApi.cpp
  - func: angle(Tensor self) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/AngleKernelNpuOpApi.cpp
  - func: angle.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/AngleKernelNpuOpApi.cpp
  - func: any(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AnyKernelNpu.cpp, opapi/AnyKernelNpuOpApi.cpp
  - func: any.all_out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AnyKernelNpu.cpp, opapi/AnyKernelNpuOpApi.cpp
  - func: any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AnyKernelNpu.cpp, opapi/AnyKernelNpuOpApi.cpp
  - func: any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AnyKernelNpu.cpp, opapi/AnyKernelNpuOpApi.cpp
  - func: arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArangeKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArangeKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArangeKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArangeKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: arange.start_step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArangeKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgmaxKernelNpu.cpp, opapi/ArgmaxKernelNpuOpApi.cpp
  - func: argmax.out(Tensor self, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgmaxKernelNpu.cpp, opapi/ArgmaxKernelNpuOpApi.cpp
  - func: argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgminKernelNpu.cpp, opapi/ArgminKernelNpuOpApi.cpp
  - func: argmin.out(Tensor self, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgminKernelNpu.cpp, opapi/ArgminKernelNpuOpApi.cpp
  - func: argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgsortKernelNpu.cpp, opapi/ArgSortKernelNpuOpApi.cpp
  - func: argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgsortKernelNpu.cpp, opapi/ArgSortKernelNpuOpApi.cpp
  - func: asin(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinKernelNpu.cpp, opapi/AsinKernelNpuOpApi.cpp
  - func: asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinKernelNpu.cpp, opapi/AsinKernelNpuOpApi.cpp
  - func: asin_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinKernelNpu.cpp, opapi/AsinKernelNpuOpApi.cpp
  - func: asinh(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinhKernelNpu.cpp, opapi/AsinhKernelNpuOpApi.cpp
  - func: asinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinhKernelNpu.cpp, opapi/AsinhKernelNpuOpApi.cpp
  - func: asinh_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinhKernelNpu.cpp, opapi/AsinhKernelNpuOpApi.cpp
  - func: atan(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanKernelNpu.cpp, opapi/AtanKernelNpuOpApi.cpp
  - func: atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanKernelNpu.cpp, opapi/AtanKernelNpuOpApi.cpp
  - func: atan2(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Atan2KernelNpu.cpp, opapi/Atan2KernelNpuOpApi.cpp
  - func: atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Atan2KernelNpu.cpp, opapi/Atan2KernelNpuOpApi.cpp
  - func: atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Atan2KernelNpu.cpp, opapi/Atan2KernelNpuOpApi.cpp
  - func: atan_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanKernelNpu.cpp, opapi/AtanKernelNpuOpApi.cpp
  - func: atanh(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanhKernelNpu.cpp, opapi/AtanhKernelNpuOpApi.cpp
  - func: atanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanhKernelNpu.cpp, opapi/AtanhKernelNpuOpApi.cpp
  - func: atanh_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanhKernelNpu.cpp, opapi/AtanhKernelNpuOpApi.cpp
  - func: avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool1dKernelNpu.cpp, opapi/AvgPool2dKernelNpuOpApi.cpp
  - func: avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool1dKernelNpu.cpp, opapi/AvgPool2dKernelNpuOpApi.cpp
  - func: avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool2dBackwardKernelNpu.cpp, opapi/AvgPool2dBackwardKernelNpuOpApi.cpp
  - func: avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool2dBackwardKernelNpu.cpp, opapi/AvgPool2dBackwardKernelNpuOpApi.cpp
  - func: avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp
  - func: avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp
  - func: avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AdaptiveAvgPool3dBackwardKernelNpu.cpp
  - func: avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AdaptiveAvgPool3dBackwardKernelNpu.cpp
  - func: baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BaddbmmKernelNpu.cpp, opapi/BaddbmmKernelNpuOpApi.cpp
  - func: baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BaddbmmKernelNpu.cpp, opapi/BaddbmmKernelNpuOpApi.cpp
  - func: baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BaddbmmKernelNpu.cpp, opapi/BaddbmmKernelNpuOpApi.cpp
  - func: batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BatchNormElemtKernelNpu.cpp
  - func: batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu, Tensor count) -> Tensor
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/BatchNormBackwardElemtKernelNpu.cpp
  - func: batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor sum_dy, Tensor sum_dy_xmu, Tensor count) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormBackwardElemtKernelNpu.cpp, opapi/BatchNormBackwardElemtKernelNpuOpApi.cpp
  - func: batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormBackwardReduceKernelNpu.cpp, opapi/BatchNormBackwardReduceKernelNpuOpApi.cpp
  - func: batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormElemtKernelNpu.cpp, opapi/BatchNormElemtKernelNpuOpApi.cpp
  - func: batch_norm_elemt.out(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormElemtKernelNpu.cpp, opapi/BatchNormElemtKernelNpuOpApi.cpp
  - func: batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, Tensor counts) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormGatherStatsWithCountsKernelNpu.cpp, opapi/BatchNormGatherStatsWithCountsKernelNpuOpApi.cpp
  - func: batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormStatsKernelNpu.cpp, opapi/BatchNormStatsKernelNpuOpApi.cpp
  - func: bernoulli(Tensor self, *, Generator? generator=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BernoulliKernelNpu.cpp, opapi/BernoulliKernelNpuOpApi.cpp
  - func: bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BernoulliKernelNpu.cpp, opapi/BernoulliKernelNpuOpApi.cpp
  - func: bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BernoulliKernelNpu.cpp, opapi/BernoulliKernelNpuOpApi.cpp
  - func: bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BernoulliKernelNpu.cpp, opapi/BernoulliKernelNpuOpApi.cpp
  - func: bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BernoulliKernelNpu.cpp, opapi/BernoulliKernelNpuOpApi.cpp
  - func: binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BinaryCrossEntropyKernelNpu.cpp, opapi/BinaryCrossEntropyKernelNpuOpApi.cpp
  - func: binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BinaryCrossEntropyKernelNpu.cpp, opapi/BinaryCrossEntropyKernelNpuOpApi.cpp
  - func: binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BinaryCrossEntropyBackwardKernelNpu.cpp, opapi/BinaryCrossEntropyBackwardKernelNpuOpApi.cpp
  - func: binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BinaryCrossEntropyBackwardKernelNpu.cpp, opapi/BinaryCrossEntropyBackwardKernelNpuOpApi.cpp
  - func: binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BinaryCrossEntropyWithLogitsKernelNpu.cpp, opapi/BinaryCrossEntropyWithLogitsKernelNpuOpApi.cpp
  - func: binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/BinaryCrossEntropyWithLogitsBackwardKernelNpu.cpp
  - func: bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BincountKernelNpu.cpp, opapi/BincountKernelNpuOpApi.cpp
  - func: bitwise_and.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseAndKernelNpu.cpp, opapi/BitwiseAndKernelNpuOpApi.cpp
  - func: bitwise_and.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseAndKernelNpu.cpp, opapi/BitwiseAndKernelNpuOpApi.cpp
  - func: bitwise_and.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseAndKernelNpu.cpp, opapi/BitwiseAndKernelNpuOpApi.cpp
  - func: bitwise_and.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseAndKernelNpu.cpp, opapi/BitwiseAndKernelNpuOpApi.cpp
  - func: bitwise_and_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseAndKernelNpu.cpp, opapi/BitwiseAndKernelNpuOpApi.cpp
  - func: bitwise_and_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseAndKernelNpu.cpp, opapi/BitwiseAndKernelNpuOpApi.cpp
  - func: bitwise_not(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseNotKernelNpu.cpp, opapi/BitwiseNotKernelNpuOpApi.cpp
  - func: bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseNotKernelNpu.cpp, opapi/BitwiseNotKernelNpuOpApi.cpp
  - func: bitwise_not_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseNotKernelNpu.cpp, opapi/BitwiseNotKernelNpuOpApi.cpp
  - func: bitwise_or.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseOrKernelNpu.cpp, opapi/BitwiseOrKernelNpuOpApi.cpp
  - func: bitwise_or.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseOrKernelNpu.cpp, opapi/BitwiseOrKernelNpuOpApi.cpp
  - func: bitwise_or.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseOrKernelNpu.cpp, opapi/BitwiseOrKernelNpuOpApi.cpp
  - func: bitwise_or.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseOrKernelNpu.cpp, opapi/BitwiseOrKernelNpuOpApi.cpp
  - func: bitwise_xor.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseXorKernelNpu.cpp, opapi/BitwiseXorKernelNpuOpApi.cpp
  - func: bitwise_xor.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseXorKernelNpu.cpp, opapi/BitwiseXorKernelNpuOpApi.cpp
  - func: bitwise_xor.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseXorKernelNpu.cpp, opapi/BitwiseXorKernelNpuOpApi.cpp
  - func: bitwise_xor.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseXorKernelNpu.cpp, opapi/BitwiseXorKernelNpuOpApi.cpp
  - func: bitwise_xor_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseXorKernelNpu.cpp, opapi/BitwiseXorKernelNpuOpApi.cpp
  - func: bitwise_xor_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BitwiseXorKernelNpu.cpp, opapi/BitwiseXorKernelNpuOpApi.cpp
  - func: bmm(Tensor self, Tensor mat2) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddbmmKernelNpu.cpp, opapi/AddbmmKernelNpuOpApi.cpp
  - func: bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddbmmKernelNpu.cpp, opapi/AddbmmKernelNpuOpApi.cpp
  - func: bucketize.Scalar(Scalar self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/BucketizeKernelNpuOpApi.cpp
  - func: bucketize.Tensor(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/BucketizeKernelNpuOpApi.cpp
  - func: bucketize.Tensor_out(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/BucketizeKernelNpuOpApi.cpp
  - func: cat(Tensor[] tensors, int dim=0) -> Tensor
    structured_delegate: cat.out
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CatKernelNpu.cpp, opapi/CatKernelNpuOpApi.cpp
  - func: cat.names(Tensor[] tensors, Dimname dim) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CatKernelNpu.cpp, opapi/CatKernelNpuOpApi.cpp
  - func: cat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CatKernelNpu.cpp, opapi/CatKernelNpuOpApi.cpp
  - func: cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
    structured: true
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CatKernelNpu.cpp, opapi/CatKernelNpuOpApi.cpp
  - func: cdist(Tensor x1, Tensor x2, float p=2, int? compute_mode=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/CdistKernelNpu.cpp
  - func: ceil(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CeilKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CeilKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: ceil_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CeilKernelNpu.cpp, opapi/CeilKernelNpuOpApi.cpp
  - func: _coalesce(Tensor self) -> Tensor
    sparse: op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: sparse/SparseCoalesceKernelOpApi.cpp
  - func: celu(Tensor self, Scalar alpha=1.0) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CeluKernelNpu.cpp, opapi/CeluKernelNpuOpApi.cpp
  - func: celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CeluKernelNpu.cpp, opapi/CeluKernelNpuOpApi.cpp
  - func: channel_shuffle(Tensor self, int groups) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ChannelShuffleKernelNpu.cpp, opapi/ChannelShuffleKernelNpuOpApi.cpp
  - func: clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp.Tensor(Tensor self, Tensor? min=None, Tensor? max=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp.Tensor_out(Tensor self, Tensor? min=None, Tensor? max=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_.Tensor(Tensor(a!) self, Tensor? min=None, Tensor? max=None) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_max(Tensor self, Scalar max) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_max.Tensor(Tensor self, Tensor max) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_max.Tensor_out(Tensor self, Tensor max, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ClampKernelNpu.cpp
  - func: clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_max_.Tensor(Tensor(a!) self, Tensor max) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_min(Tensor self, Scalar min) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_min.Tensor(Tensor self, Tensor min) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_min.Tensor_out(Tensor self, Tensor min, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: clamp_min_.Tensor(Tensor(a!) self, Tensor min) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ClampKernelNpu.cpp, opapi/ClampKernelNpuOpApi.cpp
  - func: col2im(Tensor self, SymInt[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Col2imKernelNpu.cpp, opapi/Col2imKernelNpuOpApi.cpp
  - func: col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/Col2imKernelNpu.cpp, opapi/Col2imKernelNpuOpApi.cpp
  - func: col2im.out(Tensor self, SymInt[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Col2imKernelNpu.cpp, opapi/Col2imKernelNpuOpApi.cpp
  - func: col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/Col2imKernelNpu.cpp, opapi/Col2imKernelNpuOpApi.cpp
  - func: col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/Im2colKernelNpu.cpp
  - func: col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/Im2colKernelNpu.cpp
  - func: complex(Tensor real, Tensor imag) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ComplexKernelNpu.cpp, opapi/AngleKernelNpuOpApi.cpp
  - func: complex.out(Tensor real, Tensor imag, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ComplexKernelNpu.cpp, opapi/AngleKernelNpuOpApi.cpp
  - func: constant_pad_nd(Tensor self, SymInt[] pad, Scalar value=0) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConstantPadNdKernelNpu.cpp, opapi/ConstantPadNdKernelNpuOpApi.cpp
  - func: constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ConstantPadNdKernelNpu.cpp, opapi/ConstantPadNdKernelNpuOpApi.cpp
  - func: conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvtbcKernelNpu.cpp, opapi/ConvtbcKernelNpuOpApi.cpp
  - func: conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvTbcBackwardKernelNpu.cpp, opapi/ConvolutionBackwardKernelNpuOpApi.cpp
  - func: conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, SymInt[2] padding=0, SymInt[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp
  - func: conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor
    impl_ns: acl_op, acl_op
    version: v1.11, v2.0
    kernel: aclops/ConvolutionKernelNpu.cpp
  - func: conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, SymInt[3] padding=0, SymInt[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp
  - func: conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor
    impl_ns: acl_op, acl_op
    version: v1.11, v2.0
    kernel: aclops/ConvolutionKernelNpu.cpp
  - func: convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, SymInt[] padding, int[] dilation, bool transposed, SymInt[] output_padding, int groups) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: convolution_backward(Tensor grad_output, Tensor input, Tensor weight, SymInt[]? bias_sizes, int[] stride, SymInt[] padding, int[] dilation, bool transposed, SymInt[] output_padding, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ConvolutionBackwardKernelNpuOpApi.cpp
  - func: convolution_backward(Tensor grad_output, Tensor input, Tensor weight, int[]? bias_sizes, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ConvolutionBackwardKernelNpuOpApi.cpp
  - func: convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ConvolutionBackwardKernelNpuOpApi.cpp
  - func: convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: cos(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcosKernelNpu.cpp, opapi/AcosKernelNpuOpApi.cpp
  - func: cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcosKernelNpu.cpp, opapi/AcosKernelNpuOpApi.cpp
  - func: cos_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcosKernelNpu.cpp, opapi/AcosKernelNpuOpApi.cpp
  - func: cosh(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcoshKernelNpu.cpp, opapi/AcoshKernelNpuOpApi.cpp
  - func: cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcoshKernelNpu.cpp, opapi/AcoshKernelNpuOpApi.cpp
  - func: cosh_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AcoshKernelNpu.cpp, opapi/AcoshKernelNpuOpApi.cpp
  - func: count_nonzero(Tensor self, int? dim=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CountNonZeroKernelNpu.cpp, opapi/CountNonZeroKernelNpuOpApi.cpp
  - func: count_nonzero.dim_IntList(Tensor self, int[] dim) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CountNonZeroKernelNpu.cpp, opapi/CountNonZeroKernelNpuOpApi.cpp
  - func: ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CtcLossKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CtcLossKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/CumprodKernelNpu.cpp
  - func: cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/CumprodKernelNpu.cpp
  - func: cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/CumprodKernelNpu.cpp
  - func: cumprod_(Tensor(a!) self, int dim, *, ScalarType? dtype=None) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/CumprodKernelNpu.cpp
  - func: cumprod_.dimname(Tensor(a!) self, Dimname dim, *, ScalarType? dtype=None) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/CumprodKernelNpu.cpp
  - func: cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CumsumKernelNpu.cpp, opapi/CumsumKernelNpuOpApi.cpp
  - func: cumsum.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CumsumKernelNpu.cpp, opapi/CumsumKernelNpuOpApi.cpp
  - func: cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CumsumKernelNpu.cpp, opapi/CumsumKernelNpuOpApi.cpp
  - func: cumsum_(Tensor(a!) self, int dim, *, ScalarType? dtype=None) -> Tensor(a!)
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/CumsumKernelNpu.cpp
  - func: dequantize.self(Tensor self) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/DequantizeKernelNpu.cpp, opapi/DequantizeKernelNpuOpApi.cpp
  - func: diag(Tensor self, int diagonal=0) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DiagKernelNpu.cpp, opapi/DiagKernelNpuOpApi.cpp
  - func: diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DiagKernelNpu.cpp, opapi/DiagKernelNpuOpApi.cpp
  - func: div.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: div.Scalar_mode(Tensor self, Scalar other, *, str? rounding_mode) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: div.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: div.Tensor_mode(Tensor self, Tensor other, *, str? rounding_mode) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: div.out_mode(Tensor self, Tensor other, *, str? rounding_mode, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: div_.Scalar_mode(Tensor(a!) self, Scalar other, *, str? rounding_mode) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: div_.Tensor_mode(Tensor(a!) self, Tensor other, *, str? rounding_mode) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddcdivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: dot(Tensor self, Tensor tensor) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DotKernelNpu.cpp, opapi/DotKernelNpuOpApi.cpp
  - func: dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DotKernelNpu.cpp, opapi/DotKernelNpuOpApi.cpp
  - func: dropout(Tensor input, float p, bool train) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DropoutKernelNpu.cpp, opapi/DropoutKernelNpuOpApi.cpp
  - func: elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddReluKernelNpu.cpp, opapi/CeluKernelNpuOpApi.cpp
  - func: elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddReluKernelNpu.cpp, opapi/CeluKernelNpuOpApi.cpp
  - func: elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddReluKernelNpu.cpp, opapi/CeluKernelNpuOpApi.cpp
  - func: elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, bool is_result, Tensor self_or_result) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EluBackwardKernelNpu.cpp, opapi/EluBackwardKernelNpuOpApi.cpp
  - func: elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, bool is_result, Tensor self_or_result, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EluBackwardKernelNpu.cpp, opapi/EluBackwardKernelNpuOpApi.cpp
  - func: embedding(Tensor weight, Tensor indices, SymInt padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EmbeddingKernelNpu.cpp, opapi/EmbeddingKernelNpuOpApi.cpp
  - func: embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/EmbeddingKernelNpu.cpp, opapi/EmbeddingKernelNpuOpApi.cpp
  - func: embedding_backward(Tensor grad, Tensor indices, SymInt num_weights, SymInt padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EmbeddingBackwardKernelNpu.cpp, opapi/EmbeddingBackwardKernelNpuOpApi.cpp
  - func: embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/EmbeddingBackwardKernelNpu.cpp, opapi/EmbeddingBackwardKernelNpuOpApi.cpp
  - func: embedding_dense_backward(Tensor grad_output, Tensor indices, SymInt num_weights, SymInt padding_idx, bool scale_grad_by_freq) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EmbeddingBackwardKernelNpu.cpp, opapi/EmbeddingBackwardKernelNpuOpApi.cpp
  - func: embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/EmbeddingBackwardKernelNpu.cpp, opapi/EmbeddingBackwardKernelNpuOpApi.cpp
  - func: embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EmbeddingRenormKernelNpu.cpp, opapi/EmbeddingRenormKernelNpuOpApi.cpp
  - func: eq.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EqKernelNpu.cpp, opapi/EqKernelNpuOpApi.cpp
  - func: eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EqKernelNpu.cpp, opapi/EqKernelNpuOpApi.cpp
  - func: eq.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EqKernelNpu.cpp, opapi/EqKernelNpuOpApi.cpp
  - func: eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EqKernelNpu.cpp, opapi/EqKernelNpuOpApi.cpp
  - func: eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EqKernelNpu.cpp, opapi/EqKernelNpuOpApi.cpp
  - func: eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EqKernelNpu.cpp, opapi/EqKernelNpuOpApi.cpp
  - func: equal(Tensor self, Tensor other) -> bool
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EqualKernelNpu.cpp, opapi/EqualKernelNpuOpApi.cpp
  - func: erf(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ErfKernelNpu.cpp, opapi/ErfKernelNpuOpApi.cpp
  - func: erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ErfKernelNpu.cpp, opapi/ErfKernelNpuOpApi.cpp
  - func: erf_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ErfKernelNpu.cpp, opapi/ErfKernelNpuOpApi.cpp
  - func: erfc(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ErfcKernelNpu.cpp, opapi/ErfcKernelNpuOpApi.cpp
  - func: erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ErfcKernelNpu.cpp, opapi/ErfcKernelNpuOpApi.cpp
  - func: erfc_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ErfcKernelNpu.cpp, opapi/ErfcKernelNpuOpApi.cpp
  - func: erfinv(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ErfinvKernelNpu.cpp, opapi/ErfinvKernelNpuOpApi.cpp
  - func: erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ErfinvKernelNpu.cpp, opapi/ErfinvKernelNpuOpApi.cpp
  - func: erfinv_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ErfinvKernelNpu.cpp, opapi/ErfinvKernelNpuOpApi.cpp
  - func: exp(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ExpKernelNpu.cpp, opapi/ExpKernelNpuOpApi.cpp
  - func: exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ExpKernelNpu.cpp, opapi/ExpKernelNpuOpApi.cpp
  - func: exp2(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Exp2KernelNpu.cpp, opapi/Exp2KernelNpuOpApi.cpp
  - func: exp2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Exp2KernelNpu.cpp, opapi/Exp2KernelNpuOpApi.cpp
  - func: exp2_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Exp2KernelNpu.cpp, opapi/Exp2KernelNpuOpApi.cpp
  - func: exp_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ExpKernelNpu.cpp, opapi/ExpKernelNpuOpApi.cpp
  - func: expm1(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Expm1KernelNpu.cpp, opapi/Expm1KernelNpuOpApi.cpp
  - func: expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Expm1KernelNpu.cpp, opapi/Expm1KernelNpuOpApi.cpp
  - func: expm1_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Expm1KernelNpu.cpp, opapi/Expm1KernelNpuOpApi.cpp
  - func: exponential_(Tensor(a!) self, float lambd=1, *, Generator? generator=None) -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ExponentialKernelNpuOpApi.cpp
  - func: eye(SymInt n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: eye.m(SymInt n, SymInt m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: eye.m_out(SymInt n, SymInt m, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: eye.out(SymInt n, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: fake_quantize_per_channel_affine_cachemask(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor output, Tensor mask)
    impl_ns: op_api, op_api
    version: v2.1, v2.2
    kernel: opapi/FakeQuantizeKernelNpuOpApi.cpp
  - func: fft_fftshift(Tensor self, int[1]? dim=None) -> Tensor
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FFTShiftKernelNpuOpApi.cpp
  - func: fft_ifftshift(Tensor self, int[1]? dim=None) -> Tensor
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FFTShiftKernelNpuOpApi.cpp
  - func: fft_rfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/FftRfftKernelNpuOpApi.cpp
  - func: fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool2dBackwardKernelNpu.cpp, opapi/FillKernelNpuOpApi.cpp
  - func: fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool2dBackwardKernelNpu.cpp, opapi/FillKernelNpuOpApi.cpp
  - func: fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FillDiagonalKernelNpu.cpp, opapi/FillDiagonalKernelNpuOpApi.cpp
  - func: flip(Tensor self, int[] dims) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FlipKernelNpu.cpp, opapi/FlipKernelNpuOpApi.cpp
  - func: floor(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FloorKernelNpu.cpp, opapi/FloorKernelNpuOpApi.cpp
  - func: floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FloorKernelNpu.cpp, opapi/FloorKernelNpuOpApi.cpp
  - func: floor_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FloorKernelNpu.cpp, opapi/FloorKernelNpuOpApi.cpp
  - func: floor_divide(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DivKernelNpu.cpp, opapi/FloorDivideKernelNpuOpApi.cpp
  - func: floor_divide.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DivKernelNpu.cpp, opapi/FloorDivideKernelNpuOpApi.cpp
  - func: floor_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DivKernelNpu.cpp, opapi/FloorDivideKernelNpuOpApi.cpp
  - func: floor_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DivKernelNpu.cpp, opapi/FloorDivideKernelNpuOpApi.cpp
  - func: floor_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DivKernelNpu.cpp, opapi/FloorDivideKernelNpuOpApi.cpp
  - func: fmod.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FmodKernelNpu.cpp, opapi/FmodKernelNpuOpApi.cpp
  - func: fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FmodKernelNpu.cpp, opapi/FmodKernelNpuOpApi.cpp
  - func: fmod.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FmodKernelNpu.cpp, opapi/FmodKernelNpuOpApi.cpp
  - func: fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FmodKernelNpu.cpp, opapi/FmodKernelNpuOpApi.cpp
  - func: fmod_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FmodKernelNpu.cpp, opapi/FmodKernelNpuOpApi.cpp
  - func: fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FmodKernelNpu.cpp, opapi/FmodKernelNpuOpApi.cpp
  - func: frac(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FracKernelNpu.cpp, opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FracKernelNpu.cpp, opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: frac_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FracKernelNpu.cpp, opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GatherKernelNpu.cpp, opapi/AllGatherBaseMatmulKernelNpuOpApi.cpp
  - func: gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GatherKernelNpu.cpp, opapi/AllGatherBaseMatmulKernelNpuOpApi.cpp
  - func: gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GatherKernelNpu.cpp, opapi/AllGatherBaseMatmulKernelNpuOpApi.cpp
  - func: gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GatherKernelNpu.cpp, opapi/AllGatherBaseMatmulKernelNpuOpApi.cpp
  - func: gcd.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GcdKernelNpu.cpp, opapi/GcdKernelNpuOpApi.cpp
  - func: ge.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool1dKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool1dKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: ge.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool1dKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool1dKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GeKernelNpu.cpp, opapi/GeKernelNpuOpApi.cpp
  - func: ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GeKernelNpu.cpp, opapi/GeKernelNpuOpApi.cpp
  - func: gelu(Tensor self) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/FastGeluKernelNpu.cpp, opapi/GeluKernelNpuOpApi.cpp
  - func: gelu(Tensor self, *, str approximate='none') -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FastGeluKernelNpu.cpp, opapi/GeluKernelNpuOpApi.cpp
  - func: gelu.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/FastGeluKernelNpu.cpp, opapi/GeluKernelNpuOpApi.cpp
  - func: gelu_backward(Tensor grad_output, Tensor self) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/FastGeluKernelNpu.cpp, opapi/GeluBackwardKernelNpuOpApi.cpp
  - func: gelu_backward(Tensor grad_output, Tensor self, *, str approximate='none') -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/FastGeluKernelNpu.cpp, opapi/GeluBackwardKernelNpuOpApi.cpp
  - func: glu(Tensor self, int dim=-1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GluKernelNpu.cpp, opapi/GeGluKernelNpuOpApi.cpp
  - func: glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GluKernelNpu.cpp, opapi/GeGluKernelNpuOpApi.cpp
  - func: glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GluBackwardKernelNpu.cpp, opapi/GluGradKernelNpuOpApi.cpp
  - func: glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GluBackwardKernelNpu.cpp, opapi/GluGradKernelNpuOpApi.cpp
  - func: grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GridSampler2dKernelNpu.cpp, opapi/GridSampler2dKernelNpuOpApi.cpp
  - func: grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners, bool[2] output_mask) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GridSampler2dBackwardKernelNpu.cpp, opapi/GridSampler2dBackwardKernelNpuOpApi.cpp
  - func: grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GridSampler3dKernelNpu.cpp, opapi/GridSampler3dKernelNpuOpApi.cpp
  - func: grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/GridSampler3dBackwardKernelNpu.cpp, opapi/GridSampler3dBackwardKernelNpuOpApi.cpp
  - func: grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners, bool[2] output_mask) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GridSampler3dBackwardKernelNpu.cpp, opapi/GridSampler3dBackwardKernelNpuOpApi.cpp
  - func: gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/GruKernelNpu.cpp
  - func: gt.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GtKernelNpu.cpp, opapi/GtKernelNpuOpApi.cpp
  - func: gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GtKernelNpu.cpp, opapi/GtKernelNpuOpApi.cpp
  - func: gt.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GtKernelNpu.cpp, opapi/GtKernelNpuOpApi.cpp
  - func: gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GtKernelNpu.cpp, opapi/GtKernelNpuOpApi.cpp
  - func: gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GtKernelNpu.cpp, opapi/GtKernelNpuOpApi.cpp
  - func: gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GtKernelNpu.cpp, opapi/GtKernelNpuOpApi.cpp
  - func: hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardShrinkKernelNpu.cpp, opapi/HardShrinkKernelNpuOpApi.cpp
  - func: hardshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardShrinkKernelNpu.cpp, opapi/HardShrinkKernelNpuOpApi.cpp
  - func: hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardShrinkBackwardKernelNpu.cpp, opapi/HardshrinkBackwardKernelNpuOpApi.cpp
  - func: hardshrink_backward.grad_input(Tensor grad_out, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardShrinkBackwardKernelNpu.cpp, opapi/HardshrinkBackwardKernelNpuOpApi.cpp
  - func: hardsigmoid(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardsigmoidKernelNpu.cpp, opapi/HardSigmoidKernelNpuOpApi.cpp
  - func: hardsigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardsigmoidKernelNpu.cpp, opapi/HardSigmoidKernelNpuOpApi.cpp
  - func: hardsigmoid_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardsigmoidKernelNpu.cpp, opapi/HardSigmoidKernelNpuOpApi.cpp
  - func: hardsigmoid_backward(Tensor grad_output, Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardsigmoidBackwardKernelNpu.cpp, opapi/HardsigmoidBackwardKernelNpuOpApi.cpp
  - func: hardswish(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardSwishKernelNpu.cpp, opapi/HardSwishKernelNpuOpApi.cpp
  - func: hardswish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardSwishKernelNpu.cpp, opapi/HardSwishKernelNpuOpApi.cpp
  - func: hardswish_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardSwishKernelNpu.cpp, opapi/HardSwishKernelNpuOpApi.cpp
  - func: hardswish_backward(Tensor grad_output, Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardSwishBackwardKernelNpu.cpp, opapi/HardSwishBackwardKernelNpuOpApi.cpp
  - func: hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardtanhKernelNpu.cpp, opapi/HardtanhKernelNpuOpApi.cpp
  - func: hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/HardtanhKernelNpu.cpp
  - func: hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardtanhKernelNpu.cpp, opapi/HardtanhKernelNpuOpApi.cpp
  - func: hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardtanhBackwardKernelNpu.cpp, opapi/HardtanhBackwardKernelNpuOpApi.cpp
  - func: hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/HardtanhBackwardKernelNpu.cpp
  - func: histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HistcKernelNpu.cpp, opapi/HistcKernelNpuOpApi.cpp
  - func: histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HistcKernelNpu.cpp, opapi/HistcKernelNpuOpApi.cpp
  - func: im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Im2colKernelNpu.cpp, opapi/Im2colKernelNpuOpApi.cpp
  - func: im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Im2colKernelNpu.cpp, opapi/Im2colKernelNpuOpApi.cpp
  - func: im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/Col2imKernelNpu.cpp, opapi/Im2colBackwardKernelNpuOpApi.cpp
  - func: im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/Col2imKernelNpu.cpp, opapi/Im2colBackwardKernelNpuOpApi.cpp
  - func: index.Tensor(Tensor self, Tensor?[] indices) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexFillKernelNpu.cpp, opapi/IndexKernelNpuOpApi.cpp
  - func: index_add(Tensor self, int dim, Tensor index, Tensor source, *, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexAddKernelNpu.cpp, opapi/IndexAddKernelNpuOpApi.cpp
  - func: index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source, *, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/IndexAddKernelNpu.cpp
  - func: index_add.out(Tensor self, int dim, Tensor index, Tensor source, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexAddKernelNpu.cpp, opapi/IndexAddKernelNpuOpApi.cpp
  - func: index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source, *, Scalar alpha=1) -> Tensor(a!)
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/IndexAddKernelNpu.cpp
  - func: index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexCopyKernelNpu.cpp, opapi/IndexCopyKernelNpuOpApi.cpp
  - func: index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexCopyKernelNpu.cpp, opapi/IndexCopyKernelNpuOpApi.cpp
  - func: index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexFillKernelNpu.cpp, opapi/IndexFillKernelNpuOpApi.cpp
  - func: index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexFillKernelNpu.cpp, opapi/IndexFillKernelNpuOpApi.cpp
  - func: index_fill_.int_Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexFillKernelNpu.cpp, opapi/IndexFillKernelNpuOpApi.cpp
  - func: index_fill_.int_Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexFillKernelNpu.cpp, opapi/IndexFillKernelNpuOpApi.cpp
  - func: index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexPutKernelNpu.cpp, opapi/IndexPutKernelNpuOpApi.cpp
  - func: index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexPutKernelNpu.cpp, opapi/IndexPutKernelNpuOpApi.cpp
  - func: index_select(Tensor self, int dim, Tensor index) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexSelectKernelNpu.cpp, opapi/IndexSelectKernelNpuOpApi.cpp
  - func: index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexSelectKernelNpu.cpp, opapi/IndexSelectKernelNpuOpApi.cpp
  - func: index_select.dimname_out(Tensor self, Dimname dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexSelectKernelNpu.cpp, opapi/IndexSelectKernelNpuOpApi.cpp
  - func: index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexSelectKernelNpu.cpp, opapi/IndexSelectKernelNpuOpApi.cpp
  - func: inverse(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/InverseKernelNpu.cpp, opapi/InverseKernelNpuOpApi.cpp
  - func: inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/InverseKernelNpu.cpp, opapi/InverseKernelNpuOpApi.cpp
  - func: isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IscloseKernelNpu.cpp, opapi/IsCloseKernelNpuOpApi.cpp
  - func: isfinite(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AmpForeachNonFiniteCheckAndUnscaleKernelNpu.cpp, opapi/IsFiniteKernelNpuOpApi.cpp
  - func: isin.Scalar_Tensor_out(Scalar element, Tensor test_elements, *, bool assume_unique=False, bool invert=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IsInTensorScalarKernelNpu.cpp, opapi/IsInTensorScalarKernelNpuOpApi.cpp
  - func: isin.Tensor_Scalar(Tensor element, Scalar test_elements, *, bool assume_unique=False, bool invert=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IsInTensorScalarKernelNpu.cpp, opapi/IsInTensorScalarKernelNpuOpApi.cpp
  - func: isin.Tensor_Scalar_out(Tensor element, Scalar test_elements, *, bool assume_unique=False, bool invert=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IsInTensorScalarKernelNpu.cpp, opapi/IsInTensorScalarKernelNpuOpApi.cpp
  - func: isneginf(Tensor self) -> Tensor
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/IsNegInfKernelNpu.cpp
  - func: isneginf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IsNegInfKernelNpu.cpp, opapi/IsNegInfKernelNpuOpApi.cpp
  - func: isposinf(Tensor self) -> Tensor
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/IsPosInfKernelNpu.cpp
  - func: isposinf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IsPosInfKernelNpu.cpp, opapi/IsPosInfKernelNpuOpApi.cpp
  - func: kl_div(Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/KlDivKernelNpu.cpp, opapi/KlDivKernelNpuOpApi.cpp
  - func: kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/KlDivBackwardKernelNpu.cpp, opapi/KlDivBackwardKernelNpuOpApi.cpp
  - func: kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/KthvalueKernelNpu.cpp, opapi/KthvalueKernelNpuOpApi.cpp
  - func: kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/KthvalueKernelNpu.cpp, opapi/KthvalueKernelNpuOpApi.cpp
  - func: kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/KthvalueKernelNpu.cpp, opapi/KthvalueKernelNpuOpApi.cpp
  - func: kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/KthvalueKernelNpu.cpp, opapi/KthvalueKernelNpuOpApi.cpp
  - func: l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/L1LossKernelNpu.cpp, opapi/L1LossKernelNpuOpApi.cpp
  - func: l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/L1LossKernelNpu.cpp, opapi/L1LossKernelNpuOpApi.cpp
  - func: l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/L1LossBackwardKernelNpu.cpp, opapi/L1LossBackwardKernelNpuOpApi.cpp
  - func: l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/L1LossBackwardKernelNpu.cpp, opapi/L1LossBackwardKernelNpuOpApi.cpp
  - func: le.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LeKernelNpu.cpp, opapi/LeKernelNpuOpApi.cpp
  - func: le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LeKernelNpu.cpp, opapi/LeKernelNpuOpApi.cpp
  - func: le.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LeKernelNpu.cpp, opapi/LeKernelNpuOpApi.cpp
  - func: le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LeKernelNpu.cpp, opapi/LeKernelNpuOpApi.cpp
  - func: le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LeKernelNpu.cpp, opapi/LeKernelNpuOpApi.cpp
  - func: le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LeKernelNpu.cpp, opapi/LeKernelNpuOpApi.cpp
  - func: leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LeakyReluKernelNpu.cpp, opapi/LeakyReluKernelNpuOpApi.cpp
  - func: leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LeakyReluKernelNpu.cpp, opapi/LeakyReluKernelNpuOpApi.cpp
  - func: leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LeakyReluKernelNpu.cpp, opapi/LeakyReluKernelNpuOpApi.cpp
  - func: leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LeakyReluBackwardKernelNpu.cpp, opapi/LeakyReluKernelNpuOpApi.cpp
  - func: leaky_relu_backward.grad_input(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LeakyReluBackwardKernelNpu.cpp, opapi/LeakyReluKernelNpuOpApi.cpp
  - func: lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LerpKernelNpu.cpp, opapi/LerpKernelNpuOpApi.cpp
  - func: lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LerpKernelNpu.cpp, opapi/LerpKernelNpuOpApi.cpp
  - func: lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LerpKernelNpu.cpp, opapi/LerpKernelNpuOpApi.cpp
  - func: lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LerpKernelNpu.cpp, opapi/LerpKernelNpuOpApi.cpp
  - func: lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LerpKernelNpu.cpp, opapi/LerpKernelNpuOpApi.cpp
  - func: lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LerpKernelNpu.cpp, opapi/LerpKernelNpuOpApi.cpp
  - func: linalg_cross(Tensor self, Tensor other, *, int dim=-1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinalgCrossKernelNpu.cpp, opapi/LinalgCrossKernelNpuOpApi.cpp
  - func: linalg_cross.out(Tensor self, Tensor other, *, int dim=-1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinalgCrossKernelNpu.cpp, opapi/LinalgCrossKernelNpuOpApi.cpp
  - func: linalg_matrix_norm(Tensor self, Scalar ord, int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp
  - func: linalg_matrix_norm.out(Tensor self, Scalar ord, int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp
  - func: linalg_matrix_norm.str_ord(Tensor self, str ord='fro', int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp
  - func: linalg_matrix_norm.str_ord_out(Tensor self, str ord='fro', int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp
  - func: linalg_norm(Tensor self, Scalar? ord=None, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp
  - func: linalg_norm.ord_str(Tensor self, str ord, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp
  - func: linalg_norm.ord_str_out(Tensor self, str ord, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp
  - func: linalg_norm.out(Tensor self, Scalar? ord=None, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp
  - func: linalg_qr(Tensor self, str mode='reduced') -> (Tensor Q, Tensor R)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinalgQrKernelNpu.cpp, opapi/LinalgQrKernelNpuOpApi.cpp
  - func: linalg_qr.out(Tensor self, str mode='reduced', *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinalgQrKernelNpu.cpp, opapi/LinalgQrKernelNpuOpApi.cpp
  - func: linalg_slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/SlogdetKernelNpu.cpp, opapi/SlogdetKernelNpuOpApi.cpp
  - func: linalg_slogdet.out(Tensor self, *, Tensor(a!) sign, Tensor(b!) logabsdet) -> (Tensor(a!) sign, Tensor(b!) logabsdet)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/SlogdetKernelNpu.cpp, opapi/SlogdetKernelNpuOpApi.cpp
  - func: linalg_solve_triangular(Tensor self, Tensor B, *, bool upper, bool left=True, bool unitriangular=False) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/LinalgSolveTriangularKernelNpuOpApi.cpp
  - func: linalg_solve_triangular.out(Tensor self, Tensor B, *, bool upper, bool left=True, bool unitriangular=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/LinalgSolveTriangularKernelNpuOpApi.cpp
  - func: linalg_svdvals(Tensor A, *, str? driver=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp
  - func: linalg_svdvals.out(Tensor A, *, str? driver=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp
  - func: linalg_vector_norm(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp, opapi/LinalgNormKernelNpuOpApi.cpp
  - func: linalg_vector_norm.out(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinalgNormKernelNpu.cpp, opapi/LinalgNormKernelNpuOpApi.cpp
  - func: linspace(Scalar start, Scalar end, int steps, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinspaceKernelNpu.cpp, opapi/LinspaceKernelNpuOpApi.cpp
  - func: linspace.out(Scalar start, Scalar end, int steps, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinspaceKernelNpu.cpp, opapi/LinspaceKernelNpuOpApi.cpp
  - func: log(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogKernelNpu.cpp, opapi/LogKernelNpuOpApi.cpp
  - func: log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogKernelNpu.cpp, opapi/LogKernelNpuOpApi.cpp
  - func: log10(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Log10KernelNpu.cpp, opapi/Log10KernelNpuOpApi.cpp
  - func: log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Log10KernelNpu.cpp, opapi/Log10KernelNpuOpApi.cpp
  - func: log10_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Log10KernelNpu.cpp, opapi/Log10KernelNpuOpApi.cpp
  - func: log1p(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Log1pKernelNpu.cpp, opapi/Log1pKernelNpuOpApi.cpp
  - func: log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Log1pKernelNpu.cpp, opapi/Log1pKernelNpuOpApi.cpp
  - func: log1p_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Log1pKernelNpu.cpp, opapi/Log1pKernelNpuOpApi.cpp
  - func: log2(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Log2KernelNpu.cpp, opapi/Log2KernelNpuOpApi.cpp
  - func: log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Log2KernelNpu.cpp, opapi/Log2KernelNpuOpApi.cpp
  - func: log2_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Log2KernelNpu.cpp, opapi/Log2KernelNpuOpApi.cpp
  - func: log_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogKernelNpu.cpp, opapi/ExponentialKernelNpuOpApi.cpp
  - func: log_sigmoid(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSigmoidKernelNpu.cpp, opapi/LogSigmoidNpuOpApi.cpp
  - func: log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSigmoidKernelNpu.cpp, opapi/LogSigmoidNpuOpApi.cpp
  - func: log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSigmoidBackwardKernelNpu.cpp, opapi/LogSigmoidBackwardKernelNpuOpApi.cpp
  - func: log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSigmoidBackwardKernelNpu.cpp, opapi/LogSigmoidBackwardKernelNpuOpApi.cpp
  - func: log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSigmoidKernelNpu.cpp, opapi/LogSigmoidNpuOpApi.cpp
  - func: log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSigmoidKernelNpu.cpp, opapi/LogSigmoidNpuOpApi.cpp
  - func: log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LogSoftmaxKernelNpu.cpp
  - func: log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LogSoftmaxKernelNpu.cpp
  - func: logaddexp(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogAddExpKernelNpu.cpp, opapi/LogAddExpKernelNpuOpApi.cpp
  - func: logaddexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogAddExpKernelNpu.cpp, opapi/LogAddExpKernelNpuOpApi.cpp
  - func: logaddexp2(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogAddExp2KernelNpu.cpp, opapi/LogAddExp2KernelNpuOpApi.cpp
  - func: logaddexp2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogAddExp2KernelNpu.cpp, opapi/LogAddExp2KernelNpuOpApi.cpp
  - func: logdet(Tensor self) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/LogdetKernelNpu.cpp, opapi/LogdetKernelNpuOpApi.cpp
  - func: logical_and(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogicalAndKernelNpu.cpp, opapi/LogicalAndKernelNpuOpApi.cpp
  - func: logical_and.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogicalAndKernelNpu.cpp, opapi/LogicalAndKernelNpuOpApi.cpp
  - func: logical_and_(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogicalAndKernelNpu.cpp, opapi/LogicalAndKernelNpuOpApi.cpp
  - func: logical_not(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogicalNotKernelNpu.cpp, opapi/LogicalNotKernelNpuOpApi.cpp
  - func: logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogicalNotKernelNpu.cpp, opapi/LogicalNotKernelNpuOpApi.cpp
  - func: logical_not_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogicalNotKernelNpu.cpp, opapi/LogicalNotKernelNpuOpApi.cpp
  - func: logical_or(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogicalOrKernelNpu.cpp, opapi/LogicalOrKernelNpuOpApi.cpp
  - func: logical_or.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogicalOrKernelNpu.cpp, opapi/LogicalOrKernelNpuOpApi.cpp
  - func: logical_or_(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogicalOrKernelNpu.cpp, opapi/LogicalOrKernelNpuOpApi.cpp
  - func: logical_xor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogicalXorkernelNpu.cpp, opapi/LogicalXorKernelNpuOpApi.cpp
  - func: logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogicalXorkernelNpu.cpp, opapi/LogicalXorKernelNpuOpApi.cpp
  - func: logspace(Scalar start, Scalar end, int steps, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LogSpaceKernelNpu.cpp
  - func: logspace.out(Scalar start, Scalar end, int steps, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LogSpaceKernelNpu.cpp
  - func: logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSumExpKernelNpu.cpp, opapi/LogSumExpKernelNpuOpApi.cpp
  - func: logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSumExpKernelNpu.cpp, opapi/LogSumExpKernelNpuOpApi.cpp
  - func: logsumexp.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSumExpKernelNpu.cpp, opapi/LogSumExpKernelNpuOpApi.cpp
  - func: logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSumExpKernelNpu.cpp, opapi/LogSumExpKernelNpuOpApi.cpp
  - func: lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LstmKernelNpu.cpp
  - func: lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LstmKernelNpu.cpp
  - func: lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LstmCellKernelNpu.cpp
  - func: lt.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: lt.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EyeKernelNpu.cpp, opapi/EyeKernelNpuOpApi.cpp
  - func: lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LtKernelNpu.cpp, opapi/LtKernelNpuOpApi.cpp
  - func: lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LtKernelNpu.cpp, opapi/LtKernelNpuOpApi.cpp
  - func: masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSumExpKernelNpu.cpp, opapi/MaskedFillKernelNpuOpApi.cpp
  - func: masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LogSumExpKernelNpu.cpp, opapi/MaskedFillKernelNpuOpApi.cpp
  - func: masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaskedScatterKernelNpu.cpp, opapi/MaskedScatterKernelNpuOpApi.cpp
  - func: masked_select(Tensor self, Tensor mask) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaskedSelectKernelNpu.cpp, opapi/MaskedSelectKernelNpuOpApi.cpp
  - func: masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaskedSelectKernelNpu.cpp, opapi/MaskedSelectKernelNpuOpApi.cpp
  - func: matmul(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Conv2dBackwardKernelNpu.cpp, opapi/GroupedMatmulKernelNpuOpApi.cpp
  - func: matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/Conv2dBackwardKernelNpu.cpp, opapi/GroupedMatmulKernelNpuOpApi.cpp
  - func: matmul_backward(Tensor grad, Tensor self, Tensor other, bool[2] mask) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MatmulBackwardKernelNpu.cpp, opapi/MatmulBackwardKernelNpuOpApi.cpp
  - func: max(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    sparse: op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgmaxKernelNpu.cpp, opapi/AmaxKernelNpuOpApi.cpp
  - func: max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgmaxKernelNpu.cpp, opapi/AmaxKernelNpuOpApi.cpp
  - func: max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgmaxKernelNpu.cpp, opapi/AmaxKernelNpuOpApi.cpp
  - func: max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgmaxKernelNpu.cpp, opapi/AmaxKernelNpuOpApi.cpp
  - func: max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgmaxKernelNpu.cpp, opapi/AmaxKernelNpuOpApi.cpp
  - func: max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    sparse: op_api
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgmaxKernelNpu.cpp, opapi/AmaxKernelNpuOpApi.cpp
  - func: max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaxPool2dWithIndicesKernelNpu.cpp, opapi/MaxPool2dWithIndicesKernelNpuOpApi.cpp
  - func: max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaxPool2dWithIndicesKernelNpu.cpp, opapi/MaxPool2dWithIndicesKernelNpuOpApi.cpp
  - func: max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaxPool2dWithIndicesBackwardKernelNpu.cpp, opapi/MaxPool2dWithIndicesBackwardKernelNpuOpApi.cpp
  - func: max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaxPool2dWithIndicesBackwardKernelNpu.cpp, opapi/MaxPool2dWithIndicesBackwardKernelNpuOpApi.cpp
  - func: max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MaxPool3dWithIndicesKernelNpu.cpp
  - func: max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MaxPool3dWithIndicesKernelNpu.cpp
  - func: max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MaxPool3dWithIndicesBackwardKernelNpu.cpp
  - func: max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MaxPool3dWithIndicesBackwardKernelNpu.cpp
  - func: max_unpool2d(Tensor self, Tensor indices, SymInt[2] output_size) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaxUnpool2dKernelNpu.cpp, opapi/MaxUnpool2dKernelNpuOpApi.cpp
  - func: max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> Tensor
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/MaxUnpool2dKernelNpu.cpp, opapi/MaxUnpool2dKernelNpuOpApi.cpp
  - func: max_unpool2d.out(Tensor self, Tensor indices, SymInt[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaxUnpool2dKernelNpu.cpp, opapi/MaxUnpool2dKernelNpuOpApi.cpp
  - func: max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/MaxUnpool2dKernelNpu.cpp, opapi/MaxUnpool2dKernelNpuOpApi.cpp
  - func: max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> Tensor
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/MaxUnpool2dBackwardKernelNpu.cpp, opapi/MaxUnpool2dBackwardKernelNpuOpApi.cpp
  - func: max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/MaxUnpool2dBackwardKernelNpu.cpp, opapi/MaxUnpool2dBackwardKernelNpuOpApi.cpp
  - func: max_unpool3d(Tensor self, Tensor indices, SymInt[3] output_size, int[3] stride, int[3] padding) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaxUnpool3dKernelNpu.cpp, opapi/MaxUnpool3dKernelNpuOpApi.cpp
  - func: max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/MaxUnpool3dKernelNpu.cpp, opapi/MaxUnpool3dKernelNpuOpApi.cpp
  - func: max_unpool3d.out(Tensor self, Tensor indices, SymInt[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaxUnpool3dKernelNpu.cpp, opapi/MaxUnpool3dKernelNpuOpApi.cpp
  - func: max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/MaxUnpool3dKernelNpu.cpp, opapi/MaxUnpool3dKernelNpuOpApi.cpp
  - func: max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/MaxUnpool3dBackwardKernelNpu.cpp, opapi/MaxUnpool3dBackwardKernelNpuOpApi.cpp
  - func: max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/MaxUnpool3dBackwardKernelNpu.cpp, opapi/MaxUnpool3dBackwardKernelNpuOpApi.cpp
  - func: maximum(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaxKernelNpu.cpp, opapi/ForeachMaximumKernelNpuOpApi.cpp
  - func: maximum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MaxKernelNpu.cpp, opapi/ForeachMaximumKernelNpuOpApi.cpp
  - func: mean(Tensor self, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: mean.dim(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: mean.names_dim(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: mean.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: mean.out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: mean.out(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool3dKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: median(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MedianKernelNpu.cpp, opapi/MedianKernelNpuOpApi.cpp
  - func: median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MedianKernelNpu.cpp, opapi/MedianKernelNpuOpApi.cpp
  - func: median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MedianKernelNpu.cpp, opapi/MedianKernelNpuOpApi.cpp
  - func: min(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgminKernelNpu.cpp, opapi/AminKernelNpuOpApi.cpp
  - func: min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgminKernelNpu.cpp, opapi/AminKernelNpuOpApi.cpp
  - func: min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgminKernelNpu.cpp, opapi/AminKernelNpuOpApi.cpp
  - func: min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgminKernelNpu.cpp, opapi/AminKernelNpuOpApi.cpp
  - func: min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgminKernelNpu.cpp, opapi/AminKernelNpuOpApi.cpp
  - func: min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgminKernelNpu.cpp, opapi/AminKernelNpuOpApi.cpp
  - func: minimum(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MinKernelNpu.cpp, opapi/ForeachMinimumKernelNpuOpApi.cpp
  - func: minimum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MinKernelNpu.cpp, opapi/ForeachMinimumKernelNpuOpApi.cpp
  - func: mish(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MishKernelNpu.cpp, opapi/MishKernelNpuOpApi.cpp
  - func: mish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MishKernelNpu.cpp, opapi/MishKernelNpuOpApi.cpp
  - func: mish_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MishV2KernelNpu.cpp, opapi/MishKernelNpuOpApi.cpp
  - func: mish_backward(Tensor grad_output, Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MishBackwardV2KernelNpu.cpp, opapi/MishBackwardKernelNpuOpApi.cpp
  - func: mm(Tensor self, Tensor mat2) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddbmmKernelNpu.cpp, opapi/AddbmmKernelNpuOpApi.cpp
  - func: mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddbmmKernelNpu.cpp, opapi/AddbmmKernelNpuOpApi.cpp
  - func: mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MseLossKernelNpu.cpp, opapi/MseLossKernelNpuOpApi.cpp
  - func: mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MseLossKernelNpu.cpp, opapi/MseLossKernelNpuOpApi.cpp
  - func: mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MseLossBackwardKernelNpu.cpp, opapi/MseLossBackwardKernelNpuOpApi.cpp
  - func: mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MseLossBackwardKernelNpu.cpp, opapi/MseLossBackwardKernelNpuOpApi.cpp
  - func: mul.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddbmmKernelNpu.cpp, opapi/AddcmulKernelNpuOpApi.cpp
  - func: mul.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddbmmKernelNpu.cpp, opapi/AddcmulKernelNpuOpApi.cpp
  - func: mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddbmmKernelNpu.cpp, opapi/AddcmulKernelNpuOpApi.cpp
  - func: mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool2dBackwardKernelNpu.cpp, opapi/AddcmulKernelNpuOpApi.cpp
  - func: mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AdaptiveAvgPool2dBackwardKernelNpu.cpp, opapi/AddcmulKernelNpuOpApi.cpp
  - func: multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LossKernelNpu.cpp, opapi/MultilabelMarginLossKernelNpuOpApi.cpp
  - func: multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LossKernelNpu.cpp, opapi/MultilabelMarginLossKernelNpuOpApi.cpp
  - func: multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LossKernelNpu.cpp, opapi/MultilabelMarginLossKernelNpuOpApi.cpp
  - func: multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LossKernelNpu.cpp, opapi/MultilabelMarginLossKernelNpuOpApi.cpp
  - func: multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MultinomialKernelNpu.cpp, opapi/MultinomialKernelNpuOpApi.cpp
  - func: multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MultinomialKernelNpu.cpp, opapi/MultinomialKernelNpuOpApi.cpp
  - func: mv(Tensor self, Tensor vec) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddmvKernelNpu.cpp, opapi/AddmvKernelNpuOpApi.cpp
  - func: mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddmvKernelNpu.cpp, opapi/AddmvKernelNpuOpApi.cpp
  - func: nan_to_num(Tensor self, float? nan=None, float? posinf=None, float? neginf=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NanToNumKernelNpu.cpp, opapi/NanToNumKernelNpuOpApi.cpp
  - func: nan_to_num.out(Tensor self, float? nan=None, float? posinf=None, float? neginf=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NanToNumKernelNpu.cpp, opapi/NanToNumKernelNpuOpApi.cpp
  - func: nan_to_num_(Tensor(a!) self, float? nan=None, float? posinf=None, float? neginf=None) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NanToNumKernelNpu.cpp, opapi/NanToNumKernelNpuOpApi.cpp
  - func: nanmedian(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MedianKernelNpu.cpp, opapi/MedianKernelNpuOpApi.cpp
  - func: nanmedian.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/MedianKernelNpu.cpp, opapi/MedianKernelNpuOpApi.cpp
  - func: nansum(Tensor self, *, ScalarType? dtype=None) -> Tensor
    impl_ns: op_api
    version: v1.11
    kernel: opapi/NansumKernelNpuOpApi.cpp
  - func: nansum(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/NansumKernelNpuOpApi.cpp
  - func: nansum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api
    version: v1.11
    kernel: opapi/NansumKernelNpuOpApi.cpp
  - func: nansum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: op_api
    version: v1.11
    kernel: opapi/NansumKernelNpuOpApi.cpp
  - func: nansum.out(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/NansumKernelNpuOpApi.cpp
  - func: native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormElemtKernelNpu.cpp, opapi/BatchNormKernelOpApi.cpp
  - func: native_batch_norm.out(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormElemtKernelNpu.cpp, opapi/BatchNormKernelOpApi.cpp
  - func: native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormBackwardKernelNpu.cpp, opapi/BatchNormBackwardKernelNpuOpApi.cpp
  - func: native_dropout(Tensor input, float p, bool? train) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NativeDropoutKernelNpu.cpp, opapi/NativeDropoutKernelNpuOpApi.cpp
  - func: native_dropout_backward(Tensor grad_output, Tensor mask, float scale) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NativeDropoutKernelNpu.cpp, opapi/NativeDropoutKernelNpuOpApi.cpp
  - func: native_group_norm(Tensor input, Tensor? weight, Tensor? bias, int N, int C, int HxW, int group, float eps) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GroupNormKernelNpu.cpp, opapi/GroupNormKernelNpuOpApi.cpp
  - func: native_group_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int N, int C, int HxW, int group, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GroupNormBackwardKernelNpu.cpp, opapi/GroupNormBackwardKernelNpuOpApi.cpp
  - func: native_layer_norm(Tensor input, SymInt[] normalized_shape, Tensor? weight, Tensor? bias, float eps) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LayerNormKernelNpu.cpp, opapi/LayerNormKernelNpuOpApi.cpp
  - func: native_layer_norm(Tensor input, int[] normalized_shape, Tensor? weight, Tensor? bias, float eps) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/LayerNormKernelNpu.cpp, opapi/LayerNormKernelNpuOpApi.cpp
  - func: native_layer_norm_backward(Tensor grad_out, Tensor input, SymInt[] normalized_shape, Tensor mean, Tensor rstd, Tensor? weight, Tensor? bias, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LayerNormBackwardKernelNpu.cpp, opapi/LayerNormBackwardKernelNpuOpApi.cpp
  - func: native_layer_norm_backward(Tensor grad_out, Tensor input, int[] normalized_shape, Tensor mean, Tensor rstd, Tensor? weight, Tensor? bias, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/LayerNormBackwardKernelNpu.cpp, opapi/LayerNormBackwardKernelNpuOpApi.cpp
  - func: ne.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddKernelNpu.cpp, opapi/CastKernelNpuOpApi.cpp
  - func: ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddKernelNpu.cpp, opapi/CastKernelNpuOpApi.cpp
  - func: ne.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddKernelNpu.cpp, opapi/CastKernelNpuOpApi.cpp
  - func: ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddKernelNpu.cpp, opapi/CastKernelNpuOpApi.cpp
  - func: ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NeKernelNpu.cpp, opapi/NeKernelNpuOpApi.cpp
  - func: ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NeKernelNpu.cpp, opapi/NeKernelNpuOpApi.cpp
  - func: neg(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ForeachNegKernelNpuOpApi.cpp
  - func: neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp, opapi/ForeachNegKernelNpuOpApi.cpp
  - func: neg_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NegKernelNpu.cpp, opapi/FFTc2cKernelNpuOpApi.cpp
  - func: nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, SymInt ignore_index=-100) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LossKernelNpu.cpp
  - func: nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/LossKernelNpu.cpp
  - func: nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, SymInt ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LossKernelNpu.cpp
  - func: nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/LossKernelNpu.cpp
  - func: nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, SymInt ignore_index=-100) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LossKernelNpu.cpp
  - func: nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/LossKernelNpu.cpp
  - func: nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, SymInt ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LossKernelNpu.cpp
  - func: nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/LossKernelNpu.cpp
  - func: nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NLLLoss2dBackwardKernelNpu.cpp, opapi/NLLLoss2dBackwardKernelNpuOpApi.cpp
  - func: nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/NLLLoss2dBackwardKernelNpu.cpp, opapi/NLLLoss2dBackwardKernelNpuOpApi.cpp
  - func: nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NLLLoss2dBackwardKernelNpu.cpp, opapi/NLLLoss2dBackwardKernelNpuOpApi.cpp
  - func: nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/NLLLoss2dBackwardKernelNpu.cpp, opapi/NLLLoss2dBackwardKernelNpuOpApi.cpp
  - func: nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index) -> (Tensor output, Tensor total_weight)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LossKernelNpu.cpp, opapi/NLLLoss2dKernelNpuOpApi.cpp
  - func: nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/LossKernelNpu.cpp, opapi/NLLLoss2dKernelNpuOpApi.cpp
  - func: nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LossKernelNpu.cpp, opapi/NLLLoss2dKernelNpuOpApi.cpp
  - func: nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/LossKernelNpu.cpp, opapi/NLLLoss2dKernelNpuOpApi.cpp
  - func: nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NLLLossBackwardKernelNpu.cpp, opapi/NLLLossBackwardKernelNpuOpApi.cpp
  - func: nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/NLLLossBackwardKernelNpu.cpp, opapi/NLLLossBackwardKernelNpuOpApi.cpp
  - func: nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NLLLossBackwardKernelNpu.cpp, opapi/NLLLossBackwardKernelNpuOpApi.cpp
  - func: nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/NLLLossBackwardKernelNpu.cpp, opapi/NLLLossBackwardKernelNpuOpApi.cpp
  - func: nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index) -> (Tensor output, Tensor total_weight)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LossKernelNpu.cpp, opapi/NLLLossKernelNpuOpApi.cpp
  - func: nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/LossKernelNpu.cpp, opapi/NLLLossKernelNpuOpApi.cpp
  - func: nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, SymInt ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LossKernelNpu.cpp, opapi/NLLLossKernelNpuOpApi.cpp
  - func: nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/LossKernelNpu.cpp, opapi/NLLLossKernelNpuOpApi.cpp
  - func: nonzero(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CountNonZeroKernelNpu.cpp, opapi/CountNonZeroKernelNpuOpApi.cpp
  - func: nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CountNonZeroKernelNpu.cpp, opapi/CountNonZeroKernelNpuOpApi.cpp
  - func: norm.Scalar(Tensor self, Scalar p=2) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddLayerNormNpu.cpp, opapi/AddLayerNormKernelNpuOpApi.cpp
  - func: norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddLayerNormNpu.cpp, opapi/AddLayerNormKernelNpuOpApi.cpp
  - func: norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddLayerNormNpu.cpp, opapi/AddLayerNormKernelNpuOpApi.cpp
  - func: norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddLayerNormNpu.cpp, opapi/AddLayerNormKernelNpuOpApi.cpp
  - func: norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddLayerNormNpu.cpp, opapi/AddLayerNormKernelNpuOpApi.cpp
  - func: norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddLayerNormNpu.cpp, opapi/AddLayerNormKernelNpuOpApi.cpp
  - func: normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NormalKernelNpu.cpp, opapi/NormalKernelNpuOpApi.cpp
  - func: normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NormalKernelNpu.cpp, opapi/NormalKernelNpuOpApi.cpp
  - func: normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NormalKernelNpu.cpp, opapi/NormalKernelNpuOpApi.cpp
  - func: normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NormalKernelNpu.cpp, opapi/NormalKernelNpuOpApi.cpp
  - func: normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NormalKernelNpu.cpp, opapi/NormalKernelNpuOpApi.cpp
  - func: normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NormalKernelNpu.cpp, opapi/NormalKernelNpuOpApi.cpp
  - func: normal.float_float(float mean, float std, SymInt[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NormalKernelNpu.cpp, opapi/NormalKernelNpuOpApi.cpp
  - func: normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/NormalKernelNpu.cpp, opapi/NormalKernelNpuOpApi.cpp
  - func: normal.float_float_out(float mean, float std, SymInt[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NormalKernelNpu.cpp, opapi/NormalKernelNpuOpApi.cpp
  - func: normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/NormalKernelNpu.cpp, opapi/NormalKernelNpuOpApi.cpp
  - func: normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/NormalKernelNpu.cpp, opapi/NormalKernelNpuOpApi.cpp
  - func: one_hot(Tensor self, int num_classes=-1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/OneHotKernelNpu.cpp, opapi/OneHotKernelNpuOpApi.cpp
  - func: ones(SymInt[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormBackwardKernelNpu.cpp, opapi/LayerNormBackwardKernelNpuOpApi.cpp
  - func: ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/BatchNormBackwardKernelNpu.cpp, opapi/LayerNormBackwardKernelNpuOpApi.cpp
  - func: ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormBackwardKernelNpu.cpp, opapi/LayerNormBackwardKernelNpuOpApi.cpp
  - func: ones.out(SymInt[] size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BatchNormBackwardKernelNpu.cpp, opapi/LayerNormBackwardKernelNpuOpApi.cpp
  - func: ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/BatchNormBackwardKernelNpu.cpp, opapi/LayerNormBackwardKernelNpuOpApi.cpp
  - func: ones_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/OnesLikeKernelNpu.cpp, opapi/OnesLikeKernelNpuOpApi.cpp
  - func: pdist(Tensor self, float p=2) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PdistKernelNpu.cpp, opapi/PdistKernelNpuOpApi.cpp
  - func: pow.Scalar(Scalar self, Tensor exponent) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PowKernelNpu.cpp, opapi/ForeachPowKernelNpuOpApi.cpp
  - func: pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PowKernelNpu.cpp, opapi/ForeachPowKernelNpuOpApi.cpp
  - func: pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PowKernelNpu.cpp, opapi/ForeachPowKernelNpuOpApi.cpp
  - func: pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PowKernelNpu.cpp, opapi/ForeachPowKernelNpuOpApi.cpp
  - func: pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PowKernelNpu.cpp, opapi/ForeachPowKernelNpuOpApi.cpp
  - func: pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PowKernelNpu.cpp, opapi/ForeachPowKernelNpuOpApi.cpp
  - func: pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PowKernelNpu.cpp, opapi/ForeachPowKernelNpuOpApi.cpp
  - func: pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/PowKernelNpu.cpp, opapi/ForeachPowKernelNpuOpApi.cpp
  - func: polar(Tensor abs, Tensor angle) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/PolarKernelNpuOpApi.cpp
  - func: polar.out(Tensor abs, Tensor angle, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/PolarKernelNpuOpApi.cpp
  - func: prelu(Tensor self, Tensor weight) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/PreluKernelNpu.cpp, opapi/PreluKernelNpuOpApi.cpp
  - func: prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/PreluBackwardKernelNpu.cpp, opapi/PreluBackwardKernelNpuOpApi.cpp
  - func: prod(Tensor self, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CumprodKernelNpu.cpp, opapi/ProdKernelNpuOpApi.cpp
  - func: prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CumprodKernelNpu.cpp, opapi/ProdKernelNpuOpApi.cpp
  - func: prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CumprodKernelNpu.cpp, opapi/ProdKernelNpuOpApi.cpp
  - func: put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/IndexPutKernelNpu.cpp, opapi/IndexPutKernelNpuOpApi.cpp
  - func: quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/QuantizePerChannelKernelNpu.cpp
  - func: quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/QuantizePerTensorKernelNpu.cpp
  - func: random_(Tensor(a!) self, *, Generator? generator=None) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RandomKernelNpu.cpp, opapi/RandomKernelNpuOpApi.cpp
  - func: random_.from(Tensor(a!) self, int from, int? to, *, Generator? generator=None) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RandomKernelNpu.cpp, opapi/RandomKernelNpuOpApi.cpp
  - func: random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RandomKernelNpu.cpp, opapi/RandomKernelNpuOpApi.cpp
  - func: randperm(SymInt n, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RandpermKernelNpu.cpp, opapi/RandpermKernelNpuOpApi.cpp
  - func: randperm(int n, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/RandpermKernelNpu.cpp, opapi/RandpermKernelNpuOpApi.cpp
  - func: randperm.generator(SymInt n, *, Generator? generator, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RandpermKernelNpu.cpp, opapi/RandpermKernelNpuOpApi.cpp
  - func: randperm.generator(int n, *, Generator? generator, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/RandpermKernelNpu.cpp, opapi/RandpermKernelNpuOpApi.cpp
  - func: randperm.generator_out(SymInt n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RandpermKernelNpu.cpp, opapi/RandpermKernelNpuOpApi.cpp
  - func: randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/RandpermKernelNpu.cpp, opapi/RandpermKernelNpuOpApi.cpp
  - func: randperm.out(SymInt n, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RandpermKernelNpu.cpp, opapi/RandpermKernelNpuOpApi.cpp
  - func: randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/RandpermKernelNpu.cpp, opapi/RandpermKernelNpuOpApi.cpp
  - func: range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArangeKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArangeKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArangeKernelNpu.cpp, opapi/ArangeKernelNpuOpApi.cpp
  - func: reciprocal(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReciprocalKernelNpu.cpp, opapi/ReciprocalKernelNpuOpApi.cpp
  - func: reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReciprocalKernelNpu.cpp, opapi/ReciprocalKernelNpuOpApi.cpp
  - func: reciprocal_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReciprocalKernelNpu.cpp, opapi/ReciprocalKernelNpuOpApi.cpp
  - func: reflection_pad1d(Tensor self, SymInt[2] padding) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReflectionPad1dKernelNpu.cpp, opapi/ReflectionPad1dKernelNpuOpApi.cpp
  - func: reflection_pad1d(Tensor self, int[2] padding) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReflectionPad1dKernelNpu.cpp, opapi/ReflectionPad1dKernelNpuOpApi.cpp
  - func: reflection_pad1d.out(Tensor self, SymInt[2] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReflectionPad1dKernelNpu.cpp, opapi/ReflectionPad1dKernelNpuOpApi.cpp
  - func: reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReflectionPad1dKernelNpu.cpp, opapi/ReflectionPad1dKernelNpuOpApi.cpp
  - func: reflection_pad1d_backward(Tensor grad_output, Tensor self, SymInt[2] padding) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReflectionPad1dBackwardKernelNpu.cpp, opapi/ReflectionPad1dBackwardKernelNpuOpApi.cpp
  - func: reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReflectionPad1dBackwardKernelNpu.cpp, opapi/ReflectionPad1dBackwardKernelNpuOpApi.cpp
  - func: reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReflectionPad1dBackwardKernelNpu.cpp, opapi/ReflectionPad1dBackwardKernelNpuOpApi.cpp
  - func: reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReflectionPad1dBackwardKernelNpu.cpp, opapi/ReflectionPad1dBackwardKernelNpuOpApi.cpp
  - func: reflection_pad2d(Tensor self, SymInt[4] padding) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReflectionPad1dKernelNpu.cpp, opapi/ReflectionPad2dKernelNpuOpApi.cpp
  - func: reflection_pad2d(Tensor self, int[4] padding) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReflectionPad1dKernelNpu.cpp, opapi/ReflectionPad2dKernelNpuOpApi.cpp
  - func: reflection_pad2d.out(Tensor self, SymInt[4] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReflectionPad1dKernelNpu.cpp, opapi/ReflectionPad2dKernelNpuOpApi.cpp
  - func: reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReflectionPad1dKernelNpu.cpp, opapi/ReflectionPad2dKernelNpuOpApi.cpp
  - func: reflection_pad2d_backward(Tensor grad_output, Tensor self, SymInt[4] padding) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReflectionPad1dBackwardKernelNpu.cpp, opapi/ReflectionPad2dBackwardKernelNpuOpApi.cpp
  - func: reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReflectionPad1dBackwardKernelNpu.cpp, opapi/ReflectionPad2dBackwardKernelNpuOpApi.cpp
  - func: reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReflectionPad1dBackwardKernelNpu.cpp, opapi/ReflectionPad2dBackwardKernelNpuOpApi.cpp
  - func: reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReflectionPad1dBackwardKernelNpu.cpp, opapi/ReflectionPad2dBackwardKernelNpuOpApi.cpp
  - func: reflection_pad3d(Tensor self, SymInt[6] padding) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReflectionPad3dKernelNpu.cpp, opapi/ReflectionPad3dKernelNpuOpApi.cpp
  - func: reflection_pad3d(Tensor self, int[6] padding) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReflectionPad3dKernelNpu.cpp, opapi/ReflectionPad3dKernelNpuOpApi.cpp
  - func: reflection_pad3d.out(Tensor self, SymInt[6] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReflectionPad3dKernelNpu.cpp, opapi/ReflectionPad3dKernelNpuOpApi.cpp
  - func: reflection_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReflectionPad3dKernelNpu.cpp, opapi/ReflectionPad3dKernelNpuOpApi.cpp
  - func: reflection_pad3d_backward(Tensor grad_output, Tensor self, SymInt[6] padding) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ReflectionPad3dBackwardKernelNpuOpApi.cpp
  - func: reflection_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor
    impl_ns: op_api
    version: v1.11
    kernel: opapi/ReflectionPad3dBackwardKernelNpuOpApi.cpp
  - func: reflection_pad3d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ReflectionPad3dBackwardKernelNpuOpApi.cpp
  - func: reflection_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: op_api
    version: v1.11
    kernel: opapi/ReflectionPad3dBackwardKernelNpuOpApi.cpp
  - func: relu(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddReluKernelNpu.cpp, opapi/LeakyReluKernelNpuOpApi.cpp
  - func: relu_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddReluKernelNpu.cpp, opapi/LeakyReluKernelNpuOpApi.cpp
  - func: remainder.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RemainderKernelNpu.cpp, opapi/RemainderKernelNpuOpApi.cpp
  - func: remainder.Scalar_Tensor(Scalar self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RemainderKernelNpu.cpp, opapi/RemainderKernelNpuOpApi.cpp
  - func: remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RemainderKernelNpu.cpp, opapi/RemainderKernelNpuOpApi.cpp
  - func: remainder.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RemainderKernelNpu.cpp, opapi/RemainderKernelNpuOpApi.cpp
  - func: remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RemainderKernelNpu.cpp, opapi/RemainderKernelNpuOpApi.cpp
  - func: remainder_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RemainderKernelNpu.cpp, opapi/RemainderKernelNpuOpApi.cpp
  - func: remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RemainderKernelNpu.cpp, opapi/RemainderKernelNpuOpApi.cpp
  - func: renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RenormKernelNpu.cpp, opapi/RenormKernelNpuOpApi.cpp
  - func: renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RenormKernelNpu.cpp, opapi/RenormKernelNpuOpApi.cpp
  - func: renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EmbeddingRenormKernelNpu.cpp, opapi/EmbeddingRenormKernelNpuOpApi.cpp
  - func: repeat(Tensor self, SymInt[] repeats) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RepeatKernelNpu.cpp, opapi/RepeatInterleaveBackwardKernelOpApi.cpp
  - func: repeat(Tensor self, int[] repeats) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/RepeatKernelNpu.cpp, opapi/RepeatInterleaveBackwardKernelOpApi.cpp
  - func: repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None, *, SymInt? output_size=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RepeatInterLeaveKernelNpu.cpp, opapi/RepeatInterLeaveKernelNpuOpApi.cpp
  - func: repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None, *, int? output_size=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1
    kernel: aclops/RepeatInterLeaveKernelNpu.cpp, opapi/RepeatInterLeaveKernelNpuOpApi.cpp
  - func: repeat_interleave.self_int(Tensor self, SymInt repeats, int? dim=None, *, SymInt? output_size=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RepeatInterLeaveKernelNpu.cpp, opapi/RepeatInterLeaveKernelNpuOpApi.cpp
  - func: repeat_interleave.self_int(Tensor self, SymInt repeats, int? dim=None, *, int? output_size=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api
    version: v2.0, v2.1, v2.1
    kernel: aclops/RepeatInterLeaveKernelNpu.cpp, opapi/RepeatInterLeaveKernelNpuOpApi.cpp
  - func: repeat_interleave.self_int(Tensor self, int repeats, int? dim=None, *, int? output_size=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/RepeatInterLeaveKernelNpu.cpp, opapi/RepeatInterLeaveKernelNpuOpApi.cpp
  - func: replication_pad1d(Tensor self, SymInt[2] padding) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReplicationPad1dKernelNpu.cpp, opapi/ReplicationPad1dKernelNpuOpApi.cpp
  - func: replication_pad1d(Tensor self, int[2] padding) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReplicationPad1dKernelNpu.cpp, opapi/ReplicationPad1dKernelNpuOpApi.cpp
  - func: replication_pad1d.out(Tensor self, SymInt[2] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReplicationPad1dKernelNpu.cpp, opapi/ReplicationPad1dKernelNpuOpApi.cpp
  - func: replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReplicationPad1dKernelNpu.cpp, opapi/ReplicationPad1dKernelNpuOpApi.cpp
  - func: replication_pad1d_backward(Tensor grad_output, Tensor self, SymInt[2] padding) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReplicationPad1dBackwardKernelNpu.cpp, opapi/ReplicationPad1dBackwardKernelNpuOpApi.cpp
  - func: replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReplicationPad1dBackwardKernelNpu.cpp, opapi/ReplicationPad1dBackwardKernelNpuOpApi.cpp
  - func: replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReplicationPad1dBackwardKernelNpu.cpp, opapi/ReplicationPad1dBackwardKernelNpuOpApi.cpp
  - func: replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReplicationPad1dBackwardKernelNpu.cpp, opapi/ReplicationPad1dBackwardKernelNpuOpApi.cpp
  - func: replication_pad2d(Tensor self, SymInt[4] padding) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReplicationPad1dKernelNpu.cpp, opapi/ReplicationPad2dKernelNpuOpApi.cpp
  - func: replication_pad2d(Tensor self, int[4] padding) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReplicationPad1dKernelNpu.cpp, opapi/ReplicationPad2dKernelNpuOpApi.cpp
  - func: replication_pad2d.out(Tensor self, SymInt[4] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReplicationPad1dKernelNpu.cpp, opapi/ReplicationPad2dKernelNpuOpApi.cpp
  - func: replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReplicationPad1dKernelNpu.cpp, opapi/ReplicationPad2dKernelNpuOpApi.cpp
  - func: replication_pad2d_backward(Tensor grad_output, Tensor self, SymInt[4] padding) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReplicationPad1dBackwardKernelNpu.cpp, opapi/ReplicationPad2dBackwardKernelNpuOpApi.cpp
  - func: replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReplicationPad1dBackwardKernelNpu.cpp, opapi/ReplicationPad2dBackwardKernelNpuOpApi.cpp
  - func: replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReplicationPad1dBackwardKernelNpu.cpp, opapi/ReplicationPad2dBackwardKernelNpuOpApi.cpp
  - func: replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReplicationPad1dBackwardKernelNpu.cpp, opapi/ReplicationPad2dBackwardKernelNpuOpApi.cpp
  - func: replication_pad3d(Tensor self, SymInt[6] padding) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReplicationPad3dKernelNpu.cpp, opapi/ReplicationPad3dKernelNpuOpApi.cpp
  - func: replication_pad3d(Tensor self, int[6] padding) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReplicationPad3dKernelNpu.cpp, opapi/ReplicationPad3dKernelNpuOpApi.cpp
  - func: replication_pad3d.out(Tensor self, SymInt[6] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ReplicationPad3dKernelNpu.cpp, opapi/ReplicationPad3dKernelNpuOpApi.cpp
  - func: replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/ReplicationPad3dKernelNpu.cpp, opapi/ReplicationPad3dKernelNpuOpApi.cpp
  - func: replication_pad3d_backward(Tensor grad_output, Tensor self, SymInt[6] padding) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ReplicationPad3dBackwardKernelNpuOpApi.cpp
  - func: replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor
    impl_ns: op_api
    version: v1.11
    kernel: opapi/ReplicationPad3dBackwardKernelNpuOpApi.cpp
  - func: replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, SymInt[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ReplicationPad3dBackwardKernelNpuOpApi.cpp
  - func: replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: op_api
    version: v1.11
    kernel: opapi/ReplicationPad3dBackwardKernelNpuOpApi.cpp
  - func: roll(Tensor self, SymInt[1] shifts, int[1] dims=[]) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RollKernelNpu.cpp, opapi/RollKernelNpuOpApi.cpp
  - func: roll(Tensor self, int[1] shifts, int[1] dims=[]) -> Tensor
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/RollKernelNpu.cpp, opapi/RollKernelNpuOpApi.cpp
  - func: round(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/QuantizeAddKernelNpu.cpp, opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: round.decimals(Tensor self, *, int decimals) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/QuantizeAddKernelNpu.cpp, opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: round.decimals_out(Tensor self, *, int decimals, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/QuantizeAddKernelNpu.cpp, opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/QuantizeAddKernelNpu.cpp, opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: round_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RoundDecimalsKernelNpu.cpp, opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: round_.decimals(Tensor(a!) self, *, int decimals) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RoundDecimalsKernelNpu.cpp, opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RreluWithNoiseKernelNpu.cpp, opapi/RReluWithNoiseKernelNpuOpApi.cpp
  - func: rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RreluWithNoiseKernelNpu.cpp, opapi/RReluWithNoiseKernelNpuOpApi.cpp
  - func: rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RreluWithNoiseKernelNpu.cpp, opapi/RReluWithNoiseKernelNpuOpApi.cpp
  - func: rsqrt(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RsqrtKernelNpu.cpp, opapi/RsqrtKernelNpuOpApi.cpp
  - func: rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RsqrtKernelNpu.cpp, opapi/RsqrtKernelNpuOpApi.cpp
  - func: rsqrt_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RsqrtKernelNpu.cpp, opapi/RsqrtKernelNpuOpApi.cpp
  - func: rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RsubKernelNpu.cpp, opapi/RsubKernelNpuOpApi.cpp
  - func: rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RsubKernelNpu.cpp, opapi/RsubKernelNpuOpApi.cpp
  - func: scaled_dot_product_attention(Tensor query, Tensor key, Tensor value, Tensor? attn_mask=None, float dropout_p=0.0, bool is_causal=False, *, float? scale=None) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ScaledDotProductAttentionKernelNpuOpApi.cpp
  - func: scatter.reduce_out(Tensor self, int dim, Tensor index, Tensor src, *, str reduce, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api
    version: v1.11
    kernel: opapi/ScatterKernelNpuOpApi.cpp
  - func: scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/ScatterKernelNpu.cpp
  - func: scatter.src_out(Tensor self, int dim, Tensor index, Tensor src, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ScatterKernelNpu.cpp, opapi/ScatterKernelNpuOpApi.cpp
  - func: scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/ScatterKernelNpu.cpp
  - func: scatter.value_out(Tensor self, int dim, Tensor index, Scalar value, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ScatterKernelNpu.cpp, opapi/ScatterKernelNpuOpApi.cpp
  - func: scatter.value_reduce_out(Tensor self, int dim, Tensor index, Scalar value, *, str reduce, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api
    version: v1.11
    kernel: opapi/ScatterKernelNpuOpApi.cpp
  - func: scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ScatterKernelNpu.cpp, opapi/ScatterKernelNpuOpApi
  - func: scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ScatterKernelNpu.cpp, opapi/ScatterKernelNpuOpApi
  - func: scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ScatterAddKernelNpu.cpp, opapi/ScatterAddKernelNpuOpApi.cpp
  - func: scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ScatterAddKernelNpu.cpp, opapi/ScatterAddKernelNpuOpApi.cpp
  - func: scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ScatterAddKernelNpu.cpp, opapi/ScatterAddKernelNpuOpApi.cpp
  - func: searchsorted.Scalar(Tensor sorted_sequence, Scalar self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SearchsortedKernelNpu.cpp, opapi/BucketizeKernelNpuOpApi.cpp
  - func: searchsorted.Tensor(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SearchsortedKernelNpu.cpp, opapi/BucketizeKernelNpuOpApi.cpp
  - func: searchsorted.Tensor_out(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SearchsortedKernelNpu.cpp, opapi/BucketizeKernelNpuOpApi.cpp
  - func: selu(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SeluKernelNpu.cpp, opapi/SeluKernelOpApi.cpp
  - func: selu_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SeluKernelNpu.cpp, opapi/SeluKernelOpApi.cpp
  - func: sgn(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SignKernelNpu.cpp, opapi/SignKernelNpuOpApi.cpp
  - func: sgn.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SignKernelNpu.cpp, opapi/SignKernelNpuOpApi.cpp
  - func: sigmoid(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardsigmoidKernelNpu.cpp, opapi/ForeachSigmoidKernelOpApi.cpp
  - func: sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardsigmoidKernelNpu.cpp, opapi/ForeachSigmoidKernelOpApi.cpp
  - func: sigmoid_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardsigmoidKernelNpu.cpp, opapi/ForeachSigmoidKernelOpApi.cpp
  - func: sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardsigmoidBackwardKernelNpu.cpp, opapi/HardsigmoidBackwardKernelNpuOpApi.cpp
  - func: sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardsigmoidBackwardKernelNpu.cpp, opapi/HardsigmoidBackwardKernelNpuOpApi.cpp
  - func: sign(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SignKernelNpu.cpp, opapi/SignKernelNpuOpApi.cpp
  - func: sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SignKernelNpu.cpp, opapi/SignKernelNpuOpApi.cpp
  - func: sign_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SignKernelNpu.cpp, opapi/SignKernelNpuOpApi.cpp
  - func: signbit.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/SignbitKernelNpuOpApi.cpp
  - func: silu(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SiluKernelNpu.cpp, opapi/GroupNormSiluKernelNpuOpApi.cpp
  - func: silu.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SiluKernelNpu.cpp, opapi/GroupNormSiluKernelNpuOpApi.cpp
  - func: silu_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SiluKernelNpu.cpp, opapi/SiluKernelNpuOpApi.cpp
  - func: silu_backward(Tensor grad_output, Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SiluBackwardKernelNpu.cpp, opapi/SiluBackwardKernelNpuOpApi.cpp
  - func: silu_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SiluBackwardKernelNpu.cpp, opapi/SiluBackwardKernelNpuOpApi.cpp
  - func: sin(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinKernelNpu.cpp, opapi/AsinKernelNpuOpApi.cpp
  - func: sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinKernelNpu.cpp, opapi/AsinKernelNpuOpApi.cpp
  - func: sin_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinKernelNpu.cpp, opapi/AsinKernelNpuOpApi.cpp
  - func: sinc(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SincKernelNpu.cpp, opapi/SincKernelNpuOpApi.cpp
  - func: sinc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SincKernelNpu.cpp, opapi/SincKernelNpuOpApi.cpp
  - func: sinc_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SincKernelNpu.cpp, opapi/SincKernelNpuOpApi.cpp
  - func: sinh(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinhKernelNpu.cpp, opapi/AsinhKernelNpuOpApi.cpp
  - func: sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinhKernelNpu.cpp, opapi/AsinhKernelNpuOpApi.cpp
  - func: sinh_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AsinhKernelNpu.cpp, opapi/AsinhKernelNpuOpApi.cpp
  - func: slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SlogdetKernelNpu.cpp, opapi/SlogdetKernelNpuOpApi.cpp
  - func: slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, SymInt[3] padding=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/Conv3dKernelNpu.cpp
  - func: slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/Conv3dKernelNpu.cpp
  - func: slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, SymInt[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/Conv3dKernelNpu.cpp
  - func: slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/Conv3dKernelNpu.cpp
  - func: slow_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, SymInt[3] padding) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/Conv3dKernelNpu.cpp
  - func: slow_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/Conv3dKernelNpu.cpp
  - func: slow_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, SymInt[3] padding, *, Tensor(a!) output) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/Conv3dKernelNpu.cpp
  - func: slow_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output) -> Tensor(a!)
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/Conv3dKernelNpu.cpp
  - func: slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, SymInt[2] padding=0, int[2] dilation=1) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SlowConvDilated2DKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/SlowConvDilated2DKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, SymInt[2] padding=0, SymInt[2] output_padding=0, int[2] dilation=1) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SlowConvTranspose2dKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/SlowConvTranspose2dKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, SymInt[2] padding=0, SymInt[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SlowConvTranspose2dKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/SlowConvTranspose2dKernelNpu.cpp, opapi/ConvolutionKernelNpuOpApi.cpp
  - func: smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean, float beta=1.0) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SmoothL1LossKernelNpu.cpp, opapi/SmoothL1LossKernelNpuOpApi.cpp
  - func: smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, float beta=1.0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SmoothL1LossKernelNpu.cpp, opapi/SmoothL1LossKernelNpuOpApi.cpp
  - func: smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SmoothL1LossBackwardKernelNpu.cpp, opapi/SmoothL1LossBackwrdKernelNpuOpApi.cpp
  - func: smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SmoothL1LossBackwardKernelNpu.cpp, opapi/SmoothL1LossBackwrdKernelNpuOpApi.cpp
  - func: soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SoftMarginLossKernelNpu.cpp, opapi/SoftMarginLossKernelNpuOpApi.cpp
  - func: soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SoftMarginLossKernelNpu.cpp, opapi/SoftMarginLossKernelNpuOpApi.cpp
  - func: soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SoftMarginLossBackwardKernelNpu.cpp, opapi/SoftMarginLossBackwardKernelNpuOpApi.cpp
  - func: soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SoftMarginLossBackwardKernelNpu.cpp, opapi/SoftMarginLossBackwardKernelNpuOpApi.cpp
  - func: softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DropoutWithAddSoftmaxKernelNpu.cpp, opapi/LogSoftmaxKernelNpuOpApi.cpp
  - func: softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DropoutWithAddSoftmaxKernelNpu.cpp, opapi/LogSoftmaxKernelNpuOpApi.cpp
  - func: softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SoftplusKernelNpu.cpp, opapi/SoftplusKernelNpuOpApi.cpp
  - func: softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SoftplusKernelNpu.cpp, opapi/SoftplusKernelNpuOpApi.cpp
  - func: softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold) -> Tensor
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/SoftplusBackwardKernelNpu.cpp
  - func: softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SoftplusBackwardKernelNpu.cpp, opapi/SoftplusBackwardKernelNpuOpApi.cpp
  - func: softshrink(Tensor self, Scalar lambd=0.5) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SoftShrinkKernelNpu.cpp, opapi/SoftShrinkKernelNpuOpApi.cpp
  - func: softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SoftShrinkKernelNpu.cpp, opapi/SoftShrinkKernelNpuOpApi.cpp
  - func: softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SoftShrinkBackwardKernelNpu.cpp, opapi/SoftshrinkBackwardNpuOpApi.cpp
  - func: softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SoftShrinkBackwardKernelNpu.cpp, opapi/SoftshrinkBackwardNpuOpApi.cpp
  - func: sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgsortKernelNpu.cpp, opapi/ArgSortKernelNpuOpApi.cpp
  - func: sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgsortKernelNpu.cpp, opapi/ArgSortKernelNpuOpApi.cpp
  - func: sort.dimname_values(Tensor self, Dimname dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgsortKernelNpu.cpp, opapi/ArgSortKernelNpuOpApi.cpp
  - func: sort.stable(Tensor self, *, bool? stable, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ArgSortKernelNpuOpApi.cpp
  - func: sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ArgsortKernelNpu.cpp, opapi/ArgSortKernelNpuOpApi.cpp
  - func: sort.values_stable(Tensor self, *, bool? stable, int dim=-1, bool descending=False, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ArgSortKernelNpuOpApi.cpp
  - func: sqrt(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GroupNormKernelNpu.cpp, opapi/FFTc2cKernelNpuOpApi.cpp
  - func: sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GroupNormKernelNpu.cpp, opapi/FFTc2cKernelNpuOpApi.cpp
  - func: sqrt_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RsqrtKernelNpu.cpp, opapi/ForeachSqrtKernelNpuOpApi.cpp
  - func: square.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/SquareKernelNpu.cpp, opapi/SquareKernelNpuOpApi.cpp
  - func: stack(Tensor[] tensors, int dim=0) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GruKernelNpu.cpp, opapi/StackKernelNpuOpApi.cpp
  - func: stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GruKernelNpu.cpp, opapi/StackKernelNpuOpApi.cpp
  - func: std.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/StdKernelNpu.cpp, opapi/StdKernelNpuOpApi.cpp
  - func: std.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/StdKernelNpu.cpp, opapi/StdKernelNpuOpApi.cpp
  - func: std.correction(Tensor self, int[1]? dim=None, *, int? correction=None, bool keepdim=False) -> Tensor
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/StdKernelNpu.cpp
  - func: std.correction_out(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/StdKernelNpu.cpp, opapi/StdKernelNpuOpApi.cpp
  - func: std.correction_out(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/StdKernelNpu.cpp, opapi/StdKernelNpuOpApi.cpp
  - func: std.correction_out(Tensor self, int[1]? dim=None, *, int? correction=None, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/StdKernelNpu.cpp
  - func: std_mean.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/StdKernelNpu.cpp, opapi/StdMeanKernelNpuOpApi.cpp
  - func: std_mean.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/StdKernelNpu.cpp, opapi/StdMeanKernelNpuOpApi.cpp
  - func: std_mean.correction(Tensor self, int[1]? dim=None, *, int? correction=None, bool keepdim=False) -> (Tensor, Tensor)
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/StdKernelNpu.cpp
  - func: stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool? onesided=None, bool? return_complex=None) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/StftKernelNpuOpApi.cpp
  - func: sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GroupNormBackwardKernelNpu.cpp, opapi/ForeachSubKernelNpuOpApi.cpp
  - func: sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GroupNormBackwardKernelNpu.cpp, opapi/ForeachSubKernelNpuOpApi.cpp
  - func: sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/GroupNormBackwardKernelNpu.cpp, opapi/ForeachSubKernelNpuOpApi.cpp
  - func: sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SubKernelNpu.cpp, opapi/ExponentialKernelNpuOpApi.cpp
  - func: sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SubKernelNpu.cpp, opapi/ExponentialKernelNpuOpApi.cpp
  - func: sum(Tensor self, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AmpForeachNonFiniteCheckAndUnscaleKernelNpu.cpp, opapi/CountNonZeroKernelNpuOpApi.cpp
  - func: sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AmpForeachNonFiniteCheckAndUnscaleKernelNpu.cpp, opapi/CountNonZeroKernelNpuOpApi.cpp
  - func: sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/AmpForeachNonFiniteCheckAndUnscaleKernelNpu.cpp, opapi/CountNonZeroKernelNpuOpApi.cpp
  - func: sum.IntList_out(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AmpForeachNonFiniteCheckAndUnscaleKernelNpu.cpp, opapi/CountNonZeroKernelNpuOpApi.cpp
  - func: sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AmpForeachNonFiniteCheckAndUnscaleKernelNpu.cpp, opapi/CountNonZeroKernelNpuOpApi.cpp
  - func: sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/AmpForeachNonFiniteCheckAndUnscaleKernelNpu.cpp, opapi/CountNonZeroKernelNpuOpApi.cpp
  - func: sum.dim_IntList(Tensor self, int[1]? dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AmpForeachNonFiniteCheckAndUnscaleKernelNpu.cpp, opapi/CountNonZeroKernelNpuOpApi.cpp
  - func: take(Tensor self, Tensor index) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/TakeKernelNpu.cpp, opapi/TakeKernelNpuOpApi.cpp
  - func: take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/TakeKernelNpu.cpp, opapi/TakeKernelNpuOpApi.cpp
  - func: tan(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanKernelNpu.cpp, opapi/AtanKernelNpuOpApi.cpp
  - func: tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanKernelNpu.cpp, opapi/AtanKernelNpuOpApi.cpp
  - func: tan_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanKernelNpu.cpp, opapi/AtanKernelNpuOpApi.cpp
  - func: tanh(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanhKernelNpu.cpp, opapi/AtanhKernelNpuOpApi.cpp
  - func: tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanhKernelNpu.cpp, opapi/AtanhKernelNpuOpApi.cpp
  - func: tanh_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AtanhKernelNpu.cpp, opapi/AtanhKernelNpuOpApi.cpp
  - func: tanh_backward(Tensor grad_output, Tensor output) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardtanhBackwardKernelNpu.cpp, opapi/HardtanhBackwardKernelNpuOpApi.cpp
  - func: tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/HardtanhBackwardKernelNpu.cpp, opapi/HardtanhBackwardKernelNpuOpApi.cpp
  - func: threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ThresholdKernelNpu.cpp, opapi/ThresholdKernelNpuOpApi.cpp
  - func: threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ThresholdKernelNpu.cpp, opapi/ThresholdKernelNpuOpApi.cpp
  - func: threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ThresholdKernelNpu.cpp, opapi/ThresholdKernelNpuOpApi.cpp
  - func: threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ThresholdBackwardKernelNpu.cpp, opapi/ThresholdBackwardKernelNpuOpApi.cpp
  - func: topk(Tensor self, SymInt k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/KthvalueKernelNpu.cpp, opapi/TopkKernelNpuOpApi.cpp
  - func: topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/KthvalueKernelNpu.cpp, opapi/TopkKernelNpuOpApi.cpp
  - func: topk.values(Tensor self, SymInt k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/KthvalueKernelNpu.cpp, opapi/TopkKernelNpuOpApi.cpp
  - func: topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
    impl_ns: acl_op, op_api, acl_op
    version: v1.11, v1.11, v2.0
    kernel: aclops/KthvalueKernelNpu.cpp, opapi/TopkKernelNpuOpApi.cpp
  - func: trace(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/TraceKernelNpu.cpp, opapi/TraceKernelNpuOpApi.cpp
  - func: triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/TriangularSolveKernelNpu.cpp
  - func: triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/TriangularSolveKernelNpu.cpp
  - func: tril(Tensor self, int diagonal=0) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/TrilKernelNpu.cpp, opapi/TrilKernelNpuOpApi.cpp
  - func: tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/TrilKernelNpu.cpp, opapi/TrilKernelNpuOpApi.cpp
  - func: tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/TrilKernelNpu.cpp, opapi/TrilKernelNpuOpApi.cpp
  - func: triu(Tensor self, int diagonal=0) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/TriuKernelNpu.cpp, opapi/ScaledDotProductAttentionKernelNpuOpApi.cpp
  - func: triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/TriuKernelNpu.cpp, opapi/ScaledDotProductAttentionKernelNpuOpApi.cpp
  - func: triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/TriuKernelNpu.cpp, opapi/TriuKernelNpuOpApi.cpp
  - func: true_divide.Scalar(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/TrueDivideKernelNpu.cpp
  - func: true_divide.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/TrueDivideKernelNpu.cpp
  - func: true_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/TrueDivideKernelNpu.cpp
  - func: true_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/TrueDivideKernelNpu.cpp
  - func: true_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/TrueDivideKernelNpu.cpp
  - func: trunc(Tensor self) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DivKernelNpu.cpp, opapi/AddcdivKernelNpuOpApi.cpp
  - func: trunc_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DivKernelNpu.cpp, opapi/ForeachRoundOffNumberKernelNpuOpApi.cpp
  - func: uniform_(Tensor(a!) self, float from=0, float to=1, *, Generator? generator=None) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RreluWithNoiseKernelNpu.cpp, opapi/ExponentialKernelNpuOpApi.cpp
  - func: unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UniqueConsecutiveKernelNpu.cpp, opapi/UniqueConsecutiveKernelNpuOpApi.cpp
  - func: unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UniqueDimKernelNpu.cpp, opapi/UniqueDimKernelNpuOpApi.cpp
  - func: upsample_bicubic2d(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleBicubic2dKernelNpu.cpp, opapi/UpsampleBicubic2dKernelNpuOpApi.cpp
  - func: upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleBicubic2dKernelNpu.cpp, opapi/UpsampleBicubic2dKernelNpuOpApi.cpp
  - func: upsample_bicubic2d.out(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleBicubic2dKernelNpu.cpp, opapi/UpsampleBicubic2dKernelNpuOpApi.cpp
  - func: upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleBicubic2dKernelNpu.cpp, opapi/UpsampleBicubic2dKernelNpuOpApi.cpp
  - func: upsample_bicubic2d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleBicubic2dKernelNpu.cpp, opapi/UpsampleBicubic2dKernelNpuOpApi.cpp
  - func: upsample_bicubic2d_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpSampleBicubic2dBackwardKernelNpu.cpp, opapi/UpsampleBicubic2dBackwardKernelNpuOpApi.cpp
  - func: upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpSampleBicubic2dBackwardKernelNpu.cpp, opapi/UpsampleBicubic2dBackwardKernelNpuOpApi.cpp
  - func: upsample_bicubic2d_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpSampleBicubic2dBackwardKernelNpu.cpp, opapi/UpsampleBicubic2dBackwardKernelNpuOpApi.cpp
  - func: upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpSampleBicubic2dBackwardKernelNpu.cpp, opapi/UpsampleBicubic2dBackwardKernelNpuOpApi.cpp
  - func: upsample_bicubic2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpSampleBicubic2dBackwardKernelNpu.cpp, opapi/UpsampleBicubic2dBackwardKernelNpuOpApi.cpp
  - func: upsample_bilinear2d(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleBilinear2dKernelNpu.cpp, opapi/UpsampleBilinear2dKernelNpuOpApi.cpp
  - func: upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleBilinear2dKernelNpu.cpp, opapi/UpsampleBilinear2dKernelNpuOpApi.cpp
  - func: upsample_bilinear2d.out(Tensor self, SymInt[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleBilinear2dKernelNpu.cpp, opapi/UpsampleBilinear2dKernelNpuOpApi.cpp
  - func: upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleBilinear2dKernelNpu.cpp, opapi/UpsampleBilinear2dKernelNpuOpApi.cpp
  - func: upsample_bilinear2d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleBilinear2dKernelNpu.cpp, opapi/UpsampleBilinear2dKernelNpuOpApi.cpp
  - func: upsample_bilinear2d_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleBilinear2dBackwardKernelNpu.cpp, opapi/UpsampleBilinear2dBackwardKernelNpuOpApi.cpp
  - func: upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleBilinear2dBackwardKernelNpu.cpp, opapi/UpsampleBilinear2dBackwardKernelNpuOpApi.cpp
  - func: upsample_bilinear2d_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleBilinear2dBackwardKernelNpu.cpp, opapi/UpsampleBilinear2dBackwardKernelNpuOpApi.cpp
  - func: upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleBilinear2dBackwardKernelNpu.cpp, opapi/UpsampleBilinear2dBackwardKernelNpuOpApi.cpp
  - func: upsample_bilinear2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleBilinear2dBackwardKernelNpu.cpp, opapi/UpsampleBilinear2dBackwardKernelNpuOpApi.cpp
  - func: upsample_linear1d(Tensor self, SymInt[1] output_size, bool align_corners, float? scales=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleLinear1dKernelNpu.cpp, opapi/UpsampleLinear1dKernelNpuOpApi.cpp
  - func: upsample_linear1d(Tensor self, int[1] output_size, bool align_corners, float? scales=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleLinear1dKernelNpu.cpp, opapi/UpsampleLinear1dKernelNpuOpApi.cpp
  - func: upsample_linear1d.out(Tensor self, SymInt[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleLinear1dKernelNpu.cpp, opapi/UpsampleLinear1dKernelNpuOpApi.cpp
  - func: upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleLinear1dKernelNpu.cpp, opapi/UpsampleLinear1dKernelNpuOpApi.cpp
  - func: upsample_linear1d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleLinear1dKernelNpu.cpp, opapi/UpsampleLinear1dKernelNpuOpApi.cpp
  - func: upsample_linear1d_backward(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, bool align_corners, float? scales=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleLinear1dBackwardKernelNpu.cpp, opapi/UpsampleLinear1dBackwardKernelNpuOpApi.cpp
  - func: upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleLinear1dBackwardKernelNpu.cpp, opapi/UpsampleLinear1dBackwardKernelNpuOpApi.cpp
  - func: upsample_linear1d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleLinear1dBackwardKernelNpu.cpp, opapi/UpsampleLinear1dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest1d(Tensor self, SymInt[1] output_size, float? scales=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleNearest1dKernelNpu.cpp, opapi/UpsampleNearest1dKernelNpuOpApi.cpp
  - func: upsample_nearest1d(Tensor self, int[1] output_size, float? scales=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest1dKernelNpu.cpp, opapi/UpsampleNearest1dKernelNpuOpApi.cpp
  - func: upsample_nearest1d.out(Tensor self, SymInt[1] output_size, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleNearest1dKernelNpu.cpp, opapi/UpsampleNearest1dKernelNpuOpApi.cpp
  - func: upsample_nearest1d.out(Tensor self, int[1] output_size, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest1dKernelNpu.cpp, opapi/UpsampleNearest1dKernelNpuOpApi.cpp
  - func: upsample_nearest1d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest1dKernelNpu.cpp, opapi/UpsampleNearest1dKernelNpuOpApi.cpp
  - func: upsample_nearest1d_backward(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, float? scales=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleNearest1dBackwardKernelNpu.cpp, opapi/UpsampleNearest1dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest1dBackwardKernelNpu.cpp, opapi/UpsampleNearest1dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest1d_backward.grad_input(Tensor grad_output, SymInt[1] output_size, SymInt[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleNearest1dBackwardKernelNpu.cpp, opapi/UpsampleNearest1dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest1dBackwardKernelNpu.cpp, opapi/UpsampleNearest1dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest1d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest1dBackwardKernelNpu.cpp, opapi/UpsampleNearest1dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest2d(Tensor self, SymInt[2] output_size, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleNearest2dKernelNpu.cpp, opapi/UpsampleNearest2dKernelOpApi.cpp
  - func: upsample_nearest2d(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest2dKernelNpu.cpp, opapi/UpsampleNearest2dKernelOpApi.cpp
  - func: upsample_nearest2d.out(Tensor self, SymInt[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleNearest2dKernelNpu.cpp, opapi/UpsampleNearest2dKernelOpApi.cpp
  - func: upsample_nearest2d.out(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest2dKernelNpu.cpp, opapi/UpsampleNearest2dKernelOpApi.cpp
  - func: upsample_nearest2d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest2dKernelNpu.cpp, opapi/UpsampleNearest2dKernelOpApi.cpp
  - func: upsample_nearest2d_backward(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleNearest2dBackwardKernelNpu.cpp, opapi/UpsampleNearest2dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest2dBackwardKernelNpu.cpp, opapi/UpsampleNearest2dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest2d_backward.grad_input(Tensor grad_output, SymInt[2] output_size, SymInt[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleNearest2dBackwardKernelNpu.cpp, opapi/UpsampleNearest2dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest2dBackwardKernelNpu.cpp, opapi/UpsampleNearest2dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest2dBackwardKernelNpu.cpp, opapi/UpsampleNearest2dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest3d(Tensor self, SymInt[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpSampleNearest3dKernelNpu.cpp, opapi/UpsampleNearest3dKernelOpApi.cpp
  - func: upsample_nearest3d(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpSampleNearest3dKernelNpu.cpp, opapi/UpsampleNearest3dKernelOpApi.cpp
  - func: upsample_nearest3d.out(Tensor self, SymInt[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpSampleNearest3dKernelNpu.cpp, opapi/UpsampleNearest3dKernelOpApi.cpp
  - func: upsample_nearest3d.out(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpSampleNearest3dKernelNpu.cpp, opapi/UpsampleNearest3dKernelOpApi.cpp
  - func: upsample_nearest3d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpSampleNearest3dKernelNpu.cpp, opapi/UpsampleNearest3dKernelOpApi.cpp
  - func: upsample_nearest3d_backward(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleNearest3dBackwardKernelNpu.cpp, opapi/UpsampleNearest3dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest3dBackwardKernelNpu.cpp, opapi/UpsampleNearest3dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest3d_backward.grad_input(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleNearest3dBackwardKernelNpu.cpp, opapi/UpsampleNearest3dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest3dBackwardKernelNpu.cpp, opapi/UpsampleNearest3dBackwardKernelNpuOpApi.cpp
  - func: upsample_nearest3d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleNearest3dBackwardKernelNpu.cpp, opapi/UpsampleNearest3dBackwardKernelNpuOpApi.cpp
  - func: upsample_trilinear3d(Tensor self, SymInt[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleTrilinear3dKernelNpu.cpp, opapi/UpsampleTrilinear3dKernelNpuOpApi.cpp
  - func: upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleTrilinear3dKernelNpu.cpp, opapi/UpsampleTrilinear3dKernelNpuOpApi.cpp
  - func: upsample_trilinear3d.out(Tensor self, SymInt[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleTrilinear3dKernelNpu.cpp, opapi/UpsampleTrilinear3dKernelNpuOpApi.cpp
  - func: upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleTrilinear3dKernelNpu.cpp, opapi/UpsampleTrilinear3dKernelNpuOpApi.cpp
  - func: upsample_trilinear3d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleTrilinear3dKernelNpu.cpp, opapi/UpsampleTrilinear3dKernelNpuOpApi.cpp
  - func: upsample_trilinear3d_backward(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleTrilinear3dBackwardKernelNpu.cpp, opapi/UpsampleTrilinear3dBackwardKernelNpuOpApi.cpp
  - func: upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleTrilinear3dBackwardKernelNpu.cpp, opapi/UpsampleTrilinear3dBackwardKernelNpuOpApi.cpp
  - func: upsample_trilinear3d_backward.grad_input(Tensor grad_output, SymInt[3] output_size, SymInt[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/UpsampleTrilinear3dBackwardKernelNpu.cpp, opapi/UpsampleTrilinear3dBackwardKernelNpuOpApi.cpp
  - func: upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleTrilinear3dBackwardKernelNpu.cpp, opapi/UpsampleTrilinear3dBackwardKernelNpuOpApi.cpp
  - func: upsample_trilinear3d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/UpsampleTrilinear3dBackwardKernelNpu.cpp, opapi/UpsampleTrilinear3dBackwardKernelNpuOpApi.cpp
  - func: var.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/VarKernelNpu.cpp, opapi/VarKernelNpuOpApi.cpp
  - func: var.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/VarKernelNpu.cpp, opapi/VarKernelNpuOpApi.cpp
  - func: var.correction(Tensor self, int[1]? dim=None, *, int? correction=None, bool keepdim=False) -> Tensor
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/VarKernelNpu.cpp
  - func: var.correction_out(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/VarKernelNpu.cpp, opapi/VarKernelNpuOpApi.cpp
  - func: var.correction_out(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/VarKernelNpu.cpp, opapi/VarKernelNpuOpApi.cpp
  - func: var.correction_out(Tensor self, int[1]? dim=None, *, int? correction=None, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/VarKernelNpu.cpp
  - func: var_mean.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/VarKernelNpu.cpp, opapi/VarKernelNpuOpApi.cpp
  - func: var_mean.correction(Tensor self, int[1]? dim=None, *, Scalar? correction=None, bool keepdim=False) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/VarKernelNpu.cpp, opapi/VarKernelNpuOpApi.cpp
  - func: var_mean.correction(Tensor self, int[1]? dim=None, *, int? correction=None, bool keepdim=False) -> (Tensor, Tensor)
    impl_ns: acl_op
    version: v2.0
    kernel: aclops/VarKernelNpu.cpp
  - func: vdot(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/VDotKernelNpu.cpp, opapi/VDotKernelNpuOpApi.cpp
  - func: vdot.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/VDotKernelNpu.cpp, opapi/VDotKernelNpuOpApi.cpp
  - func: view_as_complex(Tensor(a) self) -> Tensor(a)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ViewAsRealKernelNpu.cpp
  - func: view_as_real(Tensor(a) self) -> Tensor(a)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ViewAsRealKernelNpu.cpp
  - func: where(Tensor condition) -> Tensor[]
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CtcLossKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: where.self(Tensor condition, Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CtcLossKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: where.self_out(Tensor condition, Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CtcLossKernelNpu.cpp, opapi/CtcLossKernelNpuOpApi.cpp
  - func: xlogy.OutScalar_Other(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/XlogyKernelNpu.cpp, opapi/XlogyKernelNpuOpApi.cpp
  - func: xlogy.OutScalar_Self(Scalar self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/XlogyKernelNpu.cpp, opapi/XlogyKernelNpuOpApi.cpp
  - func: xlogy.OutTensor(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/XlogyKernelNpu.cpp, opapi/XlogyKernelNpuOpApi.cpp
  - func: xlogy.Scalar_Other(Tensor self, Scalar other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/XlogyKernelNpu.cpp, opapi/XlogyKernelNpuOpApi.cpp
  - func: xlogy.Scalar_Self(Scalar self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/XlogyKernelNpu.cpp, opapi/XlogyKernelNpuOpApi.cpp
  - func: xlogy.Tensor(Tensor self, Tensor other) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/XlogyKernelNpu.cpp, opapi/XlogyKernelNpuOpApi.cpp
  - func: xlogy_.Scalar_Other(Tensor(a!) self, Scalar other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/XlogyKernelNpu.cpp, opapi/XlogyKernelNpuOpApi.cpp
  - func: xlogy_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/XlogyKernelNpu.cpp, opapi/XlogyKernelNpuOpApi.cpp
  - func: zero_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AvgPool3dBackwardKernelNpu.cpp, opapi/ZerosKernelNpuOpApi.cpp
  - func: zeros(SymInt[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddLayerNormBackwardKernelNpu.cpp, opapi/AddLayerNormBackwardKernelNpuOpApi.cpp
  - func: zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/AddLayerNormBackwardKernelNpu.cpp, opapi/AddLayerNormBackwardKernelNpuOpApi.cpp
  - func: zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddLayerNormBackwardKernelNpu.cpp, opapi/AddLayerNormBackwardKernelNpuOpApi.cpp
  - func: zeros.out(SymInt[] size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddLayerNormBackwardKernelNpu.cpp, opapi/AddLayerNormBackwardKernelNpuOpApi.cpp
  - func: zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/AddLayerNormBackwardKernelNpu.cpp, opapi/AddLayerNormBackwardKernelNpuOpApi.cpp
  - func: zeros_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BaddbmmKernelNpu.cpp, opapi/LayerNormBackwardKernelNpuOpApi.cpp
custom:
  - func: _amp_foreach_non_finite_check(Tensor[] scaled_grads) -> bool
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AmpForeachNonFiniteCheckAndUnscaleKernelNpu.cpp
  - func: _conv_depthwise2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConvDepthwise2dBackwardKernelNpu.cpp
  - func: _dropout_with_byte_mask(Tensor self, float p) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/DropoutWithByteMaskKernelNpu.cpp
    tags: nondeterministic_seeded
  - func: _dropout_with_byte_mask_backward(Tensor grad_output, Tensor mask, float p) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/DropoutWithByteMaskKernelNpu.cpp
  - func: _npu_ciou(Tensor self, Tensor gtboxes, bool trans=False, bool is_cross=True, int mode=0, bool atan_sub_flag=False) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/CiouKernelNpu.cpp
  - func: _npu_dropout(Tensor self, float p) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DropoutKernelNpu.cpp, opapi/DropoutKernelNpuOpApi.cpp
    tags: nondeterministic_seeded
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: _npu_dropout_gen_mask.Tensor(Tensor self, int[] size, float p, int seed, int offset, *, bool? parallel=True, bool? sync=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DropoutGenMaskKernelNpu.cpp, opapi/DropoutGenMaskKernelNpuOpApi.cpp
    tags: nondeterministic_seeded
  - func: _npu_silent_check(Tensor(a!) input_grad, Tensor val, Tensor(b!) pre_val, Tensor(c!) min_val, Tensor(d!) max_val, Tensor val_counter, int c_min_steps, float c_thresh_l1, float c_coeff_l1, float c_thresh_l2, float c_coeff_l2) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SilentCheckKernelNpu.cpp
  - func: batch_norm_gather_stats_update(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, Tensor counts) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BatchNormGatherStatsUpdateKernelNpu.cpp
  - func: batch_norm_reduce(Tensor input, float eps) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BatchNormReduceKernelNpu.cpp
  - func: crop_and_resize(Tensor self, float[]? boxes, int[] box_index, int[] crop_size, float extrapolation_value=0, str method="bilinear") -> Tensor
    impl_ns: acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1
    kernel: aclops/CropAndResizeKernelNpu.cpp
  - func: decode_jpeg(Tensor self, int[] image_shape, int channels=3, bool try_recover_truncated=False) -> Tensor
    impl_ns: acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1
    kernel: aclops/DecodeJpegKernelNpu.cpp
  - func: dropout_with_byte_mask(Tensor self, float p, bool train) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/DropoutWithByteMaskKernelNpu.cpp
    tags: nondeterministic_seeded
  - func: fast_gelu(Tensor self) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/FastGeluKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: image_normalize(Tensor self, float[]? mean, float[]? variance, int dtype=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1
    kernel: aclops/ImageNormalizeKernelNpu.cpp
  - func: image_normalize_(Tensor(a!) self, float[]? mean, float[]? variance, int dtype=0) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1
    kernel: aclops/ImageNormalizeKernelNpu.cpp
  - func: img_to_tensor(Tensor self) -> Tensor
    impl_ns: acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1
    kernel: aclops/ImgToTensorKernelNpu.cpp
  - func: kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/KlDivBackwardKernelNpu.cpp
  - func: l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/L1LossBackwardKernelNpu.cpp, opapi/L1LossBackwardKernelNpuOpApi.cpp
  - func: matmul_backward(Tensor grad, Tensor self, Tensor other, bool[2] mask) -> (Tensor, Tensor)
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/MatmulBackwardKernelNpu.cpp
  - func: matmul_double_backward(Tensor? grad_self, Tensor? grad_other, Tensor grad_out, Tensor self, Tensor other, bool[3] mask) -> (Tensor, Tensor, Tensor)
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/MatmulDoubleBackwardKernelNpuOpApi.cpp
  - func: npu_add_layer_norm(Tensor x1, Tensor x2, Tensor gamma, Tensor beta, float epsilon=1e-05, bool additional_output=False) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddLayerNormNpu.cpp, opapi/AddLayerNormKernelNpuOpApi.cpp
  - func: npu_add_layer_norm_backward(Tensor? dy_opt, Tensor x1, Tensor x2, Tensor rstd, Tensor mean, Tensor gamma, Tensor? dsum_opt) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddLayerNormBackwardKernelNpu.cpp, opapi/AddLayerNormBackwardKernelNpuOpApi.cpp
  - func: npu_add_rms_norm(Tensor x1, Tensor x2, Tensor gamma, float epsilon=1e-06) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddRmsNormKernelNpu.cpp, opapi/AddRmsNormKernelOpApi.cpp
  - func: npu_all_gather_base_mm(Tensor self, Tensor x2, str hcom, int world_size, *, Tensor? bias=None, int gather_index=0, bool gather_output=True, int comm_turn=0) -> (Tensor, Tensor)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/AllGatherBaseMatmulKernelNpuOpApi.cpp
  - func: npu_alloc_float_status(Tensor self) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/FloatStatusKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_anchor_response_flags(Tensor self, int[2] featmap_size, int[2] stride, int num_base_anchors) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AnchorResponseFlagsKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_anti_quant(Tensor x, Tensor scale, *, Tensor? offset=None, ScalarType? dst_dtype=None, ScalarType? src_dtype=None) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/AntiQuantKernelNpuOpApi.cpp
    exposed: true
  - func: npu_apply_adam(Scalar beta1_power, Scalar beta2_power, Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, bool? use_locking, bool? use_nesterov) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ApplyAdamKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_apply_adam.out(Scalar beta1_power, Scalar beta2_power, Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, bool? use_locking, bool? use_nesterov, *, Tensor(a!) var, Tensor(b!) m, Tensor(c!) v) -> (Tensor(a!), Tensor(b!), Tensor(c!))
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ApplyAdamKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_apply_adam_w(Scalar beta1_power, Scalar beta2_power, Scalar lr, Scalar weight_decay, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, Tensor? max_grad_norm, bool? amsgrad, bool? maximize) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ApplyAdamWKernelNpu.cpp
  - func: npu_apply_adam_w.out(Scalar beta1_power, Scalar beta2_power, Scalar lr, Scalar weight_decay, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, Tensor? max_grad_norm, bool? amsgrad, bool? maximize, *, Tensor(a!) var, Tensor(b!) m, Tensor(c!) v) -> (Tensor(a!), Tensor(b!), Tensor(c!))
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ApplyAdamWKernelNpu.cpp
  - func: npu_apply_rotary_pos_emb(Tensor query, Tensor key, Tensor cos, Tensor sin, str layout='BSH') -> (Tensor, Tensor)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ApplyRotaryPosEmbNpuOpApi.cpp, opapi/ApplyRotaryPosEmbNpuOpApi.cpp
  - func: npu_batch_nms(Tensor self, Tensor scores, float score_threshold, float iou_threshold, int max_size_per_class, int max_total_size, bool change_coordinate_frame=False, bool transpose_box=False) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BatchNMSKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_bert_apply_adam(Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, Scalar max_grad_norm, Scalar global_grad_norm, Scalar weight_decay, Scalar? step_size=None, int adam_mode=0) -> (Tensor var, Tensor m, Tensor v)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BertApplyAdamKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_bert_apply_adam.out(Scalar lr, Scalar beta1, Scalar beta2, Scalar epsilon, Tensor grad, Scalar max_grad_norm, Scalar global_grad_norm, Scalar weight_decay, Scalar? step_size=None, int adam_mode=0, *, Tensor(a!) var, Tensor(b!) m, Tensor(c!) v) -> (Tensor(a!), Tensor(b!), Tensor(c!))
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BertApplyAdamKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor
    impl_ns: acl_op, op_api
    version: v1.11, v1.11
    kernel: aclops/BinaryCrossEntropyWithLogitsKernelNpu.cpp, opapi/BinaryCrossEntropyWithLogitsBackwardKernelNpuOpApi.cpp
  - func: npu_binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight_opt, Tensor? pos_weight_opt, int reduction) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/BinaryCrossEntropyWithLogitsKernelNpu.cpp, opapi/BinaryCrossEntropyWithLogitsBackwardKernelNpuOpApi.cpp
  - func: npu_bmmV2(Tensor self, Tensor mat2, int[] output_sizes) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BmmV2KernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_bmm_v2_mat1_backward(Tensor grad, Tensor mat1, Tensor mat2, SymInt[] size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BmmV2KernelNpu.cpp
  - func: npu_bmm_v2_mat1_backward(Tensor grad, Tensor mat1, Tensor mat2, int[] size) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/BmmV2KernelNpu.cpp
  - func: npu_bmm_v2_mat2_backward(Tensor grad, Tensor mat1, Tensor mat2, SymInt[] size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BmmV2KernelNpu.cpp
  - func: npu_bmm_v2_mat2_backward(Tensor grad, Tensor mat1, Tensor mat2, int[] size) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/BmmV2KernelNpu.cpp
  - func: npu_bounding_box_decode(Tensor rois, Tensor deltas, float means0, float means1, float means2, float means3, float stds0, float stds1, float stds2, float stds3, int[1] max_shape, float wh_ratio_clip) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BoundingBoxDecodeKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_bounding_box_encode(Tensor anchor_box, Tensor ground_truth_box, float means0, float means1, float means2, float means3, float stds0, float stds1, float stds2, float stds3) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BoundingBoxEncodeKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_broadcast(Tensor self, int[] size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BroadcastKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_broadcast.out(Tensor self, int[] size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BroadcastKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_ciou(Tensor self, Tensor gtboxes, bool trans=False, bool is_cross=True, int mode=0, bool atan_sub_flag=False) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/CiouKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_ciou_backward(Tensor grad, Tensor bboxes, Tensor gtboxes, Tensor? atan_sub, bool trans=False, bool is_cross=True, int mode=0) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/CiouKernelNpu.cpp
  - func: npu_clear_float_status(Tensor self, int mode=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/FloatStatusKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_confusion_transpose(Tensor self, int[] perm, int[] shape, bool transpose_first) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConfusionTransposeKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_confusion_transpose_backward(Tensor grad, int[] perm, SymInt[] shape, bool transpose_first) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConfusionTransposeKernelNpu.cpp
  - func: npu_confusion_transpose_backward(Tensor grad, int[] perm, int[] shape, bool transpose_first) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/ConfusionTransposeKernelNpu.cpp
  - func: npu_conv2d(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/Conv2dKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_conv2d.out(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/Conv2dKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_conv2d_backward(Tensor input, Tensor grad_output, Tensor weight, int[] stride, int[] padding, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/Conv2dBackwardKernelNpu.cpp
  - func: npu_conv3d(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/Conv3dKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_conv3d.out(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/Conv3dKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_conv3d_backward(Tensor input, Tensor grad, Tensor weight, int[] stride, int[] padding, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/Conv3dBackwardKernelNpu.cpp
  - func: npu_conv_transpose2d(Tensor input, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_conv_transpose2d_backward(Tensor input, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConvTranspose2dBackwardKernelNpu.cpp
  - func: npu_conv_transpose3d_backward(Tensor input, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConvTranspose2dBackwardKernelNpu.cpp
  - func: npu_convert_weight_to_int4pack(Tensor weight, int inner_k_tiles=0) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ConvertWeightToINT4PackKernelNpuOpApi.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[] stride, int[] padding, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp
  - func: npu_convolution_transpose(Tensor input, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_convolution_transpose_backward(Tensor input, Tensor grad, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool[3] grad_input_mask) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConvolutionKernelNpu.cpp
  - func: npu_deep_norm(Tensor x, Tensor gx, Tensor beta, Tensor gamma, float alpha=0.3, float epsilon=1e-06) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DeepNormKernelNpu.cpp, opapi/DeepNormKernelOpApi.cpp
  - func: npu_deep_norm_backward(Tensor dy, Tensor x, Tensor gx, Tensor gamma, Tensor mean, Tensor rstd, float alpha=0.3) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DeepNormBackwardKernelNpu.cpp, opapi/DeepNormBackwardKernelOpApi.cpp
  - func: npu_deformable_conv2d(Tensor input, Tensor weight, Tensor offset, Tensor? bias, int[2] kernel_size, int[] stride, int[] padding, int[] dilation=[1,1,1,1], int groups=1, int deformable_groups=1, bool modulated=True) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/DeformableConv2dKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_deformable_conv2dbk(Tensor input, Tensor grad_output, Tensor offset_out, Tensor weight, Tensor offset, int[2] kernel_size, int[] stride, int[] padding, int[] dilation=[1,1,1,1], int groups=1, int deformable_groups=1, bool modulated=True) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/DeformableConv2dKernelNpu.cpp
  - func: npu_diou(Tensor self, Tensor gtboxes, bool trans=False, bool is_cross=False, int mode=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/DiouKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_diou_backward(Tensor grad, Tensor bboxes, Tensor gtboxes, bool trans=False, bool is_cross=False, int mode=0) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/DiouKernelNpu.cpp
  - func: npu_dropout_backward(Tensor grad_output, Tensor mask, float p) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/DropoutKernelNpu.cpp, opapi/NativeDropoutKernelNpuOpApi.cpp
  - func: npu_dropout_do_mask(Tensor self, Tensor mask, float p) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/DropoutKernelNpu.cpp
    tags: nondeterministic_seeded
  - func: npu_dropout_gen_mask(int[] size, float p, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/DropoutGenMaskKernelNpu.cpp
    tags: nondeterministic_seeded
    dispatch:
        CompositeExplicitAutograd: npu_dropout_gen_mask
  - func: npu_dropout_with_add_softmax(Tensor self, Tensor x1, Scalar alpha, float prob, int dim) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/DropoutWithAddSoftmaxKernelNpu.cpp
    tags: nondeterministic_seeded
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_dropout_with_add_softmax_backward(Tensor grad, Tensor mask, Tensor softmax_out, Scalar alpha, float prob, int dim) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/DropoutWithAddSoftmaxKernelNpu.cpp
  - func: npu_dtype_cast(Tensor self, ScalarType dtype) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/AddKernelNpu.cpp, opapi/CastKernelNpuOpApi.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_dtype_cast_(Tensor(a!) self, Tensor src) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/CastKernelNpu.cpp
  - func: npu_dtype_cast_backward(Tensor grad, ScalarType dtype) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/CastKernelNpu.cpp, opapi/CastKernelNpuOpApi.cpp
  - func: npu_dynamic_quant(Tensor input, *, Tensor? smooth_scales=None) -> (Tensor, Tensor)
    impl_ns: op_api, op_api, op_api
    version: v2.1, v2.2, v2.3
    kernel: opapi/DynamicQuantKernelNpu.cpp
  - func: npu_fast_gelu(Tensor self) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/FastGeluKernelNpu.cpp
  - func: npu_fast_gelu_backward(Tensor grad, Tensor self) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/FastGeluKernelNpu.cpp
  - func: npu_ffn(Tensor x, Tensor weight1, Tensor weight2, str activation, *, int[]? expert_tokens=None, int[]? expert_tokens_index=None, Tensor? bias1=None, Tensor? bias2=None, Tensor? scale=None, Tensor? offset=None, Tensor? deq_scale1=None, Tensor? deq_scale2=None, Tensor? antiquant_scale1=None, Tensor? antiquant_scale2=None, Tensor? antiquant_offset1=None, Tensor? antiquant_offset2=None, int? inner_precise=None, ScalarType? output_dtype=None) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/FFNKernelNpuOpApi.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_flash_attention(Tensor query, Tensor key, Tensor value, int head_num, str input_layout, Tensor? pse=None, Tensor? padding_mask=None, Tensor? atten_mask=None, float scale=1., float keep_prob=1., int pre_tockens=2147483647, int next_tockens=2147483647, int inner_precise=1, int[]? prefix=None, int[]? actual_seq_qlen=None, int[]? actual_seq_kvlen=None, int sparse_mode=0, bool gen_mask_parallel=True, bool sync=False) -> (Tensor, Tensor, Tensor, Tensor, int, int, int)
    impl_ns: op_api
    version: v1.11
    kernel: opapi/FlashAttentionKernelNpuOpApi.cpp
  - func: npu_flash_attention_grad(Tensor query, Tensor key, Tensor value, Tensor dy, int head_num, str input_layout, *, Tensor? pse=None, Tensor? padding_mask=None, Tensor? atten_mask=None, Tensor? softmax_max=None, Tensor? softmax_sum=None, Tensor? softmax_in=None, Tensor? attention_in=None, float scale_value=1., float keep_prob=1., int pre_tockens=2147483647, int next_tockens=2147483647, int inner_precise=1, int seed=0, int offset=0, int numels=0, int[]? prefix=None, int[]? actual_seq_qlen=None, int[]? actual_seq_kvlen=None, int sparse_mode=0, bool gen_mask_parallel=True, bool sync=False) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: op_api
    version: v1.11
    kernel: opapi/FlashAttentionKernelNpuOpApi.cpp
  - func: npu_fused_attention_layernorm_qkv_fwd(Tensor x, Tensor kernel_query, Tensor kernel_key, Tensor kernel_value, Tensor gamma, Tensor beta, Tensor? bias_query=None, Tensor? bias_key=None, Tensor? bias_value=None, int seq_len=128, int num_heads=12, float eps=1e-05) -> Tensor[]
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/FusedAttentionLnQKV.cpp
  - func: npu_fused_attention_qkv_grad(Tensor grad_output_query, Tensor grad_output_key, Tensor grad_output_value, Tensor query_kernel, Tensor key_kernel, Tensor value_kernel, Tensor hidden_states, Tensor grad_output_ln) -> Tensor[]
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/FusedAttentionQKVGradKernelNpu.cpp
  - func: npu_fused_attention_score(Tensor query_layer, Tensor key_layer, Tensor value_layer, Tensor attention_mask, Scalar scale, float keep_prob, bool query_transpose=False, bool key_transpose=False, bool bmm_score_transpose_a=False, bool bmm_score_transpose_b=False, bool value_transpose=False, bool dx_transpose=False) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/FusedAttentionScoreKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_fused_attention_score_backward(Tensor grad_output, Tensor softmax_output, Tensor query_layer, Tensor key_layer, Tensor value_layer, Tensor mask, Scalar scale, float keep_prob, bool query_transpose=False, bool key_transpose=False, bool value_transpose=False, bool dx_transpose=False) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/FusedAttentionScoreKernelNpu.cpp
  - func: npu_fused_attention_score_fwd(Tensor query_layer, Tensor key_layer, Tensor value_layer, Tensor attention_mask, Scalar scale, float keep_prob, bool query_transpose=False, bool key_transpose=False, bool bmm_score_transpose_a=False, bool bmm_score_transpose_b=False, bool value_transpose=False, bool dx_transpose=False) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/FusedAttentionScoreKernelNpu.cpp
  - func: npu_fused_attention_score_grad(Tensor grad_output, Tensor softmax_output, Tensor query_layer, Tensor key_layer, Tensor value_layer, Tensor mask, Scalar scale, float keep_prob, bool query_transpose=False, bool key_transpose=False, bool value_transpose=False, bool dx_transpose=False) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/FusedAttentionScoreKernelNpu.cpp
  - func: npu_fused_infer_attention_score(Tensor query, Tensor key, Tensor value, *, Tensor? pse_shift=None, Tensor? atten_mask=None, SymInt[]? actual_seq_lengths=None, SymInt[]? actual_seq_lengths_kv=None, Tensor? dequant_scale1=None, Tensor? quant_scale1=None, Tensor? dequant_scale2=None, Tensor? quant_scale2=None, Tensor? quant_offset2=None, Tensor? antiquant_scale=None, Tensor? antiquant_offset=None, Tensor? key_antiquant_scale=None, Tensor? key_antiquant_offset=None, Tensor? value_antiquant_scale=None, Tensor? value_antiquant_offset=None, Tensor? block_table=None, Tensor? query_padding_size=None, Tensor? kv_padding_size=None, Tensor? key_shared_prefix=None, Tensor? value_shared_prefix=None, SymInt[]? actual_shared_prefix_len=None, int num_heads=1, float scale=1.0, int pre_tokens=2147483647, int next_tokens=2147483647, str input_layout="BSH", int num_key_value_heads=0, int sparse_mode=0, int inner_precise=0, int block_size=0, int antiquant_mode=0, int key_antiquant_mode=0, int value_antiquant_mode=0, bool softmax_lse_flag=False) -> (Tensor, Tensor)
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FusedInferAttentionScoreKernelNpuOpApi.cpp
  - func: npu_fusion_attention(Tensor query, Tensor key, Tensor value, int head_num, str input_layout, Tensor? pse=None, Tensor? padding_mask=None, Tensor? atten_mask=None, float scale=1., float keep_prob=1., int pre_tockens=2147483647, int next_tockens=2147483647, int inner_precise=0, int[]? prefix=None, int[]? actual_seq_qlen=None, int[]? actual_seq_kvlen=None, int sparse_mode=0, bool gen_mask_parallel=True, bool sync=False) -> (Tensor, Tensor, Tensor, Tensor, int, int, int)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/FlashAttentionKernelNpuOpApi.cpp
    exposed: v2.1
  - func: npu_fusion_attention_grad(Tensor query, Tensor key, Tensor value, Tensor dy, int head_num, str input_layout, *, Tensor? pse=None, Tensor? padding_mask=None, Tensor? atten_mask=None, Tensor? softmax_max=None, Tensor? softmax_sum=None, Tensor? softmax_in=None, Tensor? attention_in=None, float scale_value=1., float keep_prob=1., int pre_tockens=2147483647, int next_tockens=2147483647, int inner_precise=0, int seed=0, int offset=0, int numels=0, int[]? prefix=None, int[]? actual_seq_qlen=None, int[]? actual_seq_kvlen=None, int sparse_mode=0, bool gen_mask_parallel=True, bool sync=False) -> (Tensor, Tensor, Tensor, Tensor)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/FlashAttentionKernelNpuOpApi.cpp
  - func: npu_geglu(Tensor self, int dim=-1, int approximate=1, bool activate_left=False) -> (Tensor, Tensor)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/GeGluKernelNpuOpApi.cpp
    exposed: v1.11, v2.0
  - func: npu_geglu_grad(Tensor grad_output, Tensor self, Tensor gelu, int dim=-1, int approximate=1, bool activate_left=False) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/GeGluKernelNpuOpApi.cpp
  - func: npu_get_float_status(Tensor self, int mode=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AmpForeachNonFiniteCheckAndUnscaleKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_giou(Tensor self, Tensor gtboxes, bool trans=False, bool is_cross=False, int mode=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/GiouKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_giou_backward(Tensor grad, Tensor bboxes, Tensor gtboxes, bool trans=False, bool is_cross=False, int mode=0) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/GiouKernelNpu.cpp
  - func: npu_grid_assign_positive(Tensor self, Tensor overlaps, Tensor box_responsible_flags, Tensor max_overlaps, Tensor argmax_overlaps, Tensor gt_max_overlaps, Tensor gt_argmax_overlaps, int num_gts, float pos_iou_thr, float min_pos_iou, bool gt_max_assign_all) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/GridAssignPositiveKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_group_norm_silu(Tensor input, Tensor? weight, Tensor? bias, int group, float eps=0.00001) -> (Tensor, Tensor, Tensor)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/GroupNormSiluKernelNpuOpApi.cpp
  - func: npu_grouped_matmul(Tensor[] x, Tensor[] weight, *, Tensor[] bias, Tensor[] scale, Tensor[] offset, Tensor[] antiquant_scale, Tensor[] antiquant_offset, int[]? group_list=None, int? split_item=0, ScalarType? output_dtype=None) -> Tensor[]
    impl_ns: op_api, op_api
    version: v1.11, v2.0
    kernel: opapi/GroupedMatmulKernelNpuOpApi.cpp
    exposed: v1.11, v2.0
  - func: npu_grouped_matmul(Tensor[] x, Tensor[] weight, *, Tensor[]? bias=None, Tensor[]? scale=None, Tensor[]? offset=None, Tensor[]? antiquant_scale=None, Tensor[]? antiquant_offset=None, int[]? group_list=None, int? split_item=0, ScalarType? output_dtype=None) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/GroupedMatmulKernelNpuOpApi.cpp
    exposed: v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_gru(Tensor input, Tensor hx, Tensor weight_input, Tensor weight_hidden, Tensor bias_input, Tensor bias_hidden, Tensor seq_length, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/GruKernelNpu.cpp
    tags: nondeterministic_seeded
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_gru_backward(Tensor? grady, Tensor? gradh, Tensor input, Tensor weight_input, Tensor weight_hidden, Tensor bias_input, Tensor bias_hidden, Tensor seq_length, Tensor hx, Tensor y_output, Tensor h_output, Tensor output_updata, Tensor output_reset, Tensor output_new, Tensor hidden_new) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/GruKernelNpu.cpp
  - func: npu_ifmr(Tensor data, Tensor data_min, Tensor data_max, Tensor cumsum, float min_percentile, float max_percentile, float search_start, float search_end, float search_step, bool with_offset) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/IfmrKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_incre_flash_attention(Tensor query, Tensor key, Tensor value, *, Tensor? padding_mask=None, Tensor? atten_mask=None, Tensor? pse_shift=None, SymInt[]? actual_seq_lengths=None, Tensor? antiquant_scale=None, Tensor? antiquant_offset=None, Tensor? block_table=None, Tensor? dequant_scale1=None, Tensor? quant_scale1=None, Tensor? dequant_scale2=None, Tensor? quant_scale2=None, Tensor? quant_offset2=None, Tensor? kv_padding_size=None, int num_heads=1, float scale_value=1.0, str input_layout="BSH", int num_key_value_heads=0, int block_size=0, int inner_precise=1) -> Tensor
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FlashAttentionKernelNpuOpApi.cpp
    exposed: v2.1
  - func: npu_incre_flash_attention(Tensor query, Tensor key, Tensor value, *, Tensor? padding_mask=None, Tensor? atten_mask=None, int[]? actual_seq_lengths=None, Tensor? antiquant_scale=None, Tensor? antiquant_offset=None, Tensor? block_table=None, Tensor? dequant_scale1=None, Tensor? quant_scale1=None, Tensor? dequant_scale2=None, Tensor? quant_scale2=None, Tensor? quant_offset2=None, Tensor? kv_padding_size=None, int num_heads=1, float scale_value=1.0, str input_layout="BSH", int num_key_value_heads=0, int block_size=0, int inner_precise=1) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api
    version: v2.2, v2.3, v2.4, v2.5
    kernel: opapi/FlashAttentionKernelNpuOpApi.cpp
    exposed: v2.2, v2.3, v2.4, v2.5
  - func: npu_indexing(Tensor self, int[] begin, int[] end, int[] strides, int begin_mask=0, int end_mask=0, int ellipsis_mask=0, int new_axis_mask=0, int shrink_axis_mask=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConstantPadNdKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_indexing.out(Tensor self, int[] begin, int[] end, int[] strides, int begin_mask=0, int end_mask=0, int ellipsis_mask=0, int new_axis_mask=0, int shrink_axis_mask=0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConstantPadNdKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_indexing_trans_contiguous.out(Tensor self, int[] begin, int[] end, int[] strides, int begin_mask=0, int end_mask=0, int ellipsis_mask=0, int new_axis_mask=0, int shrink_axis_mask=0, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1
    kernel: aclops/IndexingKernelNpu.cpp
  - func: npu_iou(Tensor bboxes, Tensor gtboxes, int mode=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/IouKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_layer_norm_eval(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LayerNormEvalKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_layernorm_grad(Tensor grad_out, Tensor input, int[] normalized_shape, Tensor mean, Tensor rstd, Tensor? weight, Tensor? bias) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LayerNormBackwardKernelNpu.cpp
  - func: npu_linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinearKernelNpu.cpp, opapi/LinearKernelNpuOpApi.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_linear_backward(Tensor grad, Tensor input, Tensor weight) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/LinearKernelNpu.cpp, opapi/LinearKernelNpuOpApi.cpp
  - func: npu_lstm(Tensor input, Tensor weight, Tensor bias, Tensor seq_mask, Tensor h, Tensor c, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, bool flag_seq, bool direction) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LstmKernelNpu.cpp
    tags: nondeterministic_seeded
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_lstm_backward(Tensor? grady, Tensor? gradh, Tensor? gradc, Tensor input, Tensor weight, Tensor bias, Tensor hx, Tensor cx, Tensor y_output, Tensor h_output, Tensor c_output, Tensor i, Tensor j, Tensor f, Tensor o, Tensor tanhc) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LstmKernelNpu.cpp
  - func: npu_lstm_cell(Tensor input, Tensor w_ih, Tensor w_hh, Tensor h, Tensor c, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LstmCellKernelNpu.cpp
  - func: npu_lstm_cell_backward(Tensor? grady, Tensor? gradh, Tensor? gradc, Tensor input, Tensor w_ih, Tensor w_hh, Tensor h, Tensor c, Tensor y_output, Tensor h_output, Tensor c_output, Tensor i, Tensor j, Tensor f, Tensor o, Tensor tanhc) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LstmCellKernelNpu.cpp
  - func: npu_lstm_data(Tensor input, Tensor batch_sizes, Tensor weight, Tensor bias, Tensor seq_mask, Tensor h, Tensor c, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, bool flag_seq, bool direction) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LstmKernelNpu.cpp
    tags: nondeterministic_seeded
  - func: npu_lstm_data_backward(Tensor? grady_opt, Tensor? gradh_opt, Tensor? gradc_opt, Tensor input, Tensor batch_sizes, Tensor weight, Tensor bias, Tensor init_h, Tensor init_c, Tensor y, Tensor h, Tensor c, Tensor i, Tensor j, Tensor f, Tensor o, Tensor tanhc, bool flag_direction) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/LstmKernelNpu.cpp
  - func: npu_masked_fill_range(Tensor self, Tensor start, Tensor end, Tensor value, int axis=-1) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MaskedFillRangeKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_masked_softmax_with_rel_pos_bias(Tensor x, Tensor? atten_mask, Tensor relative_pos_bias, float scale_value=1.0, int inner_precision_mode=0) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/MaskedSoftmaxWithRelPosBias.cpp
  - func: npu_max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MaxV1KernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MaxV1KernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_max_backward(Tensor grad, int dim, Tensor indices, SymInt[] sizes, bool keepdim) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MaxV1KernelNpu.cpp
  - func: npu_max_backward(Tensor grad, int dim, Tensor indices, int[] sizes, bool keepdim) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/MaxV1KernelNpu.cpp
  - func: npu_min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MinV1KernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MinV1KernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_min_backward(Tensor grad, int dim, Tensor indices, SymInt[] sizes, bool keepdim) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MinV1KernelNpu.cpp
  - func: npu_min_backward(Tensor grad, int dim, Tensor indices, int[] sizes, bool keepdim) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/MinV1KernelNpu.cpp
  - func: npu_mish(Tensor self) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MishKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_mish_backward(Tensor grad, Tensor input) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MishKernelNpu.cpp
  - func: npu_mm_all_reduce_base(Tensor x1, Tensor x2, str hcom, *, str reduce_op='sum', Tensor? bias=None, Tensor? antiquant_scale=None, Tensor? antiquant_offset=None, Tensor? x3=None, Tensor? dequant_scale=None, Tensor? pertoken_scale=None, int antiquant_group_size=0, int comm_turn=0) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/MatmulAllReduceBaseKernelNpuOpApi.cpp
    exposed: v1.11, v2.1, v2.4, v2.5
  - func: npu_mm_reduce_scatter_base(Tensor self, Tensor x2, str hcom, int world_size, *, str reduce_op='sum', Tensor? bias=None, int comm_turn=0) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/MatmulReduceScatterBaseKernelNpuOpApi.cpp
  - func: npu_moe_compute_expert_tokens(Tensor sorted_expert_for_source_row, int num_expert) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/MoeComputeExpertTokensKernelNpuOpApi.cpp
  - func: npu_moe_finalize_routing(Tensor expanded_permuted_rows, Tensor skip1, Tensor? skip2, Tensor bias, Tensor scales, Tensor expanded_src_to_dst_row, Tensor export_for_source_row) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/MoeFinalizeRoutingKernelNpuOpApi.cpp
  - func: npu_moe_gating_top_k_softmax(Tensor x, Tensor? finished=None, int k=1) -> (Tensor, Tensor, Tensor)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/MoeGatingTopKSoftmaxKernelNpuOpApi.cpp
  - func: npu_moe_init_routing(Tensor x, Tensor row_idx, Tensor expert_idx, int active_num) -> (Tensor, Tensor, Tensor)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/MoeInitRoutingKernelNpuOpApi.cpp
  - func: npu_multi_head_attention(Tensor query, Tensor key, Tensor value, Tensor query_weight, Tensor key_weight, Tensor value_weight, Tensor attn_mask, Tensor out_proj_weight, Tensor? query_bias, Tensor? key_bias, Tensor? value_bias, Tensor? out_proj_bias, Tensor? dropout_mask, int attn_head_num, int attn_dim_per_head, int src_len, int tgt_len, float dropout_prob, bool softmax_use_float) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MultiHeadAttentionKernelNpu.cpp
    tags: nondeterministic_seeded
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_multi_head_attention_backward(Tensor query, Tensor key, Tensor value, Tensor query_weight, Tensor key_weight, Tensor value_weight, Tensor out_proj_weight, Tensor? query_bias, Tensor? key_bias, Tensor? value_bias, Tensor? out_proj_bias, Tensor query_res, Tensor key_res, Tensor value_res, Tensor attn_scores, Tensor attn_res, Tensor context, Tensor y_grad, Tensor dropout_mask, int attn_head_num, int attn_dim_per_head, int src_len, int tgt_len, float dropout_prob, bool softmax_use_float) -> (Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MultiHeadAttentionKernelNpu.cpp
  - func: npu_multi_head_attention_v2(Tensor query, Tensor key, Tensor value, Tensor? atten_mask=None, Tensor? alibi_mask=None, float scale=1.0, int head_num=1, str input_layout="BNSD", float keep_prob=1., int pre_tokens=2147483647, int next_tokens=1, bool gen_mask_parallel=True, bool sync=False) -> (Tensor, Tensor, int, int, int)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/MultiHeadAttentionV2KernelNpuOpApi.cpp
  - func: npu_multi_head_attention_v2_grad(Tensor attention_score_grad, Tensor query, Tensor key, Tensor value, Tensor softmax_log_max_sum, Tensor attention_score, Tensor? atten_mask=None, Tensor? alibi_mask=None, float scale=1.0, int head_num=1, str input_layout="BNSD", float keep_prob=1., int pre_tokens=2147483647, int next_tokens=1, int seed=0, int offset=0, int numels=0, bool gen_mask_parallel=True, bool sync=False) -> (Tensor, Tensor, Tensor)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/MultiHeadAttentionV2KernelNpuOpApi.cpp
  - func: npu_nms_rotated(Tensor self, Tensor scores, float iou_threshold, float scores_threshold=0, int max_output_size=-1, int mode=0) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/NmsRotatedKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_nms_v4(Tensor self, Tensor scores, Scalar max_output_size, Tensor iou_threshold, Tensor scores_threshold, bool pad_to_max_output_size=False) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/NmsV4KernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_nms_with_mask(Tensor input, Scalar iou_threshold) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/NmsWithMaskKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_normalize_batch(Tensor self, Tensor seq_len, int normalize_type=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/NormalizeBatchKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_one_hot(Tensor self, int num_classes=-1, int depth=1, Scalar on_value=1, Scalar off_value=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/OnehotNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_pad(Tensor input, int[] paddings) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/PadKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_prompt_flash_attention(Tensor query, Tensor key, Tensor value, *, Tensor? padding_mask=None, Tensor? atten_mask=None, Tensor? pse_shift=None, int[]? actual_seq_lengths=None, Tensor? deq_scale1=None, Tensor? quant_scale1=None, Tensor? deq_scale2=None, Tensor? quant_scale2=None, Tensor? quant_offset2=None, int num_heads=1, float scale_value=1.0, int pre_tokens=2147473647, int next_tokens=0, str input_layout="BSH", int num_key_value_heads=0, int[]? actual_seq_lengths_kv=None, int sparse_mode=0) -> Tensor
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FlashAttentionKernelNpuOpApi.cpp
    exposed: v2.1
  - func: npu_prompt_flash_attention(Tensor query, Tensor key, Tensor value, *, Tensor? padding_mask=None, Tensor? atten_mask=None, int[]? actual_seq_lengths=None, int num_heads=1, float scale_value=1.0, int pre_tokens=2147473647, int next_tokens=0, str input_layout="BSH", int num_key_value_heads=0) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api
    version: v2.2, v2.3, v2.4, v2.5
    kernel: opapi/FlashAttentionKernelNpuOpApi.cpp
    exposed: v2.2, v2.3, v2.4, v2.5
  - func: npu_ps_roi_pooling(Tensor self, Tensor rois, float spatial_scale, int group_size, int output_dim) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/PsRoiPoolingKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_ps_roi_pooling_backward(Tensor output_grad, Tensor rois, float spatial_scale, int group_size, int output_dim, SymInt[] input_size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/PsRoiPoolingKernelNpu.cpp
  - func: npu_ps_roi_pooling_backward(Tensor output_grad, Tensor rois, float spatial_scale, int group_size, int output_dim, int[] input_size) -> Tensor
    impl_ns: acl_op
    version: v1.11
    kernel: aclops/PsRoiPoolingKernelNpu.cpp
  - func: npu_ptiou(Tensor bboxes, Tensor gtboxes, int mode=0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/IouKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_quant_conv2d(Tensor input, Tensor weight, Tensor scale, int[2] strides=1, int[2] pads=0, int[2] dilations=1, int groups=1, int offset_x=0, str round_mode='rint', ScalarType? output_dtype=None, Tensor? bias=None, Tensor? offset=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/QuantConv2DKernelNpu.cpp
  - func: npu_quant_matmul(Tensor x1, Tensor x2, Tensor scale, *, Tensor? offset=None, Tensor? pertoken_scale=None, Tensor? bias=None, ScalarType? output_dtype=None) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/QuantMatmulKernelNpuOpApi.cpp
    exposed: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_quant_matmul(Tensor x1, Tensor x2, Tensor scale, Tensor? offset=None, Tensor? bias=None, str? output_dtype=None) -> Tensor
    impl_ns: op_api
    version: v2.0
    kernel: opapi/QuantMatmulKernelNpuOpApi.cpp
  - func: npu_quant_scatter(Tensor self, Tensor indices, Tensor updates, Tensor quant_scales, Tensor? quant_zero_points=None, int axis=0, int quant_axis=1, str reduce='update') -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/QuantScatterKernelNpuOpApi.cpp
    exposed: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_quant_scatter_(Tensor(a!) self, Tensor indices, Tensor updates, Tensor quant_scales, Tensor? quant_zero_points=None, int axis=0, int quant_axis=1, str reduce='update') -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/QuantScatterKernelNpuOpApi.cpp
  - func: npu_quantize(Tensor self, Tensor scales, Tensor? zero_points, ScalarType dtype, int axis=1, bool div_mode=True) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/QuantizeKernelNpu.cpp, opapi/QuantizeKernelNpuOpApi.cpp
  - func: npu_random_choice_with_mask(Tensor x, int count=256, int seed=0, int seed2=0) -> (Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/RandomChoiceWithMaskKernelNpu.cpp
    tags: nondeterministic_seeded
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_reshape(Tensor self, int[] shape, bool can_refresh=False) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ReshapeKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_reshape.out(Tensor self, int[] shape, bool can_refresh=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ReshapeKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_rms_norm(Tensor self, Tensor gamma, float epsilon=1e-06) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RmsNormKernelNpu.cpp, opapi/RmsNormKernelOpApi.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_rms_norm_backward(Tensor dy, Tensor self, Tensor gamma, Tensor rstd) -> (Tensor, Tensor)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RmsNormBackwardKernelNpu.cpp, opapi/RmsNormBackwardKernelOpApi.cpp
  - func: npu_roi_align(Tensor self, Tensor rois, float spatial_scale, int pooled_height, int pooled_width, int sample_num, int roi_end_mode) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RoiAlignKernelNpu.cpp, opapi/RoiAlignBackwardKernelNpuOpApi.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_roi_alignbk(Tensor self, Tensor rois, int[] xdiff_shape, int pooled_width, int pooled_height, float spatial_scale, int sample_num, int? roi_end_mode=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RoiAlignBackwardKernelNpu.cpp, opapi/RoiAlignKernelNpuOpApi.cpp
  - func: npu_rotary_mul(Tensor self, Tensor r1, Tensor r2) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/RotaryMulKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_rotary_mul_backward(Tensor grad, Tensor self, Tensor r1, Tensor r2) -> (Tensor, Tensor, Tensor)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/RotaryMulKernelNpu.cpp
  - func: npu_rotated_box_decode(Tensor self, Tensor deltas, Tensor weight) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/RotatedBoxDecodeKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_rotated_box_encode(Tensor self, Tensor gt_bboxes, Tensor weight) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/RotatedBoxEncodeKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_rotated_iou(Tensor self, Tensor query_boxes, bool trans=False, int mode=0, bool is_cross=True, float v_threshold=0.0, float e_threshold=0.0) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/RotatedIouKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_rotated_overlaps(Tensor self, Tensor query_boxes, bool trans=False) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/RotatedOverlapsKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_scaled_masked_softmax(Tensor x, Tensor mask, Scalar scale=1, bool fixed_triu_mask=False) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ScaledMaskedSoftmaxKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_scaled_masked_softmax_backward(Tensor y_grad, Tensor y, Tensor mask, Scalar scale, bool fixed_triu_mask) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ScaledMaskedSoftmaxKernelNpu.cpp
  - func: npu_scatter(Tensor self, Tensor indices, Tensor updates, int dim) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MaxV1KernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_scatter_list(Tensor[] self, Tensor indices, Tensor updates, Tensor? mask=None, str reduce='update', int axis=-2) -> Tensor[]
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ScatterListKernelNpuOpApi.cpp
  - func: npu_scatter_list_(Tensor(a!)[] self, Tensor indices, Tensor updates, Tensor? mask=None, str reduce='update', int axis=-2) -> ()
    impl_ns: op_api, op_api, op_api, op_api, op_api
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ScatterListKernelNpuOpApi.cpp
  - func: npu_scatter_nd_update(Tensor self, Tensor indices, Tensor updates) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ScatterNdUpdateKernelNpuOpApi.cpp
    exposed: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_scatter_nd_update_(Tensor(a!) self, Tensor indices, Tensor updates) -> Tensor(a!)
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/ScatterNdUpdateKernelNpuOpApi.cpp
    exposed: v1.11, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_sign_bits_pack(Tensor self, int size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SignBitsPackKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_sign_bits_unpack(Tensor input, int size, ScalarType dtype) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SignBitsUnpackKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_silu(Tensor self) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SiluKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_silu_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SiluKernelNpu.cpp
  - func: npu_silu_backward(Tensor grad_output, Tensor x0, Tensor x1) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SiluKernelNpu.cpp
  - func: npu_slice(Tensor self, int[] offsets, int[] size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SliceKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_slice.out(Tensor self, int[] offsets, int[] size, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SliceKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_softmax_cross_entropy_with_logits(Tensor self, Tensor labels) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SoftmaxCrossEntropyWithLogitsKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_softmax_cross_entropy_with_logits_backward(Tensor grad, Tensor self, Tensor labels) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SoftmaxCrossEntropyWithLogitsKernelNpu.cpp
  - func: npu_sort_v2(Tensor self, int dim=-1, bool descending=False) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SortWithoutIndicesKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_sort_v2.out(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SortWithoutIndicesKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_stride_add(Tensor self, Tensor other, Scalar offset1, Scalar offset2, Scalar c1_len) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AddKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_stride_copy(Tensor self, int[] shape, int[] stride, Scalar storage_offset) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AsStridedKernelNpu.cpp
  - func: npu_stride_copy.out(Tensor self, int[] shape, int[] stride, Scalar storage_offset, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AsStridedKernelNpu.cpp
  - func: npu_sub_sample(Tensor self, int per_images, float positive_fraction) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/SubSampleKernelNpu.cpp
  - func: npu_swiglu(Tensor self, int dim=-1) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/SwiGluKernelNpuOpApi.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_swiglu_backward(Tensor grad_output, Tensor self, int dim=-1) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/SwiGluKernelNpuOpApi.cpp
  - func: npu_trans_quant_param(Tensor scale, Tensor? offset=None) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/QuantMatmulKernelNpuOpApi.cpp
    exposed: v1.11, v2.0, v2.2, v2.3, v2.4, v2.5
  - func: npu_transpose(Tensor self, int[] perm, bool require_contiguous=True) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ArgsortKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_transpose.out(Tensor self, int[] perm, bool require_contiguous=True, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ArgsortKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_transpose_trans_contiguous.out(Tensor self, int[] perm, bool require_contiguous=True, *, Tensor(a!) out) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1
    kernel: aclops/TransposeKernelNpu.cpp
  - func: npu_view_copy(Tensor(a!) self, Tensor other, bool non_blocking) -> Tensor(a!)
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AsStridedKernelNpu.cpp
  - func: npu_weight_quant_batchmatmul(Tensor x, Tensor weight, Tensor antiquant_scale, Tensor? antiquant_offset=None, Tensor? quant_scale=None, Tensor? quant_offset=None, Tensor? bias=None, int antiquant_group_size=0) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/WeightQuantBatchMatmulV2KernelNpuOpApi.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: npu_yolo_boxes_encode(Tensor self, Tensor gt_bboxes, Tensor stride, bool performance_mode=False) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/YoloBoxesEncodeKernelNpu.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: one_(Tensor(a!) self) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/OnesKernelNpu.cpp, opapi/OnesLikeKernelNpuOpApi.cpp
    exposed: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
  - func: repeat_interleave_backward_int(Tensor grad, Tensor self, SymInt repeats, int? dim=None) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/RepeatInterleaveBackwardKernelOpApi.cpp, opapi/RepeatInterleaveBackwardKernelOpApi.cpp
  - func: repeat_interleave_backward_int(Tensor grad, Tensor self, int repeats, int? dim=None) -> Tensor
    impl_ns: op_api
    version: v1.11
    kernel: opapi/RepeatInterleaveBackwardKernelOpApi.cpp, opapi/RepeatInterleaveBackwardKernelOpApi.cpp
  - func: repeat_interleave_backward_tensor(Tensor grad, Tensor self, Tensor repeats, int? dim=None) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api, op_api
    version: v1.11, v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/RepeatInterleaveBackwardKernelOpApi.cpp, opapi/RepeatInterleaveBackwardKernelOpApi.cpp
  - func: reverse(Tensor self, int[] axis) -> Tensor
    impl_ns: acl_op, acl_op, acl_op
    version: v1.11, v2.0, v2.1
    kernel: aclops/LayerNormBackwardKernelNpu.cpp
  - func: scatter_update(Tensor self, Tensor indices, Tensor updates, int axis) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ScatterUpdateKernelNpu.cpp, opapi/ScatterUpdateKernelNpuOpApi.cpp
  - func: scatter_update_(Tensor(a!) self, Tensor indices, Tensor updates, int axis) -> Tensor(a!)
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/ScatterUpdateKernelNpu.cpp, opapi/ScatterUpdateKernelNpuOpApi.cpp
  - func: selu_backward(Tensor grad_output, Tensor result) -> Tensor
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SeluKernelNpu.cpp, opapi/SeluKernelOpApi.cpp
  - func: slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SlowConvDilated2dBackwardKernelNpu.cpp, opapi/ConvolutionBackwardKernelNpuOpApi.cpp
  - func: slow_conv_transpose2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
    impl_ns: acl_op, op_api, acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v1.11, v1.11, v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/SlowConvTranspose2dBackwardKernelNpu.cpp, opapi/ConvolutionBackwardKernelNpuOpApi.cpp
symint:
  - func: _embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, SymInt num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/EmbeddingBagBackwardKernelNpu.cpp
  - func: embedding(Tensor weight, Tensor indices, SymInt padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EmbeddingKernelNpu.cpp, opapi/EmbeddingKernelNpuOpApi.cpp
  - func: embedding_backward(Tensor grad, Tensor indices, SymInt num_weights, SymInt padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor
    impl_ns: acl_op, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.0, v2.1, v2.1, v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/EmbeddingBackwardKernelNpu.cpp, opapi/EmbeddingBackwardKernelNpuOpApi.cpp
  - func: npu_bmm_v2_mat1_backward(Tensor grad, Tensor mat1, Tensor mat2, SymInt[] size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BmmV2KernelNpu.cpp
  - func: npu_bmm_v2_mat2_backward(Tensor grad, Tensor mat1, Tensor mat2, SymInt[] size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/BmmV2KernelNpu.cpp
  - func: npu_confusion_transpose_backward(Tensor grad, int[] perm, SymInt[] shape, bool transpose_first) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/ConfusionTransposeKernelNpu.cpp
  - func: npu_fused_infer_attention_score(Tensor query, Tensor key, Tensor value, *, Tensor? pse_shift=None, Tensor? atten_mask=None, SymInt[]? actual_seq_lengths=None, SymInt[]? actual_seq_lengths_kv=None, Tensor? dequant_scale1=None, Tensor? quant_scale1=None, Tensor? dequant_scale2=None, Tensor? quant_scale2=None, Tensor? quant_offset2=None, Tensor? antiquant_scale=None, Tensor? antiquant_offset=None, Tensor? key_antiquant_scale=None, Tensor? key_antiquant_offset=None, Tensor? value_antiquant_scale=None, Tensor? value_antiquant_offset=None, Tensor? block_table=None, Tensor? query_padding_size=None, Tensor? kv_padding_size=None, Tensor? key_shared_prefix=None, Tensor? value_shared_prefix=None, SymInt[]? actual_shared_prefix_len=None, int num_heads=1, float scale=1.0, int pre_tokens=2147483647, int next_tokens=2147483647, str input_layout="BSH", int num_key_value_heads=0, int sparse_mode=0, int inner_precise=0, int block_size=0, int antiquant_mode=0, int key_antiquant_mode=0, int value_antiquant_mode=0, bool softmax_lse_flag=False) -> (Tensor, Tensor)
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FusedInferAttentionScoreKernelNpuOpApi.cpp
    exposed: v2.1
  - func: npu_incre_flash_attention(Tensor query, Tensor key, Tensor value, *, Tensor? padding_mask=None, Tensor? atten_mask=None, Tensor? pse_shift=None, SymInt[]? actual_seq_lengths=None, Tensor? antiquant_scale=None, Tensor? antiquant_offset=None, Tensor? block_table=None, Tensor? dequant_scale1=None, Tensor? quant_scale1=None, Tensor? dequant_scale2=None, Tensor? quant_scale2=None, Tensor? quant_offset2=None, Tensor? kv_padding_size=None, int num_heads=1, float scale_value=1.0, str input_layout="BSH", int num_key_value_heads=0, int block_size=0, int inner_precise=1) -> Tensor
    impl_ns: op_api
    version: v2.1
    kernel: opapi/FlashAttentionKernelNpuOpApi.cpp
  - func: npu_max_backward(Tensor grad, int dim, Tensor indices, SymInt[] sizes, bool keepdim) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MaxV1KernelNpu.cpp
  - func: npu_min_backward(Tensor grad, int dim, Tensor indices, SymInt[] sizes, bool keepdim) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/MinV1KernelNpu.cpp
  - func: npu_ps_roi_pooling_backward(Tensor output_grad, Tensor rois, float spatial_scale, int group_size, int output_dim, SymInt[] input_size) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/PsRoiPoolingKernelNpu.cpp
  - func: repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None, *, SymInt? output_size=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RepeatInterLeaveKernelNpu.cpp, opapi/RepeatInterLeaveKernelNpuOpApi.cpp
  - func: repeat_interleave.self_int(Tensor self, SymInt repeats, int? dim=None, *, SymInt? output_size=None) -> Tensor
    impl_ns: acl_op, op_api, acl_op, op_api, acl_op, op_api, acl_op, op_api
    version: v2.2, v2.2, v2.3, v2.3, v2.4, v2.4, v2.5, v2.5
    kernel: aclops/RepeatInterLeaveKernelNpu.cpp, opapi/RepeatInterLeaveKernelNpuOpApi.cpp
  - func: repeat_interleave.self_int(Tensor self, SymInt repeats, int? dim=None, *, int? output_size=None) -> Tensor
    impl_ns: acl_op, op_api
    version: v2.1, v2.1
    kernel: aclops/RepeatInterLeaveKernelNpu.cpp, opapi/RepeatInterLeaveKernelNpuOpApi.cpp
  - func: repeat_interleave_backward_int(Tensor grad, Tensor self, SymInt repeats, int? dim=None) -> Tensor
    impl_ns: op_api, op_api, op_api, op_api, op_api, op_api
    version: v2.0, v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: opapi/RepeatInterleaveBackwardKernelOpApi.cpp, opapi/RepeatInterleaveBackwardKernelOpApi.cpp
  - func: zeros(SymInt[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op, acl_op
    version: v2.1, v2.2, v2.3, v2.4, v2.5
    kernel: aclops/AddLayerNormBackwardKernelNpu.cpp
tocpu:
  - func: _cholesky_helper
    version: v1.11, v2.0
  - func: _cholesky_solve_helper
    version: v1.11, v2.0
  - func: _compute_linear_combination
    version: v1.11, v2.0
  - func: _compute_linear_combination.out
    version: v1.11, v2.0
  - func: _dirichlet_grad
    version: v1.11, v2.0
  - func: _efficientzerotensor
    version: v1.11
  - func: _empty_affine_quantized
    version: v1.11, v2.0
  - func: _empty_per_channel_affine_quantized
    version: v1.11, v2.0
  - func: _fft_c2c
    version: v1.11, v2.0
  - func: _fft_c2c.out
    version: v1.11, v2.0
  - func: _fft_c2r
    version: v1.11, v2.0
  - func: _fft_c2r.out
    version: v1.11, v2.0
  - func: _fft_r2c
    version: v1.11, v2.0
  - func: _fft_r2c.out
    version: v1.11, v2.0
  - func: _foreach_acos
    version: v1.11, v2.0
  - func: _foreach_acos_
    version: v1.11, v2.0
  - func: _foreach_asin
    version: v1.11, v2.0
  - func: _foreach_asin_
    version: v1.11, v2.0
  - func: _foreach_atan
    version: v1.11, v2.0
  - func: _foreach_atan_
    version: v1.11, v2.0
  - func: _foreach_cosh
    version: v1.11, v2.0
  - func: _foreach_cosh_
    version: v1.11, v2.0
  - func: _foreach_erf
    version: v1.11, v2.0
  - func: _foreach_erf_
    version: v1.11, v2.0
  - func: _foreach_erfc
    version: v1.11, v2.0
  - func: _foreach_erfc_
    version: v1.11, v2.0
  - func: _foreach_expm1
    version: v1.11, v2.0
  - func: _foreach_expm1_
    version: v1.11, v2.0
  - func: _foreach_lgamma
    version: v1.11, v2.0
  - func: _foreach_lgamma_
    version: v1.11, v2.0
  - func: _foreach_log
    version: v1.11, v2.0
  - func: _foreach_log10
    version: v1.11, v2.0
  - func: _foreach_log10_
    version: v1.11, v2.0
  - func: _foreach_log1p
    version: v1.11, v2.0
  - func: _foreach_log1p_
    version: v1.11, v2.0
  - func: _foreach_log2
    version: v1.11, v2.0
  - func: _foreach_log2_
    version: v1.11, v2.0
  - func: _foreach_log_
    version: v1.11, v2.0
  - func: _foreach_reciprocal
    version: v1.11, v2.0
  - func: _foreach_reciprocal_
    version: v1.11, v2.0
  - func: _foreach_sin
    version: v1.11, v2.0
  - func: _foreach_sin_
    version: v1.11, v2.0
  - func: _foreach_sinh
    version: v1.11, v2.0
  - func: _foreach_sinh_
    version: v1.11, v2.0
  - func: _foreach_tan
    version: v1.11, v2.0
  - func: _foreach_tan_
    version: v1.11, v2.0
  - func: _foreach_tanh
    version: v1.11, v2.0
  - func: _foreach_tanh_
    version: v1.11, v2.0
  - func: _foreach_zero_
    version: v1.11, v2.0
  - func: _linalg_inv_out_helper_
    version: v1.11
  - func: _linalg_qr_helper
    version: v1.11
  - func: _logcumsumexp
    version: v1.11, v2.0
  - func: _logcumsumexp.out
    version: v1.11, v2.0
  - func: _lu_with_info
    version: v1.11, v2.0
  - func: _pdist_backward
    version: v1.11, v2.0
  - func: _sample_dirichlet
    version: v1.11, v2.0
  - func: _solve_helper
    version: v1.11
  - func: _standard_gamma
    version: v1.11, v2.0
  - func: _standard_gamma_grad
    version: v1.11, v2.0
  - func: _test_optional_filled_intlist
    version: v1.11, v2.0
  - func: _test_optional_floatlist
    version: v1.11, v2.0
  - func: _test_optional_intlist
    version: v1.11, v2.0
  - func: _unique
    version: v2.0
  - func: adaptive_max_pool3d
    version: v1.11, v2.0
  - func: adaptive_max_pool3d.out
    version: v1.11, v2.0
  - func: adaptive_max_pool3d_backward
    version: v1.11, v2.0
  - func: adaptive_max_pool3d_backward.grad_input
    version: v1.11, v2.0
  - func: batch_norm_update_stats
    version: v1.11, v2.0
  - func: binomial
    version: v1.11, v2.0
  - func: cauchy_
    version: v1.11, v2.0
  - func: cholesky_inverse
    version: v1.11, v2.0
  - func: cholesky_inverse.out
    version: v1.11, v2.0
  - func: copysign.Scalar
    version: v1.11, v2.0
  - func: copysign.Tensor
    version: v1.11, v2.0
  - func: copysign.out
    version: v1.11, v2.0
  - func: copysign_.Scalar
    version: v1.11, v2.0
  - func: copysign_.Tensor
    version: v1.11, v2.0
  - func: digamma
    version: v1.11, v2.0
  - func: digamma.out
    version: v1.11, v2.0
  - func: digamma_
    version: v1.11, v2.0
  - func: fmax
    version: v1.11, v2.0
  - func: fmax.out
    version: v1.11, v2.0
  - func: fmin
    version: v1.11, v2.0
  - func: fmin.out
    version: v1.11, v2.0
  - func: fractional_max_pool2d
    version: v1.11, v2.0
  - func: fractional_max_pool2d.output
    version: v1.11, v2.0
  - func: fractional_max_pool2d_backward
    version: v1.11, v2.0
  - func: fractional_max_pool2d_backward.grad_input
    version: v1.11, v2.0
  - func: fractional_max_pool3d
    version: v1.11, v2.0
  - func: fractional_max_pool3d.output
    version: v1.11, v2.0
  - func: fractional_max_pool3d_backward
    version: v1.11, v2.0
  - func: fractional_max_pool3d_backward.grad_input
    version: v1.11, v2.0
  - func: geometric_
    version: v1.11, v2.0
  - func: heaviside.out
    version: v1.11, v2.0
  - func: hypot
    version: v1.11, v2.0
  - func: hypot.out
    version: v1.11, v2.0
  - func: i0.out
    version: v1.11, v2.0
  - func: igamma
    version: v1.11, v2.0
  - func: igamma.out
    version: v1.11, v2.0
  - func: igamma_
    version: v1.11, v2.0
  - func: igammac
    version: v1.11, v2.0
  - func: igammac.out
    version: v1.11, v2.0
  - func: igammac_
    version: v1.11, v2.0
  - func: lcm.out
    version: v1.11, v2.0
  - func: lgamma
    version: v1.11, v2.0
  - func: lgamma.out
    version: v1.11, v2.0
  - func: lgamma_
    version: v1.11, v2.0
  - func: linalg_slogdet
    version: v2.0
  - func: linalg_slogdet.out
    version: v2.0
  - func: linalg_vector_norm
    version: v2.0
  - func: linalg_vector_norm.out
    version: v2.0
  - func: log_normal_
    version: v1.11, v2.0
  - func: logit
    version: v1.11, v2.0
  - func: logit.out
    version: v1.11, v2.0
  - func: logit_
    version: v1.11, v2.0
  - func: logit_backward
    version: v1.11, v2.0
  - func: logit_backward.grad_input
    version: v1.11, v2.0
  - func: matrix_exp
    version: v1.11, v2.0
  - func: mode
    version: v1.11, v2.0
  - func: multi_margin_loss
    version: v1.11, v2.0
  - func: multi_margin_loss.out
    version: v1.11, v2.0
  - func: multi_margin_loss_backward
    version: v1.11, v2.0
  - func: multi_margin_loss_backward.grad_input
    version: v1.11, v2.0
  - func: multilabel_margin_loss_backward
    version: v1.11, v2.0
  - func: multilabel_margin_loss_backward.grad_input
    version: v1.11, v2.0
  - func: nanmedian
    version: v2.0
  - func: nanmedian.dim_values
    version: v1.11, v2.0
  - func: narrow_copy.out
    version: v1.11, v2.0
  - func: nextafter
    version: v1.11, v2.0
  - func: nextafter.out
    version: v1.11, v2.0
  - func: orgqr
    version: v1.11, v2.0
  - func: orgqr.out
    version: v1.11, v2.0
  - func: poisson
    version: v1.11, v2.0
  - func: polar.out
    version: v1.11, v2.0
  - func: polygamma.out
    version: v1.11, v2.0
  - func: real
    version: v1.11, v2.0
  - func: repeat_interleave.Tensor
    version: v1.11, v2.0
  - func: scatter_.reduce
    version: v1.11, v2.0
  - func: scatter_.value_reduce
    version: v1.11, v2.0
  - func: slow_conv_dilated3d
    version: v1.11, v2.0
  - func: slow_conv_transpose3d
    version: v1.11, v2.0
  - func: slow_conv_transpose3d.out
    version: v1.11, v2.0
  - func: sspaddmm.out
    version: v1.11, v2.0
  - func: tensordot.out
    version: v1.11, v2.0
  - func: to_mkldnn
    version: v1.11, v2.0
  - func: to_sparse
    version: v1.11, v2.0
  - func: to_sparse.sparse_dim
    version: v1.11, v2.0
  - func: trace
    version: v2.0
  - func: unfold_backward
    version: v1.11, v2.0
  - func: unique_dim_consecutive
    version: v1.11, v2.0
unsupported:
  - func: _conj
    version: v1.11, v2.0
  - func: _conj_physical
    version: v1.11, v2.0
  - func: _det_lu_based_helper
    version: v1.11, v2.0
  - func: bitwise_left_shift.Scalar_Tensor
    version: v1.11, v2.0
  - func: bitwise_left_shift.Tensor
    version: v1.11, v2.0
  - func: bitwise_left_shift.Tensor_Scalar
    version: v1.11, v2.0
  - func: bitwise_left_shift.Tensor_Scalar_out
    version: v1.11, v2.0
  - func: bitwise_left_shift.Tensor_out
    version: v1.11, v2.0
  - func: bitwise_left_shift_.Tensor
    version: v1.11, v2.0
  - func: bitwise_left_shift_.Tensor_Scalar
    version: v1.11, v2.0
  - func: bitwise_right_shift.Scalar_Tensor
    version: v1.11, v2.0
  - func: bitwise_right_shift.Tensor
    version: v1.11, v2.0
  - func: bitwise_right_shift.Tensor_Scalar
    version: v1.11, v2.0
  - func: bitwise_right_shift.Tensor_Scalar_out
    version: v1.11, v2.0
  - func: bitwise_right_shift.Tensor_out
    version: v1.11, v2.0
  - func: bitwise_right_shift_.Tensor
    version: v1.11, v2.0
  - func: bitwise_right_shift_.Tensor_Scalar
    version: v1.11, v2.0
  - func: cholesky
    version: v1.11, v2.0
  - func: cholesky.out
    version: v1.11, v2.0
  - func: conj
    version: v1.11, v2.0
  - func: conj_physical
    version: v1.11, v2.0
  - func: conj_physical.out
    version: v1.11, v2.0
  - func: conj_physical_
    version: v1.11, v2.0
  - func: frexp.Tensor
    version: v1.11, v2.0
  - func: frexp.Tensor_out
    version: v1.11, v2.0
  - func: geqrf
    version: v1.11, v2.0
  - func: geqrf.a
    version: v1.11, v2.0
  - func: isin.Tensor_Tensor
    version: v1.11, v2.0
  - func: isin.Tensor_Tensor_out
    version: v1.11, v2.0
  - func: linalg_cholesky_ex
    version: v1.11, v2.0
  - func: linalg_cholesky_ex.L
    version: v1.11, v2.0
  - func: linalg_det
    version: v1.11, v2.0
  - func: linalg_det.out
    version: v1.11, v2.0
  - func: linalg_eig
    version: v1.11, v2.0
  - func: linalg_eig.out
    version: v1.11, v2.0
  - func: linalg_eigh
    version: v1.11, v2.0
  - func: linalg_eigh.eigvals
    version: v1.11, v2.0
  - func: linalg_eigvalsh
    version: v1.11, v2.0
  - func: linalg_eigvalsh.out
    version: v1.11, v2.0
  - func: linalg_lstsq
    version: v1.11, v2.0
  - func: linalg_lstsq.out
    version: v1.11, v2.0
  - func: linalg_lu_factor_ex
    version: v1.11, v2.0
  - func: linalg_lu_factor_ex.out
    version: v1.11, v2.0
  - func: logdet
    version: v2.0
  - func: lu_solve
    version: v1.11, v2.0
  - func: lu_solve.out
    version: v1.11, v2.0
  - func: lu_unpack
    version: v1.11, v2.0
  - func: lu_unpack.out
    version: v1.11, v2.0
  - func: special_entr
    version: v1.11, v2.0
  - func: special_entr.out
    version: v1.11, v2.0
  - func: special_erfcx
    version: v1.11, v2.0
  - func: special_erfcx.out
    version: v1.11, v2.0
  - func: special_zeta
    version: v1.11, v2.0
  - func: special_zeta.other_scalar
    version: v1.11, v2.0
  - func: special_zeta.other_scalar_out
    version: v1.11, v2.0
  - func: special_zeta.out
    version: v1.11, v2.0
  - func: special_zeta.self_scalar
    version: v1.11, v2.0
  - func: special_zeta.self_scalar_out
    version: v1.11, v2.0
quant:
  - func: q_scale(Tensor self) -> float
    impl_ns: acl_op
    version: v2.2
    kernel: aclops/QuantizeTensorKernelNpu.cpp
  - func: q_per_channel_scales(Tensor self) -> Tensor
    impl_ns: acl_op
    version: v2.2
    kernel: aclops/QuantizeTensorKernelNpu.cpp
  - func: q_zero_point(Tensor self) -> int
    impl_ns: acl_op
    version: v2.2
    kernel: aclops/QuantizeTensorKernelNpu.cpp
  - func: q_per_channel_zero_points(Tensor self) -> Tensor
    impl_ns: acl_op
    version: v2.2
    kernel: aclops/QuantizeTensorKernelNpu.cpp
  - func: q_per_channel_axis(Tensor self) -> int
    impl_ns: acl_op
    version: v2.2
    kernel: aclops/QuantizeTensorKernelNpu.cpp
  - func: qscheme(Tensor self) -> QScheme
    impl_ns: acl_op
    version: v2.2
    kernel: aclops/QuantizeTensorKernelNpu.cpp
  - func: dequantize.self(Tensor self) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op
    version: v2.2, v2.3, v2.4, v2.5
    kernel: aclops/QuantizeTensorKernelNpu.cpp, opapi/DequantizeKernelNpuOpApi.cpp
  - func: int_repr(Tensor self) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op
    version: v2.2, v2.3, v2.4, v2.5
    kernel: aclops/IntReprQuantKernelNpu.cpp
  - func: _empty_affine_quantized(SymInt[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, float scale=1, int zero_point=0, MemoryFormat? memory_format=contiguous_format) -> Tensor
    impl_ns: acl_op, acl_op, acl_op, acl_op
    version: v2.2, v2.3, v2.4, v2.5
    kernel: aclops/QuantizeTensorKernelNpu.cpp
